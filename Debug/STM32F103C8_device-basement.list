
STM32F103C8_device-basement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080082f8  080082f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024b0  200000c8  080084d0  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002578  080084d0  00022578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006f830  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a701  00000000  00000000  0008f921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001a99c  00000000  00000000  0009a022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  000b49c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003640  00000000  00000000  000b6240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002258a  00000000  00000000  000b9880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f7cd  00000000  00000000  000dbe0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000add3c  00000000  00000000  0010b5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b9313  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  001b9368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c8 	.word	0x200000c8
 800012c:	00000000 	.word	0x00000000
 8000130:	080082e0 	.word	0x080082e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000cc 	.word	0x200000cc
 800014c:	080082e0 	.word	0x080082e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_uldivmod>:
 80005d8:	b953      	cbnz	r3, 80005f0 <__aeabi_uldivmod+0x18>
 80005da:	b94a      	cbnz	r2, 80005f0 <__aeabi_uldivmod+0x18>
 80005dc:	2900      	cmp	r1, #0
 80005de:	bf08      	it	eq
 80005e0:	2800      	cmpeq	r0, #0
 80005e2:	bf1c      	itt	ne
 80005e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005ec:	f000 b96e 	b.w	80008cc <__aeabi_idiv0>
 80005f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005f8:	f000 f806 	bl	8000608 <__udivmoddi4>
 80005fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000604:	b004      	add	sp, #16
 8000606:	4770      	bx	lr

08000608 <__udivmoddi4>:
 8000608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800060c:	9e08      	ldr	r6, [sp, #32]
 800060e:	460d      	mov	r5, r1
 8000610:	4604      	mov	r4, r0
 8000612:	468e      	mov	lr, r1
 8000614:	2b00      	cmp	r3, #0
 8000616:	f040 8083 	bne.w	8000720 <__udivmoddi4+0x118>
 800061a:	428a      	cmp	r2, r1
 800061c:	4617      	mov	r7, r2
 800061e:	d947      	bls.n	80006b0 <__udivmoddi4+0xa8>
 8000620:	fab2 f382 	clz	r3, r2
 8000624:	b14b      	cbz	r3, 800063a <__udivmoddi4+0x32>
 8000626:	f1c3 0120 	rsb	r1, r3, #32
 800062a:	fa05 fe03 	lsl.w	lr, r5, r3
 800062e:	fa20 f101 	lsr.w	r1, r0, r1
 8000632:	409f      	lsls	r7, r3
 8000634:	ea41 0e0e 	orr.w	lr, r1, lr
 8000638:	409c      	lsls	r4, r3
 800063a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800063e:	fbbe fcf8 	udiv	ip, lr, r8
 8000642:	fa1f f987 	uxth.w	r9, r7
 8000646:	fb08 e21c 	mls	r2, r8, ip, lr
 800064a:	fb0c f009 	mul.w	r0, ip, r9
 800064e:	0c21      	lsrs	r1, r4, #16
 8000650:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000654:	4290      	cmp	r0, r2
 8000656:	d90a      	bls.n	800066e <__udivmoddi4+0x66>
 8000658:	18ba      	adds	r2, r7, r2
 800065a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800065e:	f080 8118 	bcs.w	8000892 <__udivmoddi4+0x28a>
 8000662:	4290      	cmp	r0, r2
 8000664:	f240 8115 	bls.w	8000892 <__udivmoddi4+0x28a>
 8000668:	f1ac 0c02 	sub.w	ip, ip, #2
 800066c:	443a      	add	r2, r7
 800066e:	1a12      	subs	r2, r2, r0
 8000670:	fbb2 f0f8 	udiv	r0, r2, r8
 8000674:	fb08 2210 	mls	r2, r8, r0, r2
 8000678:	fb00 f109 	mul.w	r1, r0, r9
 800067c:	b2a4      	uxth	r4, r4
 800067e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000682:	42a1      	cmp	r1, r4
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x92>
 8000686:	193c      	adds	r4, r7, r4
 8000688:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800068c:	f080 8103 	bcs.w	8000896 <__udivmoddi4+0x28e>
 8000690:	42a1      	cmp	r1, r4
 8000692:	f240 8100 	bls.w	8000896 <__udivmoddi4+0x28e>
 8000696:	3802      	subs	r0, #2
 8000698:	443c      	add	r4, r7
 800069a:	1a64      	subs	r4, r4, r1
 800069c:	2100      	movs	r1, #0
 800069e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006a2:	b11e      	cbz	r6, 80006ac <__udivmoddi4+0xa4>
 80006a4:	2200      	movs	r2, #0
 80006a6:	40dc      	lsrs	r4, r3
 80006a8:	e9c6 4200 	strd	r4, r2, [r6]
 80006ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b0:	b902      	cbnz	r2, 80006b4 <__udivmoddi4+0xac>
 80006b2:	deff      	udf	#255	; 0xff
 80006b4:	fab2 f382 	clz	r3, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d14f      	bne.n	800075c <__udivmoddi4+0x154>
 80006bc:	1a8d      	subs	r5, r1, r2
 80006be:	2101      	movs	r1, #1
 80006c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80006c4:	fa1f f882 	uxth.w	r8, r2
 80006c8:	fbb5 fcfe 	udiv	ip, r5, lr
 80006cc:	fb0e 551c 	mls	r5, lr, ip, r5
 80006d0:	fb08 f00c 	mul.w	r0, r8, ip
 80006d4:	0c22      	lsrs	r2, r4, #16
 80006d6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80006da:	42a8      	cmp	r0, r5
 80006dc:	d907      	bls.n	80006ee <__udivmoddi4+0xe6>
 80006de:	197d      	adds	r5, r7, r5
 80006e0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80006e4:	d202      	bcs.n	80006ec <__udivmoddi4+0xe4>
 80006e6:	42a8      	cmp	r0, r5
 80006e8:	f200 80e9 	bhi.w	80008be <__udivmoddi4+0x2b6>
 80006ec:	4694      	mov	ip, r2
 80006ee:	1a2d      	subs	r5, r5, r0
 80006f0:	fbb5 f0fe 	udiv	r0, r5, lr
 80006f4:	fb0e 5510 	mls	r5, lr, r0, r5
 80006f8:	fb08 f800 	mul.w	r8, r8, r0
 80006fc:	b2a4      	uxth	r4, r4
 80006fe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000702:	45a0      	cmp	r8, r4
 8000704:	d907      	bls.n	8000716 <__udivmoddi4+0x10e>
 8000706:	193c      	adds	r4, r7, r4
 8000708:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800070c:	d202      	bcs.n	8000714 <__udivmoddi4+0x10c>
 800070e:	45a0      	cmp	r8, r4
 8000710:	f200 80d9 	bhi.w	80008c6 <__udivmoddi4+0x2be>
 8000714:	4610      	mov	r0, r2
 8000716:	eba4 0408 	sub.w	r4, r4, r8
 800071a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800071e:	e7c0      	b.n	80006a2 <__udivmoddi4+0x9a>
 8000720:	428b      	cmp	r3, r1
 8000722:	d908      	bls.n	8000736 <__udivmoddi4+0x12e>
 8000724:	2e00      	cmp	r6, #0
 8000726:	f000 80b1 	beq.w	800088c <__udivmoddi4+0x284>
 800072a:	2100      	movs	r1, #0
 800072c:	e9c6 0500 	strd	r0, r5, [r6]
 8000730:	4608      	mov	r0, r1
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	fab3 f183 	clz	r1, r3
 800073a:	2900      	cmp	r1, #0
 800073c:	d14b      	bne.n	80007d6 <__udivmoddi4+0x1ce>
 800073e:	42ab      	cmp	r3, r5
 8000740:	d302      	bcc.n	8000748 <__udivmoddi4+0x140>
 8000742:	4282      	cmp	r2, r0
 8000744:	f200 80b9 	bhi.w	80008ba <__udivmoddi4+0x2b2>
 8000748:	1a84      	subs	r4, r0, r2
 800074a:	eb65 0303 	sbc.w	r3, r5, r3
 800074e:	2001      	movs	r0, #1
 8000750:	469e      	mov	lr, r3
 8000752:	2e00      	cmp	r6, #0
 8000754:	d0aa      	beq.n	80006ac <__udivmoddi4+0xa4>
 8000756:	e9c6 4e00 	strd	r4, lr, [r6]
 800075a:	e7a7      	b.n	80006ac <__udivmoddi4+0xa4>
 800075c:	409f      	lsls	r7, r3
 800075e:	f1c3 0220 	rsb	r2, r3, #32
 8000762:	40d1      	lsrs	r1, r2
 8000764:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000768:	fbb1 f0fe 	udiv	r0, r1, lr
 800076c:	fa1f f887 	uxth.w	r8, r7
 8000770:	fb0e 1110 	mls	r1, lr, r0, r1
 8000774:	fa24 f202 	lsr.w	r2, r4, r2
 8000778:	409d      	lsls	r5, r3
 800077a:	fb00 fc08 	mul.w	ip, r0, r8
 800077e:	432a      	orrs	r2, r5
 8000780:	0c15      	lsrs	r5, r2, #16
 8000782:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000786:	45ac      	cmp	ip, r5
 8000788:	fa04 f403 	lsl.w	r4, r4, r3
 800078c:	d909      	bls.n	80007a2 <__udivmoddi4+0x19a>
 800078e:	197d      	adds	r5, r7, r5
 8000790:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000794:	f080 808f 	bcs.w	80008b6 <__udivmoddi4+0x2ae>
 8000798:	45ac      	cmp	ip, r5
 800079a:	f240 808c 	bls.w	80008b6 <__udivmoddi4+0x2ae>
 800079e:	3802      	subs	r0, #2
 80007a0:	443d      	add	r5, r7
 80007a2:	eba5 050c 	sub.w	r5, r5, ip
 80007a6:	fbb5 f1fe 	udiv	r1, r5, lr
 80007aa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80007ae:	fb01 f908 	mul.w	r9, r1, r8
 80007b2:	b295      	uxth	r5, r2
 80007b4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80007b8:	45a9      	cmp	r9, r5
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x1c4>
 80007bc:	197d      	adds	r5, r7, r5
 80007be:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80007c2:	d274      	bcs.n	80008ae <__udivmoddi4+0x2a6>
 80007c4:	45a9      	cmp	r9, r5
 80007c6:	d972      	bls.n	80008ae <__udivmoddi4+0x2a6>
 80007c8:	3902      	subs	r1, #2
 80007ca:	443d      	add	r5, r7
 80007cc:	eba5 0509 	sub.w	r5, r5, r9
 80007d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80007d4:	e778      	b.n	80006c8 <__udivmoddi4+0xc0>
 80007d6:	f1c1 0720 	rsb	r7, r1, #32
 80007da:	408b      	lsls	r3, r1
 80007dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e4:	fa25 f407 	lsr.w	r4, r5, r7
 80007e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007ec:	fbb4 f9fe 	udiv	r9, r4, lr
 80007f0:	fa1f f88c 	uxth.w	r8, ip
 80007f4:	fb0e 4419 	mls	r4, lr, r9, r4
 80007f8:	fa20 f307 	lsr.w	r3, r0, r7
 80007fc:	fb09 fa08 	mul.w	sl, r9, r8
 8000800:	408d      	lsls	r5, r1
 8000802:	431d      	orrs	r5, r3
 8000804:	0c2b      	lsrs	r3, r5, #16
 8000806:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800080a:	45a2      	cmp	sl, r4
 800080c:	fa02 f201 	lsl.w	r2, r2, r1
 8000810:	fa00 f301 	lsl.w	r3, r0, r1
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0x222>
 8000816:	eb1c 0404 	adds.w	r4, ip, r4
 800081a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800081e:	d248      	bcs.n	80008b2 <__udivmoddi4+0x2aa>
 8000820:	45a2      	cmp	sl, r4
 8000822:	d946      	bls.n	80008b2 <__udivmoddi4+0x2aa>
 8000824:	f1a9 0902 	sub.w	r9, r9, #2
 8000828:	4464      	add	r4, ip
 800082a:	eba4 040a 	sub.w	r4, r4, sl
 800082e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000832:	fb0e 4410 	mls	r4, lr, r0, r4
 8000836:	fb00 fa08 	mul.w	sl, r0, r8
 800083a:	b2ad      	uxth	r5, r5
 800083c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000840:	45a2      	cmp	sl, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x24e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800084c:	d22d      	bcs.n	80008aa <__udivmoddi4+0x2a2>
 800084e:	45a2      	cmp	sl, r4
 8000850:	d92b      	bls.n	80008aa <__udivmoddi4+0x2a2>
 8000852:	3802      	subs	r0, #2
 8000854:	4464      	add	r4, ip
 8000856:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800085a:	fba0 8902 	umull	r8, r9, r0, r2
 800085e:	eba4 040a 	sub.w	r4, r4, sl
 8000862:	454c      	cmp	r4, r9
 8000864:	46c6      	mov	lr, r8
 8000866:	464d      	mov	r5, r9
 8000868:	d319      	bcc.n	800089e <__udivmoddi4+0x296>
 800086a:	d016      	beq.n	800089a <__udivmoddi4+0x292>
 800086c:	b15e      	cbz	r6, 8000886 <__udivmoddi4+0x27e>
 800086e:	ebb3 020e 	subs.w	r2, r3, lr
 8000872:	eb64 0405 	sbc.w	r4, r4, r5
 8000876:	fa04 f707 	lsl.w	r7, r4, r7
 800087a:	fa22 f301 	lsr.w	r3, r2, r1
 800087e:	431f      	orrs	r7, r3
 8000880:	40cc      	lsrs	r4, r1
 8000882:	e9c6 7400 	strd	r7, r4, [r6]
 8000886:	2100      	movs	r1, #0
 8000888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088c:	4631      	mov	r1, r6
 800088e:	4630      	mov	r0, r6
 8000890:	e70c      	b.n	80006ac <__udivmoddi4+0xa4>
 8000892:	468c      	mov	ip, r1
 8000894:	e6eb      	b.n	800066e <__udivmoddi4+0x66>
 8000896:	4610      	mov	r0, r2
 8000898:	e6ff      	b.n	800069a <__udivmoddi4+0x92>
 800089a:	4543      	cmp	r3, r8
 800089c:	d2e6      	bcs.n	800086c <__udivmoddi4+0x264>
 800089e:	ebb8 0e02 	subs.w	lr, r8, r2
 80008a2:	eb69 050c 	sbc.w	r5, r9, ip
 80008a6:	3801      	subs	r0, #1
 80008a8:	e7e0      	b.n	800086c <__udivmoddi4+0x264>
 80008aa:	4628      	mov	r0, r5
 80008ac:	e7d3      	b.n	8000856 <__udivmoddi4+0x24e>
 80008ae:	4611      	mov	r1, r2
 80008b0:	e78c      	b.n	80007cc <__udivmoddi4+0x1c4>
 80008b2:	4681      	mov	r9, r0
 80008b4:	e7b9      	b.n	800082a <__udivmoddi4+0x222>
 80008b6:	4608      	mov	r0, r1
 80008b8:	e773      	b.n	80007a2 <__udivmoddi4+0x19a>
 80008ba:	4608      	mov	r0, r1
 80008bc:	e749      	b.n	8000752 <__udivmoddi4+0x14a>
 80008be:	f1ac 0c02 	sub.w	ip, ip, #2
 80008c2:	443d      	add	r5, r7
 80008c4:	e713      	b.n	80006ee <__udivmoddi4+0xe6>
 80008c6:	3802      	subs	r0, #2
 80008c8:	443c      	add	r4, r7
 80008ca:	e724      	b.n	8000716 <__udivmoddi4+0x10e>

080008cc <__aeabi_idiv0>:
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop

080008d0 <clock_add_second>:
#include <Check_clock.h>

void clock_add_second(RTC_TimeTypeDef* corrected_time, int8_t sec) {
 80008d0:	b570      	push	{r4, r5, r6, lr}
	if(sec == 0)
 80008d2:	1e0d      	subs	r5, r1, #0
void clock_add_second(RTC_TimeTypeDef* corrected_time, int8_t sec) {
 80008d4:	4604      	mov	r4, r0
	if(sec == 0)
 80008d6:	d019      	beq.n	800090c <clock_add_second+0x3c>
		return;
	if(sec > 0) {
 80008d8:	b2ee      	uxtb	r6, r5
 80008da:	dd21      	ble.n	8000920 <clock_add_second+0x50>
		if(sec >= 60)
 80008dc:	2d3b      	cmp	r5, #59	; 0x3b
 80008de:	dd04      	ble.n	80008ea <clock_add_second+0x1a>
			clock_add_second(corrected_time, (sec-60));
 80008e0:	f1a6 013c 	sub.w	r1, r6, #60	; 0x3c
 80008e4:	b249      	sxtb	r1, r1
 80008e6:	f7ff fff3 	bl	80008d0 <clock_add_second>
		if(corrected_time->Seconds > (60 - sec)) {
 80008ea:	78a2      	ldrb	r2, [r4, #2]
 80008ec:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 80008f0:	42aa      	cmp	r2, r5
 80008f2:	dd12      	ble.n	800091a <clock_add_second+0x4a>
			corrected_time->Seconds = corrected_time->Seconds - 60 + sec;
 80008f4:	3a3c      	subs	r2, #60	; 0x3c
 80008f6:	18b3      	adds	r3, r6, r2
 80008f8:	70a3      	strb	r3, [r4, #2]
			if(corrected_time->Minutes == 59) {
 80008fa:	7863      	ldrb	r3, [r4, #1]
 80008fc:	2b3b      	cmp	r3, #59	; 0x3b
 80008fe:	d109      	bne.n	8000914 <clock_add_second+0x44>
				corrected_time->Minutes = 0;
 8000900:	2200      	movs	r2, #0
				if(corrected_time->Hours == 23) {
 8000902:	7823      	ldrb	r3, [r4, #0]
				corrected_time->Minutes = 0;
 8000904:	7062      	strb	r2, [r4, #1]
				if(corrected_time->Hours == 23) {
 8000906:	2b17      	cmp	r3, #23
 8000908:	d101      	bne.n	800090e <clock_add_second+0x3e>
					corrected_time->Hours = 0;
 800090a:	7022      	strb	r2, [r4, #0]
			corrected_time->Seconds = corrected_time->Seconds - sec;
			corrected_time->Minutes = corrected_time->Minutes;
			corrected_time->Hours = corrected_time->Hours;
		}
	}
}
 800090c:	bd70      	pop	{r4, r5, r6, pc}
					corrected_time->Hours = corrected_time->Hours + 1;
 800090e:	3301      	adds	r3, #1
					corrected_time->Hours = corrected_time->Hours - 1;
 8000910:	7023      	strb	r3, [r4, #0]
 8000912:	e7fb      	b.n	800090c <clock_add_second+0x3c>
				corrected_time->Minutes = corrected_time->Minutes + 1;
 8000914:	3301      	adds	r3, #1
				corrected_time->Minutes = corrected_time->Minutes - 1;
 8000916:	7063      	strb	r3, [r4, #1]
				corrected_time->Hours = corrected_time->Hours;
 8000918:	e7f8      	b.n	800090c <clock_add_second+0x3c>
			corrected_time->Seconds = corrected_time->Seconds + sec;
 800091a:	1993      	adds	r3, r2, r6
			corrected_time->Seconds = corrected_time->Seconds - sec;
 800091c:	70a3      	strb	r3, [r4, #2]
			corrected_time->Hours = corrected_time->Hours;
 800091e:	e7f5      	b.n	800090c <clock_add_second+0x3c>
		sec = -sec;
 8000920:	4275      	negs	r5, r6
 8000922:	b26d      	sxtb	r5, r5
		if(sec >= 60)
 8000924:	2d3b      	cmp	r5, #59	; 0x3b
 8000926:	dd04      	ble.n	8000932 <clock_add_second+0x62>
			clock_add_second(corrected_time, -(sec-60));
 8000928:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800092c:	b249      	sxtb	r1, r1
 800092e:	f7ff ffcf 	bl	80008d0 <clock_add_second>
		if(corrected_time->Seconds < sec) {
 8000932:	78a3      	ldrb	r3, [r4, #2]
 8000934:	42ab      	cmp	r3, r5
 8000936:	da0e      	bge.n	8000956 <clock_add_second+0x86>
			corrected_time->Seconds = 60 + corrected_time->Seconds - sec;
 8000938:	333c      	adds	r3, #60	; 0x3c
 800093a:	4433      	add	r3, r6
 800093c:	70a3      	strb	r3, [r4, #2]
			if(corrected_time->Minutes == 0) {
 800093e:	7863      	ldrb	r3, [r4, #1]
 8000940:	b93b      	cbnz	r3, 8000952 <clock_add_second+0x82>
				corrected_time->Minutes = 59;
 8000942:	233b      	movs	r3, #59	; 0x3b
 8000944:	7063      	strb	r3, [r4, #1]
				if(corrected_time->Hours == 0) {
 8000946:	7823      	ldrb	r3, [r4, #0]
 8000948:	b90b      	cbnz	r3, 800094e <clock_add_second+0x7e>
					corrected_time->Hours = 23;
 800094a:	2317      	movs	r3, #23
 800094c:	e7e0      	b.n	8000910 <clock_add_second+0x40>
					corrected_time->Hours = corrected_time->Hours - 1;
 800094e:	3b01      	subs	r3, #1
 8000950:	e7de      	b.n	8000910 <clock_add_second+0x40>
				corrected_time->Minutes = corrected_time->Minutes - 1;
 8000952:	3b01      	subs	r3, #1
 8000954:	e7df      	b.n	8000916 <clock_add_second+0x46>
			corrected_time->Seconds = corrected_time->Seconds - sec;
 8000956:	4433      	add	r3, r6
 8000958:	e7e0      	b.n	800091c <clock_add_second+0x4c>

0800095a <clock_comparison>:

bool clock_comparison(RTC_TimeTypeDef* less, RTC_TimeTypeDef* more) {
	if(less->Hours < more->Hours)
 800095a:	7802      	ldrb	r2, [r0, #0]
 800095c:	780b      	ldrb	r3, [r1, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d30c      	bcc.n	800097c <clock_comparison+0x22>
		return true;
	if(less->Hours > more->Hours)
 8000962:	d80d      	bhi.n	8000980 <clock_comparison+0x26>
		return false;
	// Часы равны
	if(less->Minutes < more->Minutes)
 8000964:	7842      	ldrb	r2, [r0, #1]
 8000966:	784b      	ldrb	r3, [r1, #1]
 8000968:	429a      	cmp	r2, r3
 800096a:	d307      	bcc.n	800097c <clock_comparison+0x22>
		return true;
	if(less->Minutes > more->Minutes)
 800096c:	d808      	bhi.n	8000980 <clock_comparison+0x26>
		return false;
	// Минуты равны
	if(less->Seconds < more->Seconds)
 800096e:	7880      	ldrb	r0, [r0, #2]
 8000970:	788b      	ldrb	r3, [r1, #2]
 8000972:	4298      	cmp	r0, r3
 8000974:	bf2c      	ite	cs
 8000976:	2000      	movcs	r0, #0
 8000978:	2001      	movcc	r0, #1
 800097a:	4770      	bx	lr
		return true;
 800097c:	2001      	movs	r0, #1
 800097e:	4770      	bx	lr
		return false;
 8000980:	2000      	movs	r0, #0
		return true;
	return false;
}
 8000982:	4770      	bx	lr

08000984 <clock_range_membership>:

bool clock_range_membership(RTC_TimeTypeDef* checked_time, RTC_TimeTypeDef* lower_limit, RTC_TimeTypeDef* upper_limit) {
 8000984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000988:	460f      	mov	r7, r1
 800098a:	4606      	mov	r6, r0
	if(clock_comparison(lower_limit, upper_limit)) { // М < Б
 800098c:	4611      	mov	r1, r2
 800098e:	4638      	mov	r0, r7
bool clock_range_membership(RTC_TimeTypeDef* checked_time, RTC_TimeTypeDef* lower_limit, RTC_TimeTypeDef* upper_limit) {
 8000990:	4614      	mov	r4, r2
	if(clock_comparison(lower_limit, upper_limit)) { // М < Б
 8000992:	f7ff ffe2 	bl	800095a <clock_comparison>
 8000996:	4639      	mov	r1, r7
 8000998:	4680      	mov	r8, r0
 800099a:	4630      	mov	r0, r6
 800099c:	f7ff ffdd 	bl	800095a <clock_comparison>
 80009a0:	4605      	mov	r5, r0
 80009a2:	f1b8 0f00 	cmp.w	r8, #0
 80009a6:	d008      	beq.n	80009ba <clock_range_membership+0x36>
		if((!clock_comparison(checked_time, lower_limit)) && (!clock_comparison(upper_limit, checked_time)))
 80009a8:	b990      	cbnz	r0, 80009d0 <clock_range_membership+0x4c>
			return true;  // М <= Т <= Б
	}
	else if(clock_comparison(upper_limit, lower_limit)) { // Б < М
		if((!clock_comparison(checked_time, lower_limit)) || (!clock_comparison(upper_limit, checked_time)))
 80009aa:	4631      	mov	r1, r6
 80009ac:	4620      	mov	r0, r4
 80009ae:	f7ff ffd4 	bl	800095a <clock_comparison>
 80009b2:	f080 0001 	eor.w	r0, r0, #1
 80009b6:	b2c0      	uxtb	r0, r0
 80009b8:	e005      	b.n	80009c6 <clock_range_membership+0x42>
	else if(clock_comparison(upper_limit, lower_limit)) { // Б < М
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff ffcd 	bl	800095a <clock_comparison>
 80009c0:	b118      	cbz	r0, 80009ca <clock_range_membership+0x46>
		if((!clock_comparison(checked_time, lower_limit)) || (!clock_comparison(upper_limit, checked_time)))
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d1f1      	bne.n	80009aa <clock_range_membership+0x26>
	else { // Б = М
		if((!clock_comparison(checked_time, lower_limit)) && (!clock_comparison(upper_limit, checked_time)))
			return true;  // Т = Б = М
	}
	return false;
}
 80009c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if((!clock_comparison(checked_time, lower_limit)) && (!clock_comparison(upper_limit, checked_time)))
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d0ed      	beq.n	80009aa <clock_range_membership+0x26>
 80009ce:	e7fa      	b.n	80009c6 <clock_range_membership+0x42>
	return false;
 80009d0:	2000      	movs	r0, #0
 80009d2:	e7f8      	b.n	80009c6 <clock_range_membership+0x42>

080009d4 <search_nearest_clock>:

// true => near_time - ближний, distant_time - дальний; false => distant_time - ближний, near_time - дальний,
// самое большое расстояние между start_time и start_time
bool search_nearest_clock(RTC_TimeTypeDef* start_time, RTC_TimeTypeDef* near_time, RTC_TimeTypeDef* distant_time) {
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	4615      	mov	r5, r2
 80009d8:	460f      	mov	r7, r1
	bool from_near_to_distant = clock_range_membership(start_time, near_time, distant_time);
	bool from_distant_to_near = clock_range_membership(start_time, distant_time, near_time);
 80009da:	460a      	mov	r2, r1
 80009dc:	4629      	mov	r1, r5
bool search_nearest_clock(RTC_TimeTypeDef* start_time, RTC_TimeTypeDef* near_time, RTC_TimeTypeDef* distant_time) {
 80009de:	4606      	mov	r6, r0
	bool from_distant_to_near = clock_range_membership(start_time, distant_time, near_time);
 80009e0:	f7ff ffd0 	bl	8000984 <clock_range_membership>
	if(from_distant_to_near) {
 80009e4:	4604      	mov	r4, r0
 80009e6:	b188      	cbz	r0, 8000a0c <search_nearest_clock+0x38>
	bool from_near_to_distant = clock_range_membership(start_time, near_time, distant_time);
 80009e8:	462a      	mov	r2, r5
 80009ea:	4639      	mov	r1, r7
 80009ec:	4630      	mov	r0, r6
 80009ee:	f7ff ffc9 	bl	8000984 <clock_range_membership>
		// D <= T <= N
		if(from_near_to_distant) {
 80009f2:	b158      	cbz	r0, 8000a0c <search_nearest_clock+0x38>
			// (T == D) || (T == N)
			if((!clock_comparison(start_time, distant_time)) && (!clock_comparison(distant_time, start_time)))
 80009f4:	4629      	mov	r1, r5
 80009f6:	4630      	mov	r0, r6
 80009f8:	f7ff ffaf 	bl	800095a <clock_comparison>
 80009fc:	b940      	cbnz	r0, 8000a10 <search_nearest_clock+0x3c>
 80009fe:	4631      	mov	r1, r6
 8000a00:	4628      	mov	r0, r5
 8000a02:	f7ff ffaa 	bl	800095a <clock_comparison>
 8000a06:	f080 0401 	eor.w	r4, r0, #1
 8000a0a:	b2e4      	uxtb	r4, r4
		else // D < T < N
			return true;
	}
	// (N <= T < D)
	return false;
}
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
 8000a10:	2400      	movs	r4, #0
 8000a12:	e7fb      	b.n	8000a0c <search_nearest_clock+0x38>

08000a14 <clock_channel_init>:
#include <Clock_channel.h>

extern RTC_HandleTypeDef hrtc; // стандартный HAL RTC-одуль

struct clock_channel_t clock_channel_init(struct relay_t* relay, RTC_TimeTypeDef time_inclusion, RTC_TimeTypeDef time_shutdown) {
 8000a14:	b513      	push	{r0, r1, r4, lr}
 8000a16:	9300      	str	r3, [sp, #0]
	struct clock_channel_t time_channel;
	time_channel.time_inclusion = time_inclusion;
	time_channel.time_shutdown = time_shutdown;
 8000a18:	f89d 3002 	ldrb.w	r3, [sp, #2]
	time_channel.time_inclusion = time_inclusion;
 8000a1c:	8002      	strh	r2, [r0, #0]
	time_channel.time_shutdown = time_shutdown;
 8000a1e:	7143      	strb	r3, [r0, #5]
	time_channel.relay = relay;
	time_channel.state = false;
	time_channel.deviation_sec = 5;
    return time_channel;
 8000a20:	2305      	movs	r3, #5
 8000a22:	7183      	strb	r3, [r0, #6]
 8000a24:	2300      	movs	r3, #0
	time_channel.time_inclusion = time_inclusion;
 8000a26:	0c12      	lsrs	r2, r2, #16
 8000a28:	7082      	strb	r2, [r0, #2]
	time_channel.time_shutdown = time_shutdown;
 8000a2a:	f8bd 2000 	ldrh.w	r2, [sp]
    return time_channel;
 8000a2e:	6081      	str	r1, [r0, #8]
	time_channel.time_shutdown = time_shutdown;
 8000a30:	f8a0 2003 	strh.w	r2, [r0, #3]
    return time_channel;
 8000a34:	7303      	strb	r3, [r0, #12]
}
 8000a36:	b002      	add	sp, #8
 8000a38:	bd10      	pop	{r4, pc}
	...

08000a3c <state_change_clock>:

// проверяет время, 00 - не пересекается, 01 - пересекается с включением, 10 - пересекается с выключением, 11 - и одно, и другое
uint8_t state_change_clock(struct clock_channel_t* clock_channel) {
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	4605      	mov	r5, r0
 8000a40:	b085      	sub	sp, #20
	uint8_t state = 0;
	RTC_TimeTypeDef rtc_time;
	RTC_TimeTypeDef rtc_time_dev_less;
	RTC_TimeTypeDef rtc_time_dev_more;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000a42:	2200      	movs	r2, #0
 8000a44:	a901      	add	r1, sp, #4
 8000a46:	4815      	ldr	r0, [pc, #84]	; (8000a9c <state_change_clock+0x60>)
 8000a48:	f006 fdc2 	bl	80075d0 <HAL_RTC_GetTime>
	rtc_time_dev_less = rtc_time;
	rtc_time_dev_more = rtc_time;

	clock_add_second(&rtc_time_dev_less, -clock_channel->deviation_sec);
 8000a4c:	79a9      	ldrb	r1, [r5, #6]
	rtc_time_dev_less = rtc_time;
 8000a4e:	9b01      	ldr	r3, [sp, #4]
	clock_add_second(&rtc_time_dev_less, -clock_channel->deviation_sec);
 8000a50:	4249      	negs	r1, r1
	rtc_time_dev_less = rtc_time;
 8000a52:	0c1a      	lsrs	r2, r3, #16
	clock_add_second(&rtc_time_dev_less, -clock_channel->deviation_sec);
 8000a54:	b249      	sxtb	r1, r1
 8000a56:	a802      	add	r0, sp, #8
	rtc_time_dev_less = rtc_time;
 8000a58:	f8ad 3008 	strh.w	r3, [sp, #8]
 8000a5c:	f88d 200a 	strb.w	r2, [sp, #10]
	rtc_time_dev_more = rtc_time;
 8000a60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000a64:	f88d 200e 	strb.w	r2, [sp, #14]
	clock_add_second(&rtc_time_dev_less, -clock_channel->deviation_sec);
 8000a68:	f7ff ff32 	bl	80008d0 <clock_add_second>
	clock_add_second(&rtc_time_dev_more, clock_channel->deviation_sec);
 8000a6c:	f995 1006 	ldrsb.w	r1, [r5, #6]
 8000a70:	a803      	add	r0, sp, #12
 8000a72:	f7ff ff2d 	bl	80008d0 <clock_add_second>

	if(clock_range_membership(&clock_channel->time_inclusion, &rtc_time_dev_less, &rtc_time_dev_more)) {
 8000a76:	aa03      	add	r2, sp, #12
 8000a78:	a902      	add	r1, sp, #8
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	f7ff ff82 	bl	8000984 <clock_range_membership>
		state |= 1;
	}
	if(clock_range_membership(&clock_channel->time_shutdown, &rtc_time_dev_less, &rtc_time_dev_more)) {
 8000a80:	aa03      	add	r2, sp, #12
	if(clock_range_membership(&clock_channel->time_inclusion, &rtc_time_dev_less, &rtc_time_dev_more)) {
 8000a82:	4604      	mov	r4, r0
	if(clock_range_membership(&clock_channel->time_shutdown, &rtc_time_dev_less, &rtc_time_dev_more)) {
 8000a84:	a902      	add	r1, sp, #8
 8000a86:	1ce8      	adds	r0, r5, #3
 8000a88:	f7ff ff7c 	bl	8000984 <clock_range_membership>
 8000a8c:	b110      	cbz	r0, 8000a94 <state_change_clock+0x58>
		state |= 2;
 8000a8e:	f044 0402 	orr.w	r4, r4, #2
 8000a92:	b2e4      	uxtb	r4, r4
	}
	return state;
}
 8000a94:	4620      	mov	r0, r4
 8000a96:	b005      	add	sp, #20
 8000a98:	bd30      	pop	{r4, r5, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20002460 	.word	0x20002460

08000aa0 <check_state_by_RTC>:

// изменяет состояние если нужно, возвращает факт изменения
bool check_state_by_RTC(struct clock_channel_t* clock_channel) {
 8000aa0:	b510      	push	{r4, lr}
 8000aa2:	4604      	mov	r4, r0
	// проверяем принадлежим ли хоть одной точке
	uint8_t check_time = state_change_clock(clock_channel);
 8000aa4:	f7ff ffca 	bl	8000a3c <state_change_clock>
	if(check_time == 0)
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b170      	cbz	r0, 8000aca <check_state_by_RTC+0x2a>
		return false; // нет => выходим
	if(check_time == 1) {
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	7b20      	ldrb	r0, [r4, #12]
 8000ab0:	d108      	bne.n	8000ac4 <check_state_by_RTC+0x24>
		// да - включающей
		if(clock_channel->state)
 8000ab2:	b950      	cbnz	r0, 8000aca <check_state_by_RTC+0x2a>
		if(!clock_channel->state)
			return false; // но уже выключены => выходим
		// выключаем
		clock_channel->state = false;
	}
	if(clock_channel->relay != NULL) // если есть реле, то и его переключаем
 8000ab4:	68a0      	ldr	r0, [r4, #8]
		clock_channel->state = false;
 8000ab6:	7323      	strb	r3, [r4, #12]
	if(clock_channel->relay != NULL) // если есть реле, то и его переключаем
 8000ab8:	b110      	cbz	r0, 8000ac0 <check_state_by_RTC+0x20>
		relay_set_state(clock_channel->relay, clock_channel->state);
 8000aba:	7b21      	ldrb	r1, [r4, #12]
 8000abc:	f000 f86a 	bl	8000b94 <relay_set_state>
	return true; // сообщаем о переключении
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	e003      	b.n	8000acc <check_state_by_RTC+0x2c>
		if(!clock_channel->state)
 8000ac4:	b110      	cbz	r0, 8000acc <check_state_by_RTC+0x2c>
		clock_channel->state = false;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e7f4      	b.n	8000ab4 <check_state_by_RTC+0x14>
		return false; // нет => выходим
 8000aca:	2000      	movs	r0, #0
}
 8000acc:	bd10      	pop	{r4, pc}
	...

08000ad0 <find_alarm_clock>:

// ищет ближайший будильник среди массива исключая текущие (+-.deviation_sec сек)
RTC_TimeTypeDef find_alarm_clock(struct clock_channel_t* clock_channels, uint8_t amt_clock_channel) {
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	RTC_TimeTypeDef rtc_time, near_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
	near_time = rtc_time;
	for(int i = 0; (i < amt_clock_channel) || (i == 255); ++i){
 8000ad2:	2500      	movs	r5, #0
RTC_TimeTypeDef find_alarm_clock(struct clock_channel_t* clock_channels, uint8_t amt_clock_channel) {
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	460e      	mov	r6, r1
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000ada:	2200      	movs	r2, #0
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <find_alarm_clock+0x80>)
 8000ade:	a901      	add	r1, sp, #4
 8000ae0:	f006 fd76 	bl	80075d0 <HAL_RTC_GetTime>
	near_time = rtc_time;
 8000ae4:	9b01      	ldr	r3, [sp, #4]
 8000ae6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8000aea:	0c1b      	lsrs	r3, r3, #16
 8000aec:	f88d 300a 	strb.w	r3, [sp, #10]
	for(int i = 0; (i < amt_clock_channel) || (i == 255); ++i){
 8000af0:	42ae      	cmp	r6, r5
 8000af2:	dc10      	bgt.n	8000b16 <find_alarm_clock+0x46>
 8000af4:	2dff      	cmp	r5, #255	; 0xff
 8000af6:	d00e      	beq.n	8000b16 <find_alarm_clock+0x46>
		}
		if(search_nearest_clock(&rtc_time, &(clock_channels[i].time_shutdown), &near_time)) {
			near_time = clock_channels[i].time_shutdown;
		}
	}
	return near_time;
 8000af8:	2000      	movs	r0, #0
 8000afa:	9b02      	ldr	r3, [sp, #8]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	f362 0007 	bfi	r0, r2, #0, #8
 8000b02:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000b06:	f362 200f 	bfi	r0, r2, #8, #8
 8000b0a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000b0e:	f363 4017 	bfi	r0, r3, #16, #8
}
 8000b12:	b005      	add	sp, #20
 8000b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(search_nearest_clock(&rtc_time, &(clock_channels[i].time_inclusion), &near_time)) {
 8000b16:	4621      	mov	r1, r4
 8000b18:	aa02      	add	r2, sp, #8
 8000b1a:	a801      	add	r0, sp, #4
 8000b1c:	f7ff ff5a 	bl	80009d4 <search_nearest_clock>
 8000b20:	b128      	cbz	r0, 8000b2e <find_alarm_clock+0x5e>
			near_time = clock_channels[i].time_inclusion;
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	f8ad 3008 	strh.w	r3, [sp, #8]
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	f88d 300a 	strb.w	r3, [sp, #10]
		if(search_nearest_clock(&rtc_time, &(clock_channels[i].time_shutdown), &near_time)) {
 8000b2e:	1ce7      	adds	r7, r4, #3
 8000b30:	4639      	mov	r1, r7
 8000b32:	aa02      	add	r2, sp, #8
 8000b34:	a801      	add	r0, sp, #4
 8000b36:	f7ff ff4d 	bl	80009d4 <search_nearest_clock>
 8000b3a:	b130      	cbz	r0, 8000b4a <find_alarm_clock+0x7a>
			near_time = clock_channels[i].time_shutdown;
 8000b3c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
 8000b40:	7963      	ldrb	r3, [r4, #5]
 8000b42:	f8ad 2008 	strh.w	r2, [sp, #8]
 8000b46:	f88d 300a 	strb.w	r3, [sp, #10]
	for(int i = 0; (i < amt_clock_channel) || (i == 255); ++i){
 8000b4a:	3501      	adds	r5, #1
 8000b4c:	3410      	adds	r4, #16
 8000b4e:	e7cf      	b.n	8000af0 <find_alarm_clock+0x20>
 8000b50:	20002460 	.word	0x20002460

08000b54 <activate_pin>:
#include <Device_relay.h>

void activate_pin(struct relay_t* relay) {
 8000b54:	4603      	mov	r3, r0
    if (relay->state != relay->invert)
 8000b56:	79da      	ldrb	r2, [r3, #7]
 8000b58:	8899      	ldrh	r1, [r3, #4]
 8000b5a:	799b      	ldrb	r3, [r3, #6]
 8000b5c:	6800      	ldr	r0, [r0, #0]
 8000b5e:	429a      	cmp	r2, r3
        HAL_GPIO_WritePin(relay->port, relay->pin, GPIO_PIN_SET);
 8000b60:	bf14      	ite	ne
 8000b62:	2201      	movne	r2, #1
    else
        HAL_GPIO_WritePin(relay->port, relay->pin, GPIO_PIN_RESET);
 8000b64:	2200      	moveq	r2, #0
 8000b66:	f006 b89f 	b.w	8006ca8 <HAL_GPIO_WritePin>

08000b6a <relay_init>:
}

struct relay_t relay_init(GPIO_TypeDef*  port, uint16_t pin, bool invert) {
 8000b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    struct relay_t relay;
    relay.port = port;
    relay.pin = pin;
    relay.invert = invert;
    relay.state = false;
    activate_pin(&relay);
 8000b6c:	466d      	mov	r5, sp
struct relay_t relay_init(GPIO_TypeDef*  port, uint16_t pin, bool invert) {
 8000b6e:	4604      	mov	r4, r0
    relay.invert = invert;
 8000b70:	f88d 3006 	strb.w	r3, [sp, #6]
    relay.state = false;
 8000b74:	2300      	movs	r3, #0
    activate_pin(&relay);
 8000b76:	4628      	mov	r0, r5
    relay.port = port;
 8000b78:	9100      	str	r1, [sp, #0]
    relay.pin = pin;
 8000b7a:	f8ad 2004 	strh.w	r2, [sp, #4]
    relay.state = false;
 8000b7e:	f88d 3007 	strb.w	r3, [sp, #7]
    activate_pin(&relay);
 8000b82:	f7ff ffe7 	bl	8000b54 <activate_pin>
    return relay;
 8000b86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b8a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000b8e:	4620      	mov	r0, r4
 8000b90:	b003      	add	sp, #12
 8000b92:	bd30      	pop	{r4, r5, pc}

08000b94 <relay_set_state>:

void relay_set_state(struct relay_t* relay, bool state) {
    relay->state = state;
 8000b94:	71c1      	strb	r1, [r0, #7]
    activate_pin(relay);
 8000b96:	f7ff bfdd 	b.w	8000b54 <activate_pin>
	...

08000b9c <Erase_flash>:
//////////////////////// ОЧИСТКА ПАМЯТИ /////////////////////////////
void Erase_flash(void)
{
	static FLASH_EraseInitTypeDef EraseInitStruct;     // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000b9c:	2300      	movs	r3, #0
	EraseInitStruct.PageAddress = STARTADDR;
	EraseInitStruct.NbPages = PAGES;
 8000b9e:	2201      	movs	r2, #1
{
 8000ba0:	b513      	push	{r0, r1, r4, lr}
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000ba2:	4c08      	ldr	r4, [pc, #32]	; (8000bc4 <Erase_flash+0x28>)
	EraseInitStruct.NbPages = PAGES;
 8000ba4:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <Erase_flash+0x2c>)
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8000ba6:	6023      	str	r3, [r4, #0]
	EraseInitStruct.NbPages = PAGES;
 8000ba8:	e9c4 1202 	strd	r1, r2, [r4, #8]
	//EraseInitStruct.Banks = FLASH_BANK_1; // FLASH_BANK_2 - банк №2, FLASH_BANK_BOTH - оба банка
	uint32_t page_error = 0; // переменная, в которую запишется адрес страницы при неудачном стирании
 8000bac:	9301      	str	r3, [sp, #4]

	HAL_FLASH_Unlock(); // разблокировать флеш
 8000bae:	f005 fe91 	bl	80068d4 <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 8000bb2:	a901      	add	r1, sp, #4
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f005 ff49 	bl	8006a4c <HAL_FLASHEx_Erase>
	else
	{

	}

	HAL_FLASH_Lock();
 8000bba:	f005 fe9d 	bl	80068f8 <HAL_FLASH_Lock>
}
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd10      	pop	{r4, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000e4 	.word	0x200000e4
 8000bc8:	0801fc00 	.word	0x0801fc00

08000bcc <Flash_search_adress>:

//////////////////////// ПОИСК СВОБОДНЫХ ЯЧЕЕК /////////////////////////////
uint32_t Flash_search_adress(uint32_t address, uint16_t cnt)
{
	uint16_t count_byte = cnt;
 8000bcc:	460b      	mov	r3, r1
{
 8000bce:	b510      	push	{r4, lr}
	while(count_byte)
	{
		if(0xFF == *(uint8_t*)address++) count_byte--;
		else count_byte = cnt;

		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <Flash_search_adress+0x28>)
	while(count_byte)
 8000bd2:	b90b      	cbnz	r3, 8000bd8 <Flash_search_adress+0xc>
			Erase_flash();        // тогда очищаем память
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
		}
	}

	return address -= cnt;
 8000bd4:	1a40      	subs	r0, r0, r1
 8000bd6:	e00c      	b.n	8000bf2 <Flash_search_adress+0x26>
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000bd8:	7804      	ldrb	r4, [r0, #0]
 8000bda:	3001      	adds	r0, #1
 8000bdc:	2cff      	cmp	r4, #255	; 0xff
 8000bde:	bf0a      	itet	eq
 8000be0:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
		else count_byte = cnt;
 8000be4:	460b      	movne	r3, r1
		if(0xFF == *(uint8_t*)address++) count_byte--;
 8000be6:	b29b      	uxtheq	r3, r3
		if(address == ENDMEMORY - 1) // если достигнут конец флеша
 8000be8:	4290      	cmp	r0, r2
 8000bea:	d1f2      	bne.n	8000bd2 <Flash_search_adress+0x6>
			Erase_flash();        // тогда очищаем память
 8000bec:	f7ff ffd6 	bl	8000b9c <Erase_flash>
			return STARTADDR;     // устанавливаем адрес для записи с самого начала
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <Flash_search_adress+0x2c>)
}
 8000bf2:	bd10      	pop	{r4, pc}
 8000bf4:	0801ffff 	.word	0x0801ffff
 8000bf8:	0801fc00 	.word	0x0801fc00

08000bfc <Write_to_flash>:

//////////////////////// ЗАПИСЬ ДАННЫХ /////////////////////////////
void Write_to_flash(uint32_t *buff)
{
 8000bfc:	b570      	push	{r4, r5, r6, lr}
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000bfe:	4c0f      	ldr	r4, [pc, #60]	; (8000c3c <Write_to_flash+0x40>)
{
 8000c00:	4605      	mov	r5, r0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000c02:	2108      	movs	r1, #8
 8000c04:	6820      	ldr	r0, [r4, #0]
 8000c06:	f7ff ffe1 	bl	8000bcc <Flash_search_adress>
	//////////////////////// ЗАПИСЬ ////////////////////////////
	HAL_FLASH_Unlock(); // разблокировать флеш

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000c0a:	2600      	movs	r6, #0
	res_addr = Flash_search_adress(res_addr, BUFFSIZE * DATAWIDTH); // ищем свободные ячейки начиная с последнего известного адреса
 8000c0c:	6020      	str	r0, [r4, #0]
	HAL_FLASH_Unlock(); // разблокировать флеш
 8000c0e:	f005 fe61 	bl	80068d4 <HAL_FLASH_Unlock>
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000c12:	4633      	mov	r3, r6
 8000c14:	682a      	ldr	r2, [r5, #0]
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f005 fea1 	bl	8006960 <HAL_FLASH_Program>
		{
			//uint32_t er = HAL_FLASH_GetError();
		}

		res_addr = res_addr + DATAWIDTH;
 8000c1e:	6821      	ldr	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000c20:	4633      	mov	r3, r6
 8000c22:	686a      	ldr	r2, [r5, #4]
		res_addr = res_addr + DATAWIDTH;
 8000c24:	3104      	adds	r1, #4
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000c26:	2002      	movs	r0, #2
		res_addr = res_addr + DATAWIDTH;
 8000c28:	6021      	str	r1, [r4, #0]
		if(HAL_FLASH_Program(WIDTHWRITE, res_addr, buff[i]) != HAL_OK)
 8000c2a:	f005 fe99 	bl	8006960 <HAL_FLASH_Program>
		res_addr = res_addr + DATAWIDTH;
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	3304      	adds	r3, #4
 8000c32:	6023      	str	r3, [r4, #0]
//	if(sum1 != sum2) // если суммы записанного и прочитанного не равны, тогда что-то пошло не так
//	{
//		return;
//	}
	//////////////////////// конец проверки записанного ////////////////////////
}
 8000c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FLASH_Lock(); // заблокировать флеш
 8000c38:	f005 be5e 	b.w	80068f8 <HAL_FLASH_Lock>
 8000c3c:	2000244c 	.word	0x2000244c

08000c40 <Read_last_data_in_flash>:

//////////////////////// ЧТЕНИЕ ПОСЛЕДНИХ ДАННЫХ /////////////////////////////
void Read_last_data_in_flash(uint32_t *buff)
{
	if(res_addr == STARTADDR)
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <Read_last_data_in_flash+0x18>)
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <Read_last_data_in_flash+0x1c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4293      	cmp	r3, r2

	uint32_t adr = res_addr - BUFFSIZE * DATAWIDTH; // сдвигаемся на начало последних данных

	for(uint16_t i = 0; i < BUFFSIZE; i++)
	{
		buff[i] = *(uint32_t*)adr; // читаем
 8000c48:	bf1f      	itttt	ne
 8000c4a:	f853 2c08 	ldrne.w	r2, [r3, #-8]
 8000c4e:	6002      	strne	r2, [r0, #0]
 8000c50:	f853 3c04 	ldrne.w	r3, [r3, #-4]
 8000c54:	6043      	strne	r3, [r0, #4]
		adr = adr + DATAWIDTH;
	}
}
 8000c56:	4770      	bx	lr
 8000c58:	2000244c 	.word	0x2000244c
 8000c5c:	0801fc00 	.word	0x0801fc00

08000c60 <Read_control_module_info_from_flash>:
void Read_control_module_info_from_flash(uint32_t *buff) {
 8000c60:	b510      	push	{r4, lr}
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8000c62:	2108      	movs	r1, #8
void Read_control_module_info_from_flash(uint32_t *buff) {
 8000c64:	4604      	mov	r4, r0
	  res_addr = Flash_search_adress(STARTADDR, BUFFSIZE * DATAWIDTH);
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <Read_control_module_info_from_flash+0x1c>)
 8000c68:	f7ff ffb0 	bl	8000bcc <Flash_search_adress>
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <Read_control_module_info_from_flash+0x20>)
 8000c6e:	6018      	str	r0, [r3, #0]
	  Read_last_data_in_flash(buff);
 8000c70:	4620      	mov	r0, r4
}
 8000c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  Read_last_data_in_flash(buff);
 8000c76:	f7ff bfe3 	b.w	8000c40 <Read_last_data_in_flash>
 8000c7a:	bf00      	nop
 8000c7c:	0801fc00 	.word	0x0801fc00
 8000c80:	2000244c 	.word	0x2000244c

08000c84 <_ZN11Grow_device13set_system_idESt5arrayIhLj12EE>:
        }
}

// --- Поля класса-платы ---

void Grow_device::set_system_id(std::array<uint8_t, AMT_BYTES_SYSTEM_ID> system_id) {
 8000c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000c86:	4604      	mov	r4, r0
 8000c88:	a801      	add	r0, sp, #4
 8000c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    system_id_ = system_id;
 8000c8e:	c807      	ldmia	r0, {r0, r1, r2}
 8000c90:	e884 000b 	stmia.w	r4, {r0, r1, r3}
}
 8000c94:	b004      	add	sp, #16
 8000c96:	bd10      	pop	{r4, pc}

08000c98 <_ZNK11Grow_device13get_system_idEv>:
std::array<uint8_t, AMT_BYTES_SYSTEM_ID> Grow_device::get_system_id() const {
 8000c98:	4602      	mov	r2, r0
    return system_id_;
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	cb03      	ldmia	r3!, {r0, r1}
 8000c9e:	6010      	str	r0, [r2, #0]
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	6051      	str	r1, [r2, #4]
 8000ca4:	6090      	str	r0, [r2, #8]
}
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4770      	bx	lr

08000caa <_ZN11Grow_device10set_activeEh>:

void Grow_device::set_active(uint8_t active) {
    if(active < 3)
 8000caa:	2902      	cmp	r1, #2
        active_ = active;
 8000cac:	bf98      	it	ls
 8000cae:	f880 102d 	strbls.w	r1, [r0, #45]	; 0x2d
}
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNK11Grow_device10get_activeEv>:

uint8_t Grow_device::get_active() const {
    return active_;
}
 8000cb4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8000cb8:	4770      	bx	lr

08000cba <_ZN11Grow_device26set_address_control_moduleE12LoRa_address>:
uint16_t Grow_device::get_address() const {
    return address_;
}

#if !defined( ESP32 )
bool Grow_device::set_address_control_module(LoRa_address address) {
 8000cba:	4603      	mov	r3, r0
	if(address.branch != 0)
 8000cbc:	0c08      	lsrs	r0, r1, #16
		return true;
 8000cbe:	bf18      	it	ne
 8000cc0:	2001      	movne	r0, #1
bool Grow_device::set_address_control_module(LoRa_address address) {
 8000cc2:	b082      	sub	sp, #8
	address_control_module_ = address;
 8000cc4:	bf08      	it	eq
 8000cc6:	61d9      	streq	r1, [r3, #28]
	return false;
}
 8000cc8:	b002      	add	sp, #8
 8000cca:	4770      	bx	lr

08000ccc <_ZNK11Grow_device26get_address_control_moduleEv>:
LoRa_address Grow_device::get_address_control_module() const {
	return address_control_module_;
 8000ccc:	69c3      	ldr	r3, [r0, #28]
 8000cce:	2000      	movs	r0, #0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f362 000f 	bfi	r0, r2, #0, #16
 8000cd6:	0c1b      	lsrs	r3, r3, #16
LoRa_address Grow_device::get_address_control_module() const {
 8000cd8:	b082      	sub	sp, #8
	return address_control_module_;
 8000cda:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000cde:	b002      	add	sp, #8
 8000ce0:	4770      	bx	lr

08000ce2 <_ZNK11Grow_device11get_settingEv>:
void Grow_device::set_setting(uint8_t setting) {
    setting_ = setting;
}
uint8_t Grow_device::get_setting() const {
    return setting_;
}
 8000ce2:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8000ce6:	4770      	bx	lr

08000ce8 <_ZNK11Grow_device8get_typeEhRh>:
    if(get_count_component() <= num)
        return true;
    result = component_[num].get_type();
    return false;
}
bool Grow_device::get_type(uint8_t num, uint8_t &result) const {
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4614      	mov	r4, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000cec:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000cf0:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8000cf2:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d206      	bcs.n	8000d08 <_ZNK11Grow_device8get_typeEhRh+0x20>
        return true;
    result = component_[num].get_type();
 8000cfa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000cfe:	f000 fbe2 	bl	80014c6 <_ZNK21Grow_device_component8get_typeEv>
 8000d02:	7020      	strb	r0, [r4, #0]
    return false;
 8000d04:	2000      	movs	r0, #0
}
 8000d06:	bd10      	pop	{r4, pc}
        return true;
 8000d08:	2001      	movs	r0, #1
 8000d0a:	e7fc      	b.n	8000d06 <_ZNK11Grow_device8get_typeEhRh+0x1e>

08000d0c <_ZNK11Grow_device6get_idEhRh>:
    std::vector<enum Type_device> type_device;
    for(int i = 0; i < get_count_component(); ++i)
        type_device.push_back(component_[i].get_type());
    return type_device;
}
bool Grow_device::get_id(uint8_t num, uint8_t &result) const {
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4614      	mov	r4, r2
 8000d10:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000d14:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8000d16:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d206      	bcs.n	8000d2c <_ZNK11Grow_device6get_idEhRh+0x20>
        return true;
    result = component_[num].get_id();
 8000d1e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000d22:	f000 fbd2 	bl	80014ca <_ZNK21Grow_device_component6get_idEv>
 8000d26:	7020      	strb	r0, [r4, #0]
    return false;
 8000d28:	2000      	movs	r0, #0
}
 8000d2a:	bd10      	pop	{r4, pc}
        return true;
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	e7fc      	b.n	8000d2a <_ZNK11Grow_device6get_idEhRh+0x1e>

08000d30 <_ZN11Grow_device9set_valueEht>:
    for(int i = 0; i < get_count_component(); ++i)
        id.push_back(component_[i].get_id());
    return id;
}

bool Grow_device::set_value(uint8_t num, uint16_t value) {
 8000d30:	b510      	push	{r4, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	4608      	mov	r0, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8000d3c:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8000d3e:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d208      	bcs.n	8000d58 <_ZN11Grow_device9set_valueEht+0x28>
        return true;
    component_[num].set_value(value);
 8000d46:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8000d4a:	f000 fbc2 	bl	80014d2 <_ZN21Grow_device_component9set_valueEt>
    change_value_ = true;
 8000d4e:	2301      	movs	r3, #1
    return false;
 8000d50:	2000      	movs	r0, #0
    change_value_ = true;
 8000d52:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000d56:	bd10      	pop	{r4, pc}
        return true;
 8000d58:	2001      	movs	r0, #1
 8000d5a:	e7fc      	b.n	8000d56 <_ZN11Grow_device9set_valueEht+0x26>

08000d5c <_ZN11Grow_device9get_valueEhRt>:
bool Grow_device::get_value(uint8_t num, uint16_t &result) {
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	4614      	mov	r4, r2
 8000d60:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8000d64:	1a9b      	subs	r3, r3, r2
    if(get_count_component() <= num)
 8000d66:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d206      	bcs.n	8000d7c <_ZN11Grow_device9get_valueEhRt+0x20>
        return true;
    result = component_[num].get_value();
 8000d6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000d72:	f000 fbac 	bl	80014ce <_ZNK21Grow_device_component9get_valueEv>
 8000d76:	8020      	strh	r0, [r4, #0]
    return false;
 8000d78:	2000      	movs	r0, #0
}
 8000d7a:	bd10      	pop	{r4, pc}
        return true;
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	e7fc      	b.n	8000d7a <_ZN11Grow_device9get_valueEhRt+0x1e>

08000d80 <_ZNK11Grow_device19get_count_componentEv>:
 8000d80:	6943      	ldr	r3, [r0, #20]
 8000d82:	6900      	ldr	r0, [r0, #16]
 8000d84:	1a18      	subs	r0, r3, r0
}
// --- Информации о компонентах ---

uint8_t Grow_device::get_count_component() const {
    return component_.size();
}
 8000d86:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8000d8a:	4770      	bx	lr

08000d8c <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d90:	e9d0 9a00 	ldrd	r9, sl, [r0]
 8000d94:	4693      	mov	fp, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8000d96:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d9a:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000d9c:	ebaa 0109 	sub.w	r1, sl, r9
	if (max_size() - size() < __n)
 8000da0:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
 8000da4:	4607      	mov	r7, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000da6:	ea4f 03a1 	mov.w	r3, r1, asr #2
	if (max_size() - size() < __n)
 8000daa:	d102      	bne.n	8000db2 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9c>)
 8000dae:	f007 f92c 	bl	800800a <_ZSt20__throw_length_errorPKc>
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	461c      	mov	r4, r3
 8000db6:	bf38      	it	cc
 8000db8:	2401      	movcc	r4, #1
 8000dba:	18e4      	adds	r4, r4, r3
 8000dbc:	eba8 0609 	sub.w	r6, r8, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000dc0:	d230      	bcs.n	8000e24 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000dc2:	b13c      	cbz	r4, 8000dd4 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x48>
 8000dc4:	4294      	cmp	r4, r2
 8000dc6:	bf28      	it	cs
 8000dc8:	4614      	movcs	r4, r2
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000dca:	00a0      	lsls	r0, r4, #2
 8000dcc:	f007 f90a 	bl	8007fe4 <_Znwj>
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	e000      	b.n	8000dd6 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
 8000dd4:	4625      	mov	r5, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000dd6:	f8db 3000 	ldr.w	r3, [fp]
 8000dda:	51ab      	str	r3, [r5, r6]
 8000ddc:	2300      	movs	r3, #0
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 8000dde:	eb09 0203 	add.w	r2, r9, r3
 8000de2:	4590      	cmp	r8, r2
 8000de4:	d10a      	bne.n	8000dfc <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
 8000de6:	2300      	movs	r3, #0
 8000de8:	3604      	adds	r6, #4
 8000dea:	442e      	add	r6, r5
 8000dec:	eb03 0208 	add.w	r2, r3, r8
 8000df0:	4592      	cmp	sl, r2
 8000df2:	d007      	beq.n	8000e04 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	50f2      	str	r2, [r6, r3]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	e7f7      	b.n	8000dec <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	50ea      	str	r2, [r5, r3]
 8000e00:	3304      	adds	r3, #4
 8000e02:	e7ec      	b.n	8000dde <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
 8000e04:	ebaa 0808 	sub.w	r8, sl, r8
 8000e08:	4446      	add	r6, r8
	if (__p)
 8000e0a:	f1b9 0f00 	cmp.w	r9, #0
 8000e0e:	d002      	beq.n	8000e16 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
	::operator delete(__p);
 8000e10:	4648      	mov	r0, r9
 8000e12:	f007 f8e1 	bl	8007fd8 <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000e16:	eb05 0484 	add.w	r4, r5, r4, lsl #2
      this->_M_impl._M_finish = __new_finish;
 8000e1a:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000e1e:	60bc      	str	r4, [r7, #8]
    }
 8000e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000e24:	4614      	mov	r4, r2
 8000e26:	e7d0      	b.n	8000dca <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
 8000e28:	080082f8 	.word	0x080082f8

08000e2c <_ZNSt6vectorI21Grow_device_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8000e2c:	460a      	mov	r2, r1
 8000e2e:	b510      	push	{r4, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000e30:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 8000e34:	42a1      	cmp	r1, r4
 8000e36:	d004      	beq.n	8000e42 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	f841 2b04 	str.w	r2, [r1], #4
	    ++this->_M_impl._M_finish;
 8000e3e:	6041      	str	r1, [r0, #4]
      }
 8000e40:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e42:	f7ff ffa3 	bl	8000d8c <_ZNSt6vectorI21Grow_device_componentSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8000e46:	e7fb      	b.n	8000e40 <_ZNSt6vectorI21Grow_device_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x14>

08000e48 <_ZN11Grow_deviceC1EhP11Type_device>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000e48:	2300      	movs	r3, #0
Grow_device::Grow_device(uint8_t amt_component, enum Type_device* type_device) {
 8000e4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000e4e:	4617      	mov	r7, r2
class LoRa_address {
public:
    uint16_t group = 0xFFFF;  // Адрес группы
    uint16_t branch = 0xFFFF; // Адрес ветви
public:
    LoRa_address() = default;
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e54:	4604      	mov	r4, r0
 8000e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e5a:	4689      	mov	r9, r1
 8000e5c:	61c2      	str	r2, [r0, #28]
 8000e5e:	f100 0810 	add.w	r8, r0, #16
 8000e62:	6183      	str	r3, [r0, #24]
 8000e64:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8000e68:	1882      	adds	r2, r0, r2
 8000e6a:	f100 010b 	add.w	r1, r0, #11
        system_id_[i] = 0;
 8000e6e:	f802 3f01 	strb.w	r3, [r2, #1]!
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8000e72:	428a      	cmp	r2, r1
 8000e74:	d1fb      	bne.n	8000e6e <_ZN11Grow_deviceC1EhP11Type_device+0x26>
    address_ = 0xFFFF;
 8000e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
    for(int i = 0; i < amt_component; ++i)
 8000e7a:	2600      	movs	r6, #0
        id_mas_devices[i] = 0;
 8000e7c:	4d16      	ldr	r5, [pc, #88]	; (8000ed8 <_ZN11Grow_deviceC1EhP11Type_device+0x90>)
    address_ = 0xFFFF;
 8000e7e:	81a2      	strh	r2, [r4, #12]
    setting_ = 0;
 8000e80:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    active_ = false;
 8000e84:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    change_value_ = false;
 8000e88:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        id_mas_devices[i] = 0;
 8000e8c:	702b      	strb	r3, [r5, #0]
 8000e8e:	706b      	strb	r3, [r5, #1]
 8000e90:	70ab      	strb	r3, [r5, #2]
 8000e92:	70eb      	strb	r3, [r5, #3]
 8000e94:	712b      	strb	r3, [r5, #4]
 8000e96:	716b      	strb	r3, [r5, #5]
    for(int i = 0; i < amt_component; ++i)
 8000e98:	45b1      	cmp	r9, r6
 8000e9a:	dd0c      	ble.n	8000eb6 <_ZN11Grow_deviceC1EhP11Type_device+0x6e>
        component_.push_back(Grow_device_component(type_device[i], (id_mas_devices[type_device[i]]++)));
 8000e9c:	5db9      	ldrb	r1, [r7, r6]
 8000e9e:	a801      	add	r0, sp, #4
 8000ea0:	5c6a      	ldrb	r2, [r5, r1]
    for(int i = 0; i < amt_component; ++i)
 8000ea2:	3601      	adds	r6, #1
        component_.push_back(Grow_device_component(type_device[i], (id_mas_devices[type_device[i]]++)));
 8000ea4:	1c53      	adds	r3, r2, #1
 8000ea6:	546b      	strb	r3, [r5, r1]
 8000ea8:	f000 fb08 	bl	80014bc <_ZN21Grow_device_componentC1E11Type_deviceh>
      { emplace_back(std::move(__x)); }
 8000eac:	4640      	mov	r0, r8
 8000eae:	a901      	add	r1, sp, #4
 8000eb0:	f7ff ffbc 	bl	8000e2c <_ZNSt6vectorI21Grow_device_componentSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
    for(int i = 0; i < amt_component; ++i)
 8000eb4:	e7f0      	b.n	8000e98 <_ZN11Grow_deviceC1EhP11Type_device+0x50>
    for (int i = 0; i < COUNT_TYPE_DEVICE; ++i)
 8000eb6:	2300      	movs	r3, #0
            setting_ = 0x02; // 0000.0010 - бит индивидуального номера, в случае наличия повторов
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <_ZN11Grow_deviceC1EhP11Type_device+0x90>)
        if(id_mas_devices[i] > 1) {
 8000ebc:	f812 0b01 	ldrb.w	r0, [r2], #1
    for (int i = 0; i < COUNT_TYPE_DEVICE; ++i)
 8000ec0:	3301      	adds	r3, #1
        if(id_mas_devices[i] > 1) {
 8000ec2:	2801      	cmp	r0, #1
            setting_ = 0x02; // 0000.0010 - бит индивидуального номера, в случае наличия повторов
 8000ec4:	bf88      	it	hi
 8000ec6:	f884 1030 	strbhi.w	r1, [r4, #48]	; 0x30
    for (int i = 0; i < COUNT_TYPE_DEVICE; ++i)
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d1f6      	bne.n	8000ebc <_ZN11Grow_deviceC1EhP11Type_device+0x74>
}
 8000ece:	4620      	mov	r0, r4
 8000ed0:	b003      	add	sp, #12
 8000ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000f4 	.word	0x200000f4

08000edc <_ZN21Grow_device_interface9load_dataER11Grow_deviceR17LoRa_contact_datamm>:

uint8_t data[50];
uint8_t size;

// --- Сохранение в энергонезависимую память ---
void Grow_device_interface::load_data(Grow_device &grow_device, LoRa_contact_data& contact_data, uint32_t adr, uint32_t channel) {
 8000edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ede:	4615      	mov	r5, r2
 8000ee0:	460c      	mov	r4, r1
    LoRa_address address(adr);
 8000ee2:	a801      	add	r0, sp, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f004 f9ba 	bl	800525e <_ZN12LoRa_addressC1Em>
    contact_data.set_my_adr(address);
 8000eea:	9901      	ldr	r1, [sp, #4]
 8000eec:	4628      	mov	r0, r5
 8000eee:	f000 fb4f 	bl	8001590 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    address.branch = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8ad 3006 	strh.w	r3, [sp, #6]
    grow_device.set_address_control_module(address);
 8000ef8:	9901      	ldr	r1, [sp, #4]
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fedd 	bl	8000cba <_ZN11Grow_device26set_address_control_moduleE12LoRa_address>
    contact_data.set_channel(channel);
 8000f00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8000f04:	4628      	mov	r0, r5
 8000f06:	f000 fb53 	bl	80015b0 <_ZN17LoRa_contact_data11set_channelEt>
    grow_device.set_active(2);
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff fecc 	bl	8000caa <_ZN11Grow_device10set_activeEh>
}
 8000f12:	b003      	add	sp, #12
 8000f14:	bd30      	pop	{r4, r5, pc}

08000f16 <_ZN21Grow_device_interface9save_dataERK11Grow_deviceRK17LoRa_contact_dataRmS6_>:
bool Grow_device_interface::save_data(const Grow_device &grow_device, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 8000f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_device.get_active() != 2)
 8000f18:	4608      	mov	r0, r1
bool Grow_device_interface::save_data(const Grow_device &grow_device, const LoRa_contact_data& contact_data, uint32_t &adr, uint32_t &channel) {
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461e      	mov	r6, r3
    if(grow_device.get_active() != 2)
 8000f1e:	f7ff fec9 	bl	8000cb4 <_ZNK11Grow_device10get_activeEv>
 8000f22:	2802      	cmp	r0, #2
 8000f24:	d111      	bne.n	8000f4a <_ZN21Grow_device_interface9save_dataERK11Grow_deviceRK17LoRa_contact_dataRmS6_+0x34>
        return true;
    adr = (contact_data.get_my_adr().group << 16 | contact_data.get_my_adr().branch);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f000 fb37 	bl	800159a <_ZNK17LoRa_contact_data10get_my_adrEv>
 8000f2c:	0405      	lsls	r5, r0, #16
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f000 fb33 	bl	800159a <_ZNK17LoRa_contact_data10get_my_adrEv>
 8000f34:	ea45 4510 	orr.w	r5, r5, r0, lsr #16
 8000f38:	6035      	str	r5, [r6, #0]
    channel = contact_data.get_channel();
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f000 fb3f 	bl	80015be <_ZNK17LoRa_contact_data11get_channelEv>
 8000f40:	9b06      	ldr	r3, [sp, #24]
 8000f42:	6018      	str	r0, [r3, #0]
 8000f44:	2000      	movs	r0, #0
    return false;
}
 8000f46:	b002      	add	sp, #8
 8000f48:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e7fb      	b.n	8000f46 <_ZN21Grow_device_interface9save_dataERK11Grow_deviceRK17LoRa_contact_dataRmS6_+0x30>
	...

08000f50 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data>:

// --- LoRa-соединение ---
void Grow_device_interface::send_registration_packet(const Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	b088      	sub	sp, #32
 8000f56:	460e      	mov	r6, r1
    LoRa_packet packet;
 8000f58:	a803      	add	r0, sp, #12
void Grow_device_interface::send_registration_packet(const Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8000f5a:	4617      	mov	r7, r2
    LoRa_packet packet;
 8000f5c:	f003 f84e 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
    uint8_t com = 0;
 8000f60:	2300      	movs	r3, #0
    uint8_t len = grow_device.get_count_component();
 8000f62:	4630      	mov	r0, r6
 8000f64:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001030 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xe0>
    uint8_t com = 0;
 8000f68:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len = grow_device.get_count_component();
 8000f6c:	f10d 0a14 	add.w	sl, sp, #20
 8000f70:	f7ff ff06 	bl	8000d80 <_ZNK11Grow_device19get_count_componentEv>
 8000f74:	240c      	movs	r4, #12
 8000f76:	4655      	mov	r5, sl
 8000f78:	46c8      	mov	r8, r9
 8000f7a:	f88d 000b 	strb.w	r0, [sp, #11]
    uint8_t num_byte = 0;
    // Формирование данных пакета: ID, Type module, Count component, Type all component
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
        data[num_byte++] = grow_device.get_system_id()[i];
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4628      	mov	r0, r5
 8000f82:	f7ff fe89 	bl	8000c98 <_ZNK11Grow_device13get_system_idEv>
 8000f86:	f81a 3b01 	ldrb.w	r3, [sl], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8000f8a:	3c01      	subs	r4, #1
        data[num_byte++] = grow_device.get_system_id()[i];
 8000f8c:	f809 3b01 	strb.w	r3, [r9], #1
    for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8000f90:	d1f5      	bne.n	8000f7e <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0x2e>
    data[num_byte++] = len;  // Length = grow_device.get_count_component();
 8000f92:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000f96:	f888 300c 	strb.w	r3, [r8, #12]
    data[num_byte++] = 0x02; // Type = devices
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f888 300d 	strb.w	r3, [r8, #13]
    for(int i = 0; i < len; ++i)
 8000fa0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000fa4:	b2e1      	uxtb	r1, r4
 8000fa6:	f101 020e 	add.w	r2, r1, #14
 8000faa:	42a3      	cmp	r3, r4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	dd05      	ble.n	8000fbc <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0x6c>
        grow_device.get_type(i, data[num_byte++]);
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	4442      	add	r2, r8
 8000fb4:	f7ff fe98 	bl	8000ce8 <_ZNK11Grow_device8get_typeEhRh>
    for(int i = 0; i < len; ++i)
 8000fb8:	3401      	adds	r4, #1
 8000fba:	e7f1      	b.n	8000fa0 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0x50>
    // Формирование пакета
    packet_system.set_dest_adr(packet, LORA_GLOBAL_ADDRESS);
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	491a      	ldr	r1, [pc, #104]	; (8001028 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xd8>)
 8000fc0:	f004 f94d 	bl	800525e <_ZN12LoRa_addressC1Em>
 8000fc4:	9a05      	ldr	r2, [sp, #20]
 8000fc6:	a903      	add	r1, sp, #12
 8000fc8:	4818      	ldr	r0, [pc, #96]	; (800102c <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xdc>)
 8000fca:	f004 f9d4 	bl	8005376 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_system.set_sour_adr(packet, LORA_GLOBAL_ADDRESS);
 8000fce:	4628      	mov	r0, r5
 8000fd0:	4915      	ldr	r1, [pc, #84]	; (8001028 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xd8>)
 8000fd2:	f004 f944 	bl	800525e <_ZN12LoRa_addressC1Em>
 8000fd6:	9a05      	ldr	r2, [sp, #20]
 8000fd8:	a903      	add	r1, sp, #12
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xdc>)
 8000fdc:	f004 f9fe 	bl	80053dc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_system.set_packet_type(packet, Packet_Type::SYSTEM);
 8000fe0:	a903      	add	r1, sp, #12
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	4811      	ldr	r0, [pc, #68]	; (800102c <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xdc>)
 8000fe6:	f004 fa18 	bl	800541a <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_system.set_packet_data(packet, &com, data, &len);
 8000fea:	f10d 030b 	add.w	r3, sp, #11
 8000fee:	f10d 020a 	add.w	r2, sp, #10
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	a903      	add	r1, sp, #12
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xe0>)
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data+0xdc>)
 8000ffa:	f004 fc47 	bl	800588c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>
    // Отправка пакета
    contact_data.add_packet(std::move(packet));
 8000ffe:	a903      	add	r1, sp, #12
 8001000:	4628      	mov	r0, r5
 8001002:	f003 f876 	bl	80040f2 <_ZN11LoRa_packetC1EOS_>
 8001006:	4629      	mov	r1, r5
 8001008:	4638      	mov	r0, r7
 800100a:	f000 fadb 	bl	80015c4 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 800100e:	4628      	mov	r0, r5
 8001010:	f002 fffc 	bl	800400c <_ZN11LoRa_packetD1Ev>
    contact_data.broadcast_send();
 8001014:	2100      	movs	r1, #0
 8001016:	4638      	mov	r0, r7
 8001018:	f000 fff7 	bl	800200a <_ZN17LoRa_contact_data14broadcast_sendEb>
    LoRa_packet packet;
 800101c:	a803      	add	r0, sp, #12
 800101e:	f002 fff5 	bl	800400c <_ZN11LoRa_packetD1Ev>
}
 8001022:	b008      	add	sp, #32
 8001024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001028:	01ff7fff 	.word	0x01ff7fff
 800102c:	20002404 	.word	0x20002404
 8001030:	20000175 	.word	0x20000175

08001034 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data>:

bool Grow_device_interface::check_contact_error(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8001034:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if(grow_device.get_active() != 1)
 8001036:	4608      	mov	r0, r1
bool Grow_device_interface::check_contact_error(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8001038:	460d      	mov	r5, r1
 800103a:	4616      	mov	r6, r2
    if(grow_device.get_active() != 1)
 800103c:	f7ff fe3a 	bl	8000cb4 <_ZNK11Grow_device10get_activeEv>
 8001040:	2801      	cmp	r0, #1
 8001042:	4604      	mov	r4, r0
 8001044:	d116      	bne.n	8001074 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data+0x40>
        return false;
    grow_device.set_address_control_module(LORA_GLOBAL_ADDRESS);
 8001046:	490c      	ldr	r1, [pc, #48]	; (8001078 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data+0x44>)
 8001048:	a801      	add	r0, sp, #4
 800104a:	f004 f908 	bl	800525e <_ZN12LoRa_addressC1Em>
 800104e:	9901      	ldr	r1, [sp, #4]
 8001050:	4628      	mov	r0, r5
 8001052:	f7ff fe32 	bl	8000cba <_ZN11Grow_device26set_address_control_moduleE12LoRa_address>
    contact_data.set_my_adr(LORA_GLOBAL_ADDRESS);
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data+0x44>)
 8001058:	a801      	add	r0, sp, #4
 800105a:	f004 f900 	bl	800525e <_ZN12LoRa_addressC1Em>
 800105e:	9901      	ldr	r1, [sp, #4]
 8001060:	4630      	mov	r0, r6
 8001062:	f000 fa95 	bl	8001590 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
    grow_device.set_active(0);
 8001066:	4628      	mov	r0, r5
 8001068:	2100      	movs	r1, #0
 800106a:	f7ff fe1e 	bl	8000caa <_ZN11Grow_device10set_activeEh>
    return true;
 800106e:	4620      	mov	r0, r4
}
 8001070:	b002      	add	sp, #8
 8001072:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001074:	2000      	movs	r0, #0
 8001076:	e7fb      	b.n	8001070 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data+0x3c>
 8001078:	01ff7fff 	.word	0x01ff7fff

0800107c <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>:
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4605      	mov	r5, r0
 8001080:	f100 0478 	add.w	r4, r0, #120	; 0x78
 8001084:	42ac      	cmp	r4, r5
 8001086:	d004      	beq.n	8001092 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x16>
 8001088:	3c08      	subs	r4, #8
 800108a:	4620      	mov	r0, r4
 800108c:	f002 ffbe 	bl	800400c <_ZN11LoRa_packetD1Ev>
 8001090:	e7f8      	b.n	8001084 <_ZNSt5arrayI11LoRa_packetLj15EED1Ev+0x8>
 8001092:	4620      	mov	r0, r4
 8001094:	bd38      	pop	{r3, r4, r5, pc}

08001096 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>:
 8001096:	b570      	push	{r4, r5, r6, lr}
 8001098:	4605      	mov	r5, r0
 800109a:	460e      	mov	r6, r1
 800109c:	2400      	movs	r4, #0
 800109e:	1931      	adds	r1, r6, r4
 80010a0:	1928      	adds	r0, r5, r4
 80010a2:	3408      	adds	r4, #8
 80010a4:	f003 f816 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
 80010a8:	2c78      	cmp	r4, #120	; 0x78
 80010aa:	d1f8      	bne.n	800109e <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_+0x8>
 80010ac:	4628      	mov	r0, r5
 80010ae:	bd70      	pop	{r4, r5, r6, pc}

080010b0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data>:

bool Grow_device_interface::check_regist_packet(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	4616      	mov	r6, r2
 80010b6:	b0a7      	sub	sp, #156	; 0x9c
    all_packets = contact_data.get_all_packet(all_packets_len);
 80010b8:	4a38      	ldr	r2, [pc, #224]	; (800119c <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xec>)
 80010ba:	a808      	add	r0, sp, #32
bool Grow_device_interface::check_regist_packet(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 80010bc:	460c      	mov	r4, r1
    all_packets = contact_data.get_all_packet(all_packets_len);
 80010be:	4631      	mov	r1, r6
 80010c0:	f000 faca 	bl	8001658 <_ZN17LoRa_contact_data14get_all_packetERh>
 80010c4:	a908      	add	r1, sp, #32
 80010c6:	4836      	ldr	r0, [pc, #216]	; (80011a0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf0>)
 80010c8:	f7ff ffe5 	bl	8001096 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 80010cc:	a808      	add	r0, sp, #32
 80010ce:	f7ff ffd5 	bl	800107c <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    // (!) ----- сделать сброс в 0 при отсутствии контакта в течении времени
    // проверить на то является ли пакет подтверждением регистрации, если да, то произвести попытку регистрации
    for(int i = 0; i < all_packets_len; ++i) {
 80010d2:	2500      	movs	r5, #0
 80010d4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800119c <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xec>
 80010d8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80011a0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf0>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 80010dc:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 80011b0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0x100>
    for(int i = 0; i < all_packets_len; ++i) {
 80010e0:	f898 3000 	ldrb.w	r3, [r8]
 80010e4:	42ab      	cmp	r3, r5
 80010e6:	dd56      	ble.n	8001196 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe6>
        if(packet_analyzer.get_packet_type(all_packets[i]) == Packet_Type::SYSTEM) {
 80010e8:	eb09 07c5 	add.w	r7, r9, r5, lsl #3
 80010ec:	4639      	mov	r1, r7
 80010ee:	4650      	mov	r0, sl
 80010f0:	f004 f920 	bl	8005334 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 80010f4:	2803      	cmp	r0, #3
 80010f6:	d14c      	bne.n	8001192 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe2>
            uint8_t err = 0;
            err = packet_system.get_size_by_packet(all_packets[i], size);
 80010f8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80011b4 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0x104>
 80010fc:	4639      	mov	r1, r7
 80010fe:	465a      	mov	r2, fp
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf4>)
 8001102:	f004 fc8f 	bl	8005a24 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if((err != 0) || (size != (3+AMT_BYTES_SYSTEM_ID)))
 8001106:	2800      	cmp	r0, #0
 8001108:	d143      	bne.n	8001192 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe2>
 800110a:	f89b 3000 	ldrb.w	r3, [fp]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	d13f      	bne.n	8001192 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe2>
                continue;
            uint8_t com = 0x00;
            uint8_t len = 0;
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 8001112:	f10d 030f 	add.w	r3, sp, #15
            uint8_t com = 0x00;
 8001116:	f88d 000e 	strb.w	r0, [sp, #14]
            uint8_t len = 0;
 800111a:	f88d 000f 	strb.w	r0, [sp, #15]
            packet_system.get_packet_data(all_packets[i], &com, data, &len);
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	4639      	mov	r1, r7
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf8>)
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf4>)
 8001126:	f10d 020e 	add.w	r2, sp, #14
 800112a:	f004 fc19 	bl	8005960 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
            if(com != 0x01)
 800112e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d12d      	bne.n	8001192 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe2>
 8001136:	aa05      	add	r2, sp, #20
 8001138:	230c      	movs	r3, #12
 800113a:	4693      	mov	fp, r2
 800113c:	491a      	ldr	r1, [pc, #104]	; (80011a8 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf8>)
                continue;
            uint8_t num_byte = 0;
            std::array<uint8_t, AMT_BYTES_SYSTEM_ID> device_id;
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
                device_id[i]= data[num_byte++];
 800113e:	f811 0b01 	ldrb.w	r0, [r1], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001142:	3b01      	subs	r3, #1
                device_id[i]= data[num_byte++];
 8001144:	f802 0b01 	strb.w	r0, [r2], #1
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i)
 8001148:	d1f9      	bne.n	800113e <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0x8e>
            if(device_id != grow_device.get_system_id())
 800114a:	4621      	mov	r1, r4
 800114c:	a808      	add	r0, sp, #32
 800114e:	f7ff fda3 	bl	8000c98 <_ZNK11Grow_device13get_system_idEv>
      template<typename _Tp>
	static bool
	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
	{
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 8001152:	220c      	movs	r2, #12
 8001154:	4658      	mov	r0, fp
 8001156:	a908      	add	r1, sp, #32
 8001158:	f006 ffa4 	bl	80080a4 <memcmp>
 800115c:	b9c8      	cbnz	r0, 8001192 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xe2>
                continue;
            grow_device.set_address_control_module(packet_system.get_sour_adr(all_packets[i]));
 800115e:	4639      	mov	r1, r7
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xf4>)
 8001162:	f004 f8d9 	bl	8005318 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001166:	4601      	mov	r1, r0
 8001168:	9008      	str	r0, [sp, #32]
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff fda5 	bl	8000cba <_ZN11Grow_device26set_address_control_moduleE12LoRa_address>
            contact_data.set_my_adr(LoRa_address(&data[num_byte]));
 8001170:	2203      	movs	r2, #3
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xfc>)
 8001174:	a804      	add	r0, sp, #16
 8001176:	f004 f857 	bl	8005228 <_ZN12LoRa_addressC1EPKhh>
 800117a:	9904      	ldr	r1, [sp, #16]
 800117c:	4630      	mov	r0, r6
 800117e:	f000 fa07 	bl	8001590 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>
            num_byte += 3;
            grow_device.set_active(1);
 8001182:	4620      	mov	r0, r4
 8001184:	2101      	movs	r1, #1
 8001186:	f7ff fd90 	bl	8000caa <_ZN11Grow_device10set_activeEh>
            return true;
 800118a:	2001      	movs	r0, #1
        }
    }
    return false;
}
 800118c:	b027      	add	sp, #156	; 0x9c
 800118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < all_packets_len; ++i) {
 8001192:	3501      	adds	r5, #1
 8001194:	e7a4      	b.n	80010e0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0x30>
    return false;
 8001196:	2000      	movs	r0, #0
 8001198:	e7f8      	b.n	800118c <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data+0xdc>
 800119a:	bf00      	nop
 800119c:	20000174 	.word	0x20000174
 80011a0:	200000fc 	.word	0x200000fc
 80011a4:	20002404 	.word	0x20002404
 80011a8:	20000175 	.word	0x20000175
 80011ac:	20000181 	.word	0x20000181
 80011b0:	20002388 	.word	0x20002388
 80011b4:	200001a8 	.word	0x200001a8

080011b8 <_ZN21Grow_device_interface23contact_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet>:
    return 0;
}



uint8_t Grow_device_interface::contact_package_handler(Grow_device &grow_device, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 80011b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011ba:	4619      	mov	r1, r3
    uint8_t err = 0;
    uint8_t com = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 80011c2:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_connection.get_packet_data(packet, &com, data, &len);
 80011c6:	f10d 030f 	add.w	r3, sp, #15
 80011ca:	f10d 020e 	add.w	r2, sp, #14
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <_ZN21Grow_device_interface23contact_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x34>)
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <_ZN21Grow_device_interface23contact_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x38>)
 80011d4:	f004 fa88 	bl	80056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
    switch(com) {
 80011d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80011dc:	2b0c      	cmp	r3, #12
 80011de:	bf8e      	itee	hi
 80011e0:	2001      	movhi	r0, #1
 80011e2:	4a04      	ldrls	r2, [pc, #16]	; (80011f4 <_ZN21Grow_device_interface23contact_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x3c>)
 80011e4:	5cd0      	ldrbls	r0, [r2, r3]
    // 0 - нет ошибки, пакет обработан
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    return err;
}
 80011e6:	b005      	add	sp, #20
 80011e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ec:	200023a4 	.word	0x200023a4
 80011f0:	20000175 	.word	0x20000175
 80011f4:	08008312 	.word	0x08008312

080011f8 <_GLOBAL__sub_I_grow_device_interface>:
    // 1 - не распознан тип пакета
    // 2 - неверный тип пакета (пакет не может прийти при контакте)
    // 3 - нереализованна обработка
    // 4 - ошибка пакета
    return err;
}
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	2400      	movs	r4, #0
 80011fc:	4d03      	ldr	r5, [pc, #12]	; (800120c <_GLOBAL__sub_I_grow_device_interface+0x14>)
 80011fe:	1928      	adds	r0, r5, r4
 8001200:	3408      	adds	r4, #8
 8001202:	f002 fefb 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 8001206:	2c78      	cmp	r4, #120	; 0x78
 8001208:	d1f9      	bne.n	80011fe <_GLOBAL__sub_I_grow_device_interface+0x6>
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	200000fc 	.word	0x200000fc

08001210 <_GLOBAL__sub_D_grow_device_interface>:
 8001210:	b508      	push	{r3, lr}
static std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> all_packets;
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <_GLOBAL__sub_D_grow_device_interface+0xc>)
 8001214:	f7ff ff32 	bl	800107c <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
}
 8001218:	bd08      	pop	{r3, pc}
 800121a:	bf00      	nop
 800121c:	200000fc 	.word	0x200000fc

08001220 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data>:
uint8_t Grow_device_interface::build_data_packet(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8001220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001224:	4617      	mov	r7, r2
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x130>)
 800122c:	4688      	mov	r8, r1
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001234:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001238:	f3bf 8f6f 	isb	sy
 800123c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8001240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
    if(grow_device.get_active() == 2) {
 8001248:	4608      	mov	r0, r1
 800124a:	f7ff fd33 	bl	8000cb4 <_ZNK11Grow_device10get_activeEv>
 800124e:	2802      	cmp	r0, #2
 8001250:	d009      	beq.n	8001266 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x46>
    int i = 0;
 8001252:	2400      	movs	r4, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x130>)
}
 800125a:	b2e0      	uxtb	r0, r4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	b00c      	add	sp, #48	; 0x30
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(!contact_data.get_signal_start_connect()) {
 8001266:	4638      	mov	r0, r7
 8001268:	f000 fa52 	bl	8001710 <_ZN17LoRa_contact_data24get_signal_start_connectEv>
 800126c:	4604      	mov	r4, r0
 800126e:	2800      	cmp	r0, #0
 8001270:	d1ef      	bne.n	8001252 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x32>
            contact_data.end_contact();
 8001272:	4638      	mov	r0, r7
 8001274:	f000 fe44 	bl	8001f00 <_ZN17LoRa_contact_data11end_contactEv>
            contact_data.clear_send_packet();
 8001278:	4638      	mov	r0, r7
 800127a:	f000 f9db 	bl	8001634 <_ZN17LoRa_contact_data17clear_send_packetEv>
            uint8_t amt = grow_device.get_count_component();
 800127e:	4640      	mov	r0, r8
 8001280:	f7ff fd7e 	bl	8000d80 <_ZNK11Grow_device19get_count_componentEv>
            uint8_t obj, id, com = 0x01; // com???
 8001284:	2301      	movs	r3, #1
            uint8_t amt = grow_device.get_count_component();
 8001286:	4681      	mov	r9, r0
            packet_device.set_setting(grow_device.get_setting());
 8001288:	4640      	mov	r0, r8
            uint8_t obj, id, com = 0x01; // com???
 800128a:	f88d 3015 	strb.w	r3, [sp, #21]
            packet_device.set_setting(grow_device.get_setting());
 800128e:	f7ff fd28 	bl	8000ce2 <_ZNK11Grow_device11get_settingEv>
 8001292:	4601      	mov	r1, r0
 8001294:	482f      	ldr	r0, [pc, #188]	; (8001354 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x134>)
 8001296:	f003 ffc2 	bl	800521e <_ZN13Packet_Device11set_settingEh>
                packet_device.set_dest_adr(packet, grow_device.get_address_control_module());
 800129a:	4d2e      	ldr	r5, [pc, #184]	; (8001354 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x134>)
            for(i = 0; i < amt; ++i) {
 800129c:	45a1      	cmp	r9, r4
 800129e:	b2e6      	uxtb	r6, r4
 80012a0:	dd4d      	ble.n	800133e <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x11e>
                LoRa_packet packet;
 80012a2:	a808      	add	r0, sp, #32
 80012a4:	f002 feaa 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
                packet_device.set_dest_adr(packet, grow_device.get_address_control_module());
 80012a8:	4640      	mov	r0, r8
 80012aa:	f7ff fd0f 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 80012ae:	a908      	add	r1, sp, #32
 80012b0:	4602      	mov	r2, r0
 80012b2:	4628      	mov	r0, r5
 80012b4:	f004 f85f 	bl	8005376 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
                packet_device.set_sour_adr(packet, contact_data.get_my_adr());
 80012b8:	4638      	mov	r0, r7
 80012ba:	f000 f96e 	bl	800159a <_ZNK17LoRa_contact_data10get_my_adrEv>
 80012be:	a908      	add	r1, sp, #32
 80012c0:	4602      	mov	r2, r0
 80012c2:	4628      	mov	r0, r5
 80012c4:	f004 f88a 	bl	80053dc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
                err = grow_device.get_type(i, obj);
 80012c8:	4631      	mov	r1, r6
 80012ca:	4640      	mov	r0, r8
 80012cc:	f10d 0213 	add.w	r2, sp, #19
 80012d0:	f7ff fd0a 	bl	8000ce8 <_ZNK11Grow_device8get_typeEhRh>
                if(err) break;
 80012d4:	bb80      	cbnz	r0, 8001338 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x118>
                err = grow_device.get_id(i, id);
 80012d6:	4631      	mov	r1, r6
 80012d8:	4640      	mov	r0, r8
 80012da:	aa05      	add	r2, sp, #20
 80012dc:	f7ff fd16 	bl	8000d0c <_ZNK11Grow_device6get_idEhRh>
                if(err) break;
 80012e0:	bb50      	cbnz	r0, 8001338 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x118>
                err = grow_device.get_value(i, value);
 80012e2:	f10d 0a16 	add.w	sl, sp, #22
 80012e6:	4631      	mov	r1, r6
 80012e8:	4652      	mov	r2, sl
 80012ea:	4640      	mov	r0, r8
 80012ec:	f7ff fd36 	bl	8000d5c <_ZN11Grow_device9get_valueEhRt>
                if(err) break;
 80012f0:	4606      	mov	r6, r0
 80012f2:	bb08      	cbnz	r0, 8001338 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x118>
                packet_device.set_packet_type(packet, Packet_Type::DEVICE);
 80012f4:	2202      	movs	r2, #2
 80012f6:	a908      	add	r1, sp, #32
 80012f8:	4628      	mov	r0, r5
 80012fa:	f004 f88e 	bl	800541a <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
                err = packet_device.set_packet_data(packet, &obj, &id, &com, (uint8_t*)&value, nullptr);
 80012fe:	f10d 0315 	add.w	r3, sp, #21
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	4628      	mov	r0, r5
 8001306:	e9cd a601 	strd	sl, r6, [sp, #4]
 800130a:	ab05      	add	r3, sp, #20
 800130c:	f10d 0213 	add.w	r2, sp, #19
 8001310:	a908      	add	r1, sp, #32
 8001312:	f004 fa43 	bl	800579c <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_>
                if(err) break;
 8001316:	b978      	cbnz	r0, 8001338 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x118>
                contact_data.add_packet(std::move(packet));
 8001318:	a908      	add	r1, sp, #32
 800131a:	a80a      	add	r0, sp, #40	; 0x28
 800131c:	f002 fee9 	bl	80040f2 <_ZN11LoRa_packetC1EOS_>
 8001320:	a90a      	add	r1, sp, #40	; 0x28
 8001322:	4638      	mov	r0, r7
 8001324:	f000 f94e 	bl	80015c4 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>
 8001328:	a80a      	add	r0, sp, #40	; 0x28
 800132a:	f002 fe6f 	bl	800400c <_ZN11LoRa_packetD1Ev>
                LoRa_packet packet;
 800132e:	a808      	add	r0, sp, #32
 8001330:	f002 fe6c 	bl	800400c <_ZN11LoRa_packetD1Ev>
            for(i = 0; i < amt; ++i) {
 8001334:	3401      	adds	r4, #1
 8001336:	e7b1      	b.n	800129c <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x7c>
                LoRa_packet packet;
 8001338:	a808      	add	r0, sp, #32
 800133a:	f002 fe67 	bl	800400c <_ZN11LoRa_packetD1Ev>
            contact_data.wait_recipient(grow_device.get_address_control_module());
 800133e:	4640      	mov	r0, r8
 8001340:	f7ff fcc4 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 8001344:	4601      	mov	r1, r0
 8001346:	900a      	str	r0, [sp, #40]	; 0x28
 8001348:	4638      	mov	r0, r7
 800134a:	f000 fd19 	bl	8001d80 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 800134e:	e781      	b.n	8001254 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data+0x34>
 8001350:	e000e100 	.word	0xe000e100
 8001354:	200023c4 	.word	0x200023c4

08001358 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet>:
uint8_t Grow_device_interface::system_package_handler(Grow_device &grow_device, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800135c:	460c      	mov	r4, r1
 800135e:	4619      	mov	r1, r3
    uint8_t com = 0;
 8001360:	2300      	movs	r3, #0
uint8_t Grow_device_interface::system_package_handler(Grow_device &grow_device, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001362:	b088      	sub	sp, #32
    uint8_t com = 0;
 8001364:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t len = 0;
 8001368:	f88d 300f 	strb.w	r3, [sp, #15]
    err = packet_system.get_packet_data(packet, &com, data, &len);
 800136c:	f10d 030f 	add.w	r3, sp, #15
 8001370:	9300      	str	r3, [sp, #0]
uint8_t Grow_device_interface::system_package_handler(Grow_device &grow_device, LoRa_contact_data& contact_data, LoRa_packet& packet) {
 8001372:	4607      	mov	r7, r0
 8001374:	4615      	mov	r5, r2
    err = packet_system.get_packet_data(packet, &com, data, &len);
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0xa4>)
 8001378:	4821      	ldr	r0, [pc, #132]	; (8001400 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0xa8>)
 800137a:	f10d 020e 	add.w	r2, sp, #14
 800137e:	f004 faef 	bl	8005960 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>
 8001382:	4606      	mov	r6, r0
    switch(com) {
 8001384:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001388:	2808      	cmp	r0, #8
 800138a:	d833      	bhi.n	80013f4 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x9c>
 800138c:	e8df f000 	tbb	[pc, r0]
 8001390:	05093434 	.word	0x05093434
 8001394:	05050605 	.word	0x05050605
 8001398:	05          	.byte	0x05
 8001399:	00          	.byte	0x00
 800139a:	2003      	movs	r0, #3
}
 800139c:	b008      	add	sp, #32
 800139e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(len != 2) {
 80013a2:	f89d 800f 	ldrb.w	r8, [sp, #15]
 80013a6:	f1b8 0f02 	cmp.w	r8, #2
 80013aa:	d121      	bne.n	80013f0 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x98>
        uint16_t channel = data[0];
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0xa4>)
        contact_data.set_channel(channel);
 80013ae:	4628      	mov	r0, r5
        channel = (channel << 8) | data[1];
 80013b0:	7819      	ldrb	r1, [r3, #0]
 80013b2:	785b      	ldrb	r3, [r3, #1]
        contact_data.set_channel(channel);
 80013b4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80013b8:	f000 f8fa 	bl	80015b0 <_ZN17LoRa_contact_data11set_channelEt>
        grow_device.set_active(2);
 80013bc:	4641      	mov	r1, r8
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fc73 	bl	8000caa <_ZN11Grow_device10set_activeEh>
        build_data_packet(grow_device, contact_data);
 80013c4:	462a      	mov	r2, r5
 80013c6:	4621      	mov	r1, r4
 80013c8:	4638      	mov	r0, r7
 80013ca:	f7ff ff29 	bl	8001220 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data>
        grow_device_interface.save_data(grow_device, contact_data, save_adr, save_channel);
 80013ce:	ab05      	add	r3, sp, #20
 80013d0:	462a      	mov	r2, r5
 80013d2:	4621      	mov	r1, r4
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0xac>)
 80013d8:	ab04      	add	r3, sp, #16
 80013da:	f7ff fd9c 	bl	8000f16 <_ZN21Grow_device_interface9save_dataERK11Grow_deviceRK17LoRa_contact_dataRmS6_>
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 80013de:	9b04      	ldr	r3, [sp, #16]
        Write_to_flash(control_module_id_and_channel);
 80013e0:	a806      	add	r0, sp, #24
        uint32_t control_module_id_and_channel[BUFFSIZE] = {save_adr, save_channel};
 80013e2:	9306      	str	r3, [sp, #24]
 80013e4:	9b05      	ldr	r3, [sp, #20]
 80013e6:	9307      	str	r3, [sp, #28]
        Write_to_flash(control_module_id_and_channel);
 80013e8:	f7ff fc08 	bl	8000bfc <Write_to_flash>
    err = packet_system.get_packet_data(packet, &com, data, &len);
 80013ec:	4630      	mov	r0, r6
        break;
 80013ee:	e7d5      	b.n	800139c <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x44>
            err = 4;
 80013f0:	2004      	movs	r0, #4
 80013f2:	e7d3      	b.n	800139c <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x44>
        err = 1;
 80013f4:	2001      	movs	r0, #1
        break;
 80013f6:	e7d1      	b.n	800139c <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x44>
    case 0x01: err = 2; break;
 80013f8:	2002      	movs	r0, #2
 80013fa:	e7cf      	b.n	800139c <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet+0x44>
 80013fc:	20000175 	.word	0x20000175
 8001400:	20002404 	.word	0x20002404
 8001404:	200001a7 	.word	0x200001a7

08001408 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data>:
uint8_t Grow_device_interface::read_received_data_packets(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8001408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140c:	4680      	mov	r8, r0
 800140e:	b09f      	sub	sp, #124	; 0x7c
    if(grow_device.get_active() == 0)
 8001410:	4608      	mov	r0, r1
uint8_t Grow_device_interface::read_received_data_packets(Grow_device &grow_device, LoRa_contact_data& contact_data) {
 8001412:	460c      	mov	r4, r1
 8001414:	4615      	mov	r5, r2
    if(grow_device.get_active() == 0)
 8001416:	f7ff fc4d 	bl	8000cb4 <_ZNK11Grow_device10get_activeEv>
 800141a:	2800      	cmp	r0, #0
 800141c:	d03d      	beq.n	800149a <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x92>
    all_packets = contact_data.get_all_packet(all_packets_len);
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x9c>)
 8001420:	4629      	mov	r1, r5
 8001422:	4668      	mov	r0, sp
 8001424:	f000 f918 	bl	8001658 <_ZN17LoRa_contact_data14get_all_packetERh>
 8001428:	4669      	mov	r1, sp
 800142a:	481f      	ldr	r0, [pc, #124]	; (80014a8 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xa0>)
 800142c:	f7ff fe33 	bl	8001096 <_ZNSt5arrayI11LoRa_packetLj15EEaSEOS1_>
 8001430:	4668      	mov	r0, sp
 8001432:	f7ff fe23 	bl	800107c <_ZNSt5arrayI11LoRa_packetLj15EED1Ev>
    for(int i = 0; i < all_packets_len; ++i) {
 8001436:	2700      	movs	r7, #0
 8001438:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80014a4 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x9c>
 800143c:	f8df a068 	ldr.w	sl, [pc, #104]	; 80014a8 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xa0>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 8001440:	f8df b074 	ldr.w	fp, [pc, #116]	; 80014b8 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xb0>
    for(int i = 0; i < all_packets_len; ++i) {
 8001444:	f899 3000 	ldrb.w	r3, [r9]
 8001448:	42bb      	cmp	r3, r7
 800144a:	dd26      	ble.n	800149a <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x92>
        Packet_Type type_packet = packet_analyzer.get_packet_type(all_packets[i]);
 800144c:	eb0a 06c7 	add.w	r6, sl, r7, lsl #3
 8001450:	4631      	mov	r1, r6
 8001452:	4658      	mov	r0, fp
 8001454:	f003 ff6e 	bl	8005334 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
        switch (type_packet) {
 8001458:	b118      	cbz	r0, 8001462 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x5a>
 800145a:	2803      	cmp	r0, #3
 800145c:	d00f      	beq.n	800147e <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x76>
    for(int i = 0; i < all_packets_len; ++i) {
 800145e:	3701      	adds	r7, #1
 8001460:	e7f0      	b.n	8001444 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x3c>
            err = packet_connection.get_size_by_packet(all_packets[i], size);
 8001462:	4631      	mov	r1, r6
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xa4>)
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xa8>)
 8001468:	f004 f952 	bl	8005710 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 800146c:	2800      	cmp	r0, #0
 800146e:	d1f6      	bne.n	800145e <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x56>
            err = contact_package_handler(grow_device, contact_data, all_packets[i]);
 8001470:	4633      	mov	r3, r6
 8001472:	462a      	mov	r2, r5
 8001474:	4621      	mov	r1, r4
 8001476:	4640      	mov	r0, r8
 8001478:	f7ff fe9e 	bl	80011b8 <_ZN21Grow_device_interface23contact_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 800147c:	e7ef      	b.n	800145e <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x56>
            err = packet_system.get_size_by_packet(all_packets[i], size);
 800147e:	4631      	mov	r1, r6
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xa4>)
 8001482:	480c      	ldr	r0, [pc, #48]	; (80014b4 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0xac>)
 8001484:	f004 face 	bl	8005a24 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>
            if(err != 0)
 8001488:	2800      	cmp	r0, #0
 800148a:	d1e8      	bne.n	800145e <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x56>
            err = system_package_handler(grow_device, contact_data, all_packets[i]);
 800148c:	4633      	mov	r3, r6
 800148e:	462a      	mov	r2, r5
 8001490:	4621      	mov	r1, r4
 8001492:	4640      	mov	r0, r8
 8001494:	f7ff ff60 	bl	8001358 <_ZN21Grow_device_interface22system_package_handlerER11Grow_deviceR17LoRa_contact_dataR11LoRa_packet>
            if(err == 0) {
 8001498:	e7e1      	b.n	800145e <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data+0x56>
}
 800149a:	2000      	movs	r0, #0
 800149c:	b01f      	add	sp, #124	; 0x7c
 800149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014a2:	bf00      	nop
 80014a4:	20000174 	.word	0x20000174
 80014a8:	200000fc 	.word	0x200000fc
 80014ac:	200001a8 	.word	0x200001a8
 80014b0:	200023a4 	.word	0x200023a4
 80014b4:	20002404 	.word	0x20002404
 80014b8:	20002388 	.word	0x20002388

080014bc <_ZN21Grow_device_componentC1E11Type_deviceh>:
#include "../Grow_device_component/Grow_device_component.h"

Grow_device_component::Grow_device_component(Type_device type_device, uint8_t id) {
    type_device_ = type_device;
    id_ = id;
 80014bc:	7042      	strb	r2, [r0, #1]
    value_ = 0;
 80014be:	2200      	movs	r2, #0
    type_device_ = type_device;
 80014c0:	7001      	strb	r1, [r0, #0]
    value_ = 0;
 80014c2:	8042      	strh	r2, [r0, #2]
}
 80014c4:	4770      	bx	lr

080014c6 <_ZNK21Grow_device_component8get_typeEv>:

enum Type_device Grow_device_component::get_type() const {
    return type_device_;
}
 80014c6:	7800      	ldrb	r0, [r0, #0]
 80014c8:	4770      	bx	lr

080014ca <_ZNK21Grow_device_component6get_idEv>:
uint8_t Grow_device_component::get_id() const {
    return id_;
}
 80014ca:	7840      	ldrb	r0, [r0, #1]
 80014cc:	4770      	bx	lr

080014ce <_ZNK21Grow_device_component9get_valueEv>:
void Grow_device_component::set_id(uint8_t id) {
    id_ = id;
}
uint16_t Grow_device_component::get_value() const {
    return value_;
}
 80014ce:	8840      	ldrh	r0, [r0, #2]
 80014d0:	4770      	bx	lr

080014d2 <_ZN21Grow_device_component9set_valueEt>:
bool Grow_device_component::set_value(uint16_t value) {
    if(value_ == value)
 80014d2:	8843      	ldrh	r3, [r0, #2]
 80014d4:	428b      	cmp	r3, r1
        return false;
    value_ = value;
 80014d6:	bf1a      	itte	ne
 80014d8:	8041      	strhne	r1, [r0, #2]
    return true;
 80014da:	2001      	movne	r0, #1
        return false;
 80014dc:	2000      	moveq	r0, #0
}
 80014de:	4770      	bx	lr

080014e0 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>:
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	4604      	mov	r4, r0
 80014e4:	4605      	mov	r5, r0
 80014e6:	f100 0678 	add.w	r6, r0, #120	; 0x78
 80014ea:	4628      	mov	r0, r5
 80014ec:	3508      	adds	r5, #8
 80014ee:	f002 fd85 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80014f2:	42ae      	cmp	r6, r5
 80014f4:	d1f9      	bne.n	80014ea <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev+0xa>
 80014f6:	4620      	mov	r0, r4
 80014f8:	bd70      	pop	{r4, r5, r6, pc}

080014fa <_ZN17LoRa_contact_dataD1Ev>:
LoRa_contact_data::LoRa_contact_data(LoRa_address adr) {
    // (-) ----- добавить стандартный конструктор
    clear();
    set_my_adr(adr);
}
LoRa_contact_data::~LoRa_contact_data() {
 80014fa:	b570      	push	{r4, r5, r6, lr}
 80014fc:	4604      	mov	r4, r0
 80014fe:	f500 759a 	add.w	r5, r0, #308	; 0x134
 8001502:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
 8001506:	42ae      	cmp	r6, r5
 8001508:	d004      	beq.n	8001514 <_ZN17LoRa_contact_dataD1Ev+0x1a>
 800150a:	3d08      	subs	r5, #8
 800150c:	4628      	mov	r0, r5
 800150e:	f002 fd7d 	bl	800400c <_ZN11LoRa_packetD1Ev>
 8001512:	e7f8      	b.n	8001506 <_ZN17LoRa_contact_dataD1Ev+0xc>
 8001514:	f104 05ac 	add.w	r5, r4, #172	; 0xac
 8001518:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800151c:	42ae      	cmp	r6, r5
 800151e:	d004      	beq.n	800152a <_ZN17LoRa_contact_dataD1Ev+0x30>
 8001520:	3d08      	subs	r5, #8
 8001522:	4628      	mov	r0, r5
 8001524:	f002 fd72 	bl	800400c <_ZN11LoRa_packetD1Ev>
 8001528:	e7f8      	b.n	800151c <_ZN17LoRa_contact_dataD1Ev+0x22>
 800152a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800152e:	f002 fd6d 	bl	800400c <_ZN11LoRa_packetD1Ev>
 8001532:	f104 0020 	add.w	r0, r4, #32
 8001536:	f002 fd69 	bl	800400c <_ZN11LoRa_packetD1Ev>

}
 800153a:	4620      	mov	r0, r4
 800153c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001540 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>:
        return false;
    }
    return true;
}
#else
bool LoRa_contact_data::init_lora_module(SPI_HandleTypeDef *spi) {
 8001540:	b510      	push	{r4, lr}
 8001542:	4604      	mov	r4, r0
	LoRa.init(spi);
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef+0x14>)
 8001546:	f001 fe5d 	bl	8003204 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
	lora_init_ = true;
 800154a:	2301      	movs	r3, #1
	return false;
}
 800154c:	2000      	movs	r0, #0
	lora_init_ = true;
 800154e:	7023      	strb	r3, [r4, #0]
}
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	20000360 	.word	0x20000360

08001558 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>:
#endif
// Функция запуска работы системы и LoRa-модуля
uint8_t LoRa_contact_data::begin_lora_module(ulong frequency, bool paboost,
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001558:	b530      	push	{r4, r5, lr}
 800155a:	4604      	mov	r4, r0
 800155c:	4618      	mov	r0, r3
#if defined ( ESP32 )
    uint8_t err = lora_.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
#else
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 800155e:	2300      	movs	r3, #0
          uint8_t signal_power, uint8_t SF, ulong SBW, uint8_t sync_word) {
 8001560:	b089      	sub	sp, #36	; 0x24
    uint8_t err = LoRa.begin(frequency, paboost, signal_power, SF, SBW, sync_word);
 8001562:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9506      	str	r5, [sp, #24]
 800156a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800156c:	460a      	mov	r2, r1
 800156e:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8001572:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8001576:	e9cd 0501 	strd	r0, r5, [sp, #4]
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x34>)
 800157c:	f002 f8f0 	bl	8003760 <_ZN10LoRa_class5beginEybhhyh>
#endif
    if(err == 0) {
 8001580:	b908      	cbnz	r0, 8001586 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh+0x2e>
        lora_begin_ = true;
 8001582:	2301      	movs	r3, #1
 8001584:	7063      	strb	r3, [r4, #1]
    }
    return err;
}
 8001586:	b009      	add	sp, #36	; 0x24
 8001588:	bd30      	pop	{r4, r5, pc}
 800158a:	bf00      	nop
 800158c:	20000360 	.word	0x20000360

08001590 <_ZN17LoRa_contact_data10set_my_adrE12LoRa_address>:

// Установка адреса этого модуля
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
    // (-) ----- проверка на ошибку
    my_adr_ = adr;
 8001590:	6041      	str	r1, [r0, #4]
    return false;
}
 8001592:	2000      	movs	r0, #0
bool LoRa_contact_data::set_my_adr(LoRa_address adr) {
 8001594:	b082      	sub	sp, #8
}
 8001596:	b002      	add	sp, #8
 8001598:	4770      	bx	lr

0800159a <_ZNK17LoRa_contact_data10get_my_adrEv>:
// Получаение адреса этого модуля
LoRa_address LoRa_contact_data::get_my_adr() const {
    return my_adr_;
 800159a:	6843      	ldr	r3, [r0, #4]
 800159c:	2000      	movs	r0, #0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f362 000f 	bfi	r0, r2, #0, #16
 80015a4:	0c1b      	lsrs	r3, r3, #16
LoRa_address LoRa_contact_data::get_my_adr() const {
 80015a6:	b082      	sub	sp, #8
    return my_adr_;
 80015a8:	f363 401f 	bfi	r0, r3, #16, #16
}
 80015ac:	b002      	add	sp, #8
 80015ae:	4770      	bx	lr

080015b0 <_ZN17LoRa_contact_data11set_channelEt>:
}

// Установка канала связи
bool LoRa_contact_data::set_channel(uint16_t channel) {
    // (-) ----- скорректировать проверку канала и добавить настройку LoRa-модуля в зависимости от канала
    if((channel < 1) || (channel > 240))
 80015b0:	1e4b      	subs	r3, r1, #1
 80015b2:	2bef      	cmp	r3, #239	; 0xef
        return true;
    channel_ = channel;
 80015b4:	bf9a      	itte	ls
 80015b6:	8041      	strhls	r1, [r0, #2]
    return false;
 80015b8:	2000      	movls	r0, #0
        return true;
 80015ba:	2001      	movhi	r0, #1
}
 80015bc:	4770      	bx	lr

080015be <_ZNK17LoRa_contact_data11get_channelEv>:
// Получаение канала связи
uint16_t LoRa_contact_data::get_channel() const {
    return channel_;
}
 80015be:	8840      	ldrh	r0, [r0, #2]
 80015c0:	4770      	bx	lr
	...

080015c4 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet>:

bool LoRa_contact_data::add_packet(LoRa_packet packet) {

    // if((!_init) || (packet.len < MINIMAL_PACKET_SIZE) || (send_packet_.size() >= 250)) // проверка на инициализацию только в 1 сторону (?) -----

    if(init_) {
 80015c4:	f890 3138 	ldrb.w	r3, [r0, #312]	; 0x138
bool LoRa_contact_data::add_packet(LoRa_packet packet) {
 80015c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
    if(init_) {
 80015ce:	bb13      	cbnz	r3, 8001616 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x52>
        // if((packet_analyzer.get_dest_adr_group(packet) != connect_adr_.group) ||
        //    (packet_analyzer.get_dest_adr_branch(packet) != connect_adr_.branch))
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
            return true;
    }
    packet_analyzer.set_packet_number(packet, num_end_packet_++);
 80015d0:	8a22      	ldrh	r2, [r4, #16]
 80015d2:	4629      	mov	r1, r5
 80015d4:	1c53      	adds	r3, r2, #1
 80015d6:	8223      	strh	r3, [r4, #16]
 80015d8:	4815      	ldr	r0, [pc, #84]	; (8001630 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 80015da:	f003 ff28 	bl	800542e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
#if defined ( USE_VECTOR )
    send_packet_.push_back(std::move(packet));
    send_flag_.push_back(true);
    amt_packet_ = send_packet_.size();
#else
    if(send_packet_len == CONTACT_DATA_MAX_PACKET ||
 80015de:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
      { return const_cast<_Tp&>(__t[__n]); }
 80015e2:	f104 0034 	add.w	r0, r4, #52	; 0x34
        send_flag_len == CONTACT_DATA_MAX_PACKET) {
        // (-) ----- (!) ----- ERRROR
    }
    send_packet_[send_packet_len++] = std::move(packet);
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	f884 2134 	strb.w	r2, [r4, #308]	; 0x134
 80015ec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80015f0:	4629      	mov	r1, r5
 80015f2:	f002 fd6f 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
    send_flag_[send_flag_len++] = true;
 80015f6:	f894 3136 	ldrb.w	r3, [r4, #310]	; 0x136
    amt_packet_ = send_packet_len;
#endif
    return false;
 80015fa:	2000      	movs	r0, #0
    send_flag_[send_flag_len++] = true;
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	f884 2136 	strb.w	r2, [r4, #310]	; 0x136
 8001602:	2201      	movs	r2, #1
 8001604:	4423      	add	r3, r4
 8001606:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    amt_packet_ = send_packet_len;
 800160a:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 800160e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8001612:	b003      	add	sp, #12
 8001614:	bd30      	pop	{r4, r5, pc}
        if(packet_analyzer.get_dest_adr(packet)!= connect_adr_)
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x6c>)
 8001618:	f003 fe60 	bl	80052dc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 800161c:	f104 0108 	add.w	r1, r4, #8
 8001620:	9001      	str	r0, [sp, #4]
 8001622:	a801      	add	r0, sp, #4
 8001624:	f003 fe2d 	bl	8005282 <_ZneRK12LoRa_addressS1_>
 8001628:	2800      	cmp	r0, #0
 800162a:	d0d1      	beq.n	80015d0 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0xc>
 800162c:	e7f1      	b.n	8001612 <_ZN17LoRa_contact_data10add_packetE11LoRa_packet+0x4e>
 800162e:	bf00      	nop
 8001630:	20002388 	.word	0x20002388

08001634 <_ZN17LoRa_contact_data17clear_send_packetEv>:
    if(send_packet_.size() == 0)
        return true;
    num_end_packet_ -= send_packet_.size();
    send_packet_.clear();
#else
    if(send_packet_len == 0)
 8001634:	f890 2134 	ldrb.w	r2, [r0, #308]	; 0x134
 8001638:	b14a      	cbz	r2, 800164e <_ZN17LoRa_contact_data17clear_send_packetEv+0x1a>
        return true;
    num_end_packet_ -= send_packet_len;
 800163a:	8a03      	ldrh	r3, [r0, #16]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	8203      	strh	r3, [r0, #16]
    send_packet_len = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
    send_flag_len = 0;
 8001646:	f880 3136 	strb.w	r3, [r0, #310]	; 0x136
#endif
    return false;
 800164a:	4618      	mov	r0, r3
 800164c:	4770      	bx	lr
        return true;
 800164e:	2001      	movs	r0, #1
}
 8001650:	4770      	bx	lr

08001652 <_ZN17LoRa_contact_data17get_state_contactEv>:
}

// Получить текущую стадию контакта/трансляции
int8_t LoRa_contact_data::get_state_contact() {
    return (int8_t) current_stage_.stade_communication;
}
 8001652:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8001656:	4770      	bx	lr

08001658 <_ZN17LoRa_contact_data14get_all_packetERh>:
}


// Выдаёт сигнал, если текущая стадия SC_COMPLETE 
bool LoRa_contact_data::get_signal_complete() {
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001658:	7d0b      	ldrb	r3, [r1, #20]
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 800165a:	b570      	push	{r4, r5, r6, lr}
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 800165c:	2b04      	cmp	r3, #4
std::array<LoRa_packet, CONTACT_DATA_MAX_PACKET> LoRa_contact_data::get_all_packet(uint8_t& count) {
 800165e:	4604      	mov	r4, r0
    if((!get_signal_complete()) && (current_stage_.stade_communication != SC_PACKET_ACCEPTED))
 8001660:	d03d      	beq.n	80016de <_ZN17LoRa_contact_data14get_all_packetERh+0x86>
 8001662:	2b07      	cmp	r3, #7
 8001664:	d04d      	beq.n	8001702 <_ZN17LoRa_contact_data14get_all_packetERh+0xaa>
        return {};
 8001666:	f002 fcc9 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 800166a:	f104 0008 	add.w	r0, r4, #8
 800166e:	f002 fcc5 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 8001672:	f104 0010 	add.w	r0, r4, #16
 8001676:	f002 fcc1 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 800167a:	f104 0018 	add.w	r0, r4, #24
 800167e:	f002 fcbd 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 8001682:	f104 0020 	add.w	r0, r4, #32
 8001686:	f002 fcb9 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 800168a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800168e:	f002 fcb5 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 8001692:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001696:	f002 fcb1 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 800169a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800169e:	f002 fcad 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016a2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80016a6:	f002 fca9 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016aa:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80016ae:	f002 fca5 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80016b6:	f002 fca1 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80016be:	f002 fc9d 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016c2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80016c6:	f002 fc99 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016ca:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80016ce:	f002 fc95 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 80016d2:	f104 0070 	add.w	r0, r4, #112	; 0x70
 80016d6:	f002 fc91 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
}
 80016da:	4620      	mov	r0, r4
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
        current_stage_.stade_communication = SC_DOWNTIME;
 80016de:	2300      	movs	r3, #0
    reciev_packet_len = 0;
 80016e0:	2600      	movs	r6, #0
 80016e2:	750b      	strb	r3, [r1, #20]
    count = reciev_packet_len;
 80016e4:	f891 3135 	ldrb.w	r3, [r1, #309]	; 0x135
    struct array
 80016e8:	f101 05bc 	add.w	r5, r1, #188	; 0xbc
 80016ec:	7013      	strb	r3, [r2, #0]
    reciev_packet_len = 0;
 80016ee:	f881 6135 	strb.w	r6, [r1, #309]	; 0x135
 80016f2:	19a9      	adds	r1, r5, r6
 80016f4:	19a0      	adds	r0, r4, r6
 80016f6:	3608      	adds	r6, #8
 80016f8:	f002 fcfb 	bl	80040f2 <_ZN11LoRa_packetC1EOS_>
 80016fc:	2e78      	cmp	r6, #120	; 0x78
 80016fe:	d1f8      	bne.n	80016f2 <_ZN17LoRa_contact_data14get_all_packetERh+0x9a>
 8001700:	e7eb      	b.n	80016da <_ZN17LoRa_contact_data14get_all_packetERh+0x82>
        current_stage_.stade_communication = SC_WAITING;
 8001702:	2306      	movs	r3, #6
 8001704:	e7ec      	b.n	80016e0 <_ZN17LoRa_contact_data14get_all_packetERh+0x88>

08001706 <_ZN17LoRa_contact_data19get_signal_completeEv>:
    return (current_stage_.stade_communication == SC_COMPLETE);
 8001706:	7d00      	ldrb	r0, [r0, #20]
}
 8001708:	1f03      	subs	r3, r0, #4
 800170a:	4258      	negs	r0, r3
 800170c:	4158      	adcs	r0, r3
 800170e:	4770      	bx	lr

08001710 <_ZN17LoRa_contact_data24get_signal_start_connectEv>:

bool LoRa_contact_data::get_signal_start_connect() {
    return start_connect_;
}
 8001710:	f890 0137 	ldrb.w	r0, [r0, #311]	; 0x137
 8001714:	4770      	bx	lr

08001716 <_ZN17LoRa_contact_data5clearEv>:
#if defined ( USE_VECTOR )
    send_packet_.clear();
    send_flag_.clear();
    reciev_packet_.clear();
#else
    send_packet_len = 0;
 8001716:	2200      	movs	r2, #0
 8001718:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
    send_flag_len = 0;
 800171c:	f880 2136 	strb.w	r2, [r0, #310]	; 0x136
    reciev_packet_len = 0;
#endif
    current_stage_.type_communication = TC_INITIATOR;
    current_stage_.stade_communication = SC_DOWNTIME;
 8001720:	6142      	str	r2, [r0, #20]
    current_stage_.type_communication = TC_INITIATOR;
 8001722:	74c2      	strb	r2, [r0, #19]
    current_stage_.connection = C_EXPECTATION;
    current_stage_.exchange = E_BOARDCAST;
    current_stage_.disconnect = D_WAITING_CONNECTION_BREAK;
    past_stage_ = current_stage_;
 8001724:	4602      	mov	r2, r0
void LoRa_contact_data::clear() {
 8001726:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 8001728:	f852 0f13 	ldr.w	r0, [r2, #19]!
 800172c:	6198      	str	r0, [r3, #24]
 800172e:	7912      	ldrb	r2, [r2, #4]
 8001730:	771a      	strb	r2, [r3, #28]
}
 8001732:	4770      	bx	lr

08001734 <_ZN17LoRa_contact_dataC1Ev>:
LoRa_contact_data::LoRa_contact_data() {
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	2500      	movs	r5, #0
 8001738:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800173c:	4604      	mov	r4, r0
 800173e:	e9c0 5600 	strd	r5, r6, [r0]
 8001742:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001746:	f240 11ff 	movw	r1, #511	; 0x1ff
 800174a:	3008      	adds	r0, #8
 800174c:	f003 fd84 	bl	8005258 <_ZN12LoRa_addressC1Ett>
 8001750:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001758:	f104 000c 	add.w	r0, r4, #12
 800175c:	f003 fd7c 	bl	8005258 <_ZN12LoRa_addressC1Ett>
 8001760:	8225      	strh	r5, [r4, #16]
 8001762:	7765      	strb	r5, [r4, #29]
 8001764:	f104 0020 	add.w	r0, r4, #32
 8001768:	f002 fc48 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 800176c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001770:	f002 fc44 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
 8001774:	8625      	strh	r5, [r4, #48]	; 0x30
 8001776:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800177a:	f7ff feb1 	bl	80014e0 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
 800177e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8001782:	f7ff fead 	bl	80014e0 <_ZNSt5arrayI11LoRa_packetLj15EEC1Ev>
    clear();
 8001786:	4620      	mov	r0, r4
LoRa_contact_data::LoRa_contact_data() {
 8001788:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800178c:	f8a4 5138 	strh.w	r5, [r4, #312]	; 0x138
 8001790:	f884 513a 	strb.w	r5, [r4, #314]	; 0x13a
    clear();
 8001794:	f7ff ffbf 	bl	8001716 <_ZN17LoRa_contact_data5clearEv>
    time_constraints_.I_connect  = 1000;    // Ответа на запрос об установке соединения
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 800179c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    time_constraints_.I_wait_connect = -1;  // Отложенного соединения
 80017a0:	e9c4 3651 	strd	r3, r6, [r4, #324]	; 0x144
    time_constraints_.I_num_pack = 1000;    // Ответа с номерами принятых пакетов
 80017a4:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    time_constraints_.R_data_pack  = 3500;  // Пакетов данных (после отправляется пакет с количеством пришедших пакетов)
 80017a8:	f640 53ac 	movw	r3, #3500	; 0xdac
 80017ac:	e9c4 2355 	strd	r2, r3, [r4, #340]	; 0x154
    time_constraints_.R_correct_pack = 3500;// Результатов подтверждения
 80017b0:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
    time_constraints_.R_disconnect = 1500;  // Разрыва соединения
 80017b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80017b8:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    packet_constraints_.I_connect  =  5;     // Запрос на установку соединения
 80017bc:	2305      	movs	r3, #5
 80017be:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
    packet_constraints_.I_amt_pack = 10;     // Запрос о количестве принятых пакетов
 80017c2:	f640 730a 	movw	r3, #3850	; 0xf0a
 80017c6:	f8a4 3166 	strh.w	r3, [r4, #358]	; 0x166
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 80017ca:	f240 3303 	movw	r3, #771	; 0x303
}
 80017ce:	4620      	mov	r0, r4
    packet_constraints_.R_wait_connect = 3;  // Сбросов ожидания (отложенного соединения)
 80017d0:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
}
 80017d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>:

// --- функции создания пакетов ---


// создание основы пакета
void LoRa_contact_data::create_packet(uint8_t size, Packet_Type type_packet) {
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	4604      	mov	r4, r0
 80017dc:	4617      	mov	r7, r2
    // last_send_packet_.creat_packet(size, type_packet);
    // last_send_packet_.packet->set_dest_adr(connect_adr_);
    // last_send_packet_.packet->set_sour_adr(my_adr_);
    // last_send_packet_.packet->set_packet_type(type_packet);
    // last_send_packet_.packet->set_packet_number(num_end_packet_++);
    last_send_packet_.clear_packet();
 80017de:	f100 0528 	add.w	r5, r0, #40	; 0x28
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 80017e2:	4e0e      	ldr	r6, [pc, #56]	; (800181c <_ZN17LoRa_contact_data13create_packetEh11Packet_Type+0x44>)
    last_send_packet_.clear_packet();
 80017e4:	4628      	mov	r0, r5
 80017e6:	f002 fc3d 	bl	8004064 <_ZN11LoRa_packet12clear_packetEv>
    packet_analyzer.set_dest_adr(last_send_packet_, connect_adr_);
 80017ea:	4629      	mov	r1, r5
 80017ec:	68a2      	ldr	r2, [r4, #8]
 80017ee:	4630      	mov	r0, r6
 80017f0:	f003 fdc1 	bl	8005376 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_sour_adr(last_send_packet_, my_adr_);
 80017f4:	4629      	mov	r1, r5
 80017f6:	6862      	ldr	r2, [r4, #4]
 80017f8:	4630      	mov	r0, r6
 80017fa:	f003 fdef 	bl	80053dc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>
    packet_analyzer.set_packet_type(last_send_packet_, type_packet);
 80017fe:	463a      	mov	r2, r7
 8001800:	4629      	mov	r1, r5
 8001802:	4630      	mov	r0, r6
 8001804:	f003 fe09 	bl	800541a <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001808:	8a22      	ldrh	r2, [r4, #16]
 800180a:	4629      	mov	r1, r5
 800180c:	1c53      	adds	r3, r2, #1
 800180e:	4630      	mov	r0, r6
 8001810:	8223      	strh	r3, [r4, #16]
}
 8001812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    packet_analyzer.set_packet_number(last_send_packet_, (num_end_packet_++));
 8001816:	f003 be0a 	b.w	800542e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>
 800181a:	bf00      	nop
 800181c:	20002388 	.word	0x20002388

08001820 <_ZN17LoRa_contact_data21create_connect_packetEhb>:
// создание пакета установки соединения (num = count_pack) или ответа на
//   запрос соединения (3 реакции +, +num и -wait) (и при замене инициативы)
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
    bool err = false;
    uint8_t size = 11;
    uint8_t com = 0x01;
 8001820:	2301      	movs	r3, #1
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001826:	b085      	sub	sp, #20
    uint8_t com = 0x01;
 8001828:	f88d 300a 	strb.w	r3, [sp, #10]
    uint8_t len;
    uint8_t data[2] = {0, 0};
 800182c:	2300      	movs	r3, #0
 800182e:	f8ad 300c 	strh.w	r3, [sp, #12]
    // switch (current_stage_.type_communication) {
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 8001832:	7f43      	ldrb	r3, [r0, #29]
bool LoRa_contact_data::create_connect_packet(uint8_t amt_packet, bool swap_type) {
 8001834:	4606      	mov	r6, r0
 8001836:	460d      	mov	r5, r1
 8001838:	4614      	mov	r4, r2
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 800183a:	b143      	cbz	r3, 800184e <_ZN17LoRa_contact_data21create_connect_packetEhb+0x2e>
 800183c:	7e07      	ldrb	r7, [r0, #24]
 800183e:	b147      	cbz	r7, 8001852 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x32>
 8001840:	2f01      	cmp	r7, #1
 8001842:	d01e      	beq.n	8001882 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x62>
 8001844:	2401      	movs	r4, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001846:	4620      	mov	r0, r4
 8001848:	b005      	add	sp, #20
 800184a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((use_past_stage)?(past_stage_.type_communication):(current_stage_.type_communication)) {
 800184e:	7cc7      	ldrb	r7, [r0, #19]
 8001850:	e7f5      	b.n	800183e <_ZN17LoRa_contact_data21create_connect_packetEhb+0x1e>
        create_packet(size, Packet_Type::CONNECTION);
 8001852:	463a      	mov	r2, r7
 8001854:	210b      	movs	r1, #11
 8001856:	4630      	mov	r0, r6
        com = 0x00;
 8001858:	f88d 700a 	strb.w	r7, [sp, #10]
        len = 0;
 800185c:	f88d 700b 	strb.w	r7, [sp, #11]
        data[0] = amt_packet;
 8001860:	f88d 500c 	strb.w	r5, [sp, #12]
        create_packet(size, Packet_Type::CONNECTION);
 8001864:	f7ff ffb8 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001868:	f10d 030b 	add.w	r3, sp, #11
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4828      	ldr	r0, [pc, #160]	; (8001910 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf0>)
 8001870:	ab03      	add	r3, sp, #12
 8001872:	f10d 020a 	add.w	r2, sp, #10
 8001876:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800187a:	f003 fea7 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 800187e:	463c      	mov	r4, r7
        break;
 8001880:	e7e1      	b.n	8001846 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x26>
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 8001882:	4824      	ldr	r0, [pc, #144]	; (8001914 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf4>)
 8001884:	f106 0120 	add.w	r1, r6, #32
 8001888:	f003 fd46 	bl	8005318 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
        if(amt_packet != 255) {
 800188c:	2dff      	cmp	r5, #255	; 0xff
        connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_);
 800188e:	60b0      	str	r0, [r6, #8]
        if(amt_packet != 255) {
 8001890:	f106 0828 	add.w	r8, r6, #40	; 0x28
                com = 0x01;
 8001894:	f88d 700a 	strb.w	r7, [sp, #10]
 8001898:	f10d 090b 	add.w	r9, sp, #11
        if(amt_packet != 255) {
 800189c:	d020      	beq.n	80018e0 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xc0>
            if(!swap_type) {
 800189e:	b994      	cbnz	r4, 80018c6 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xa6>
                create_packet(size, Packet_Type::CONNECTION);
 80018a0:	4622      	mov	r2, r4
 80018a2:	210b      	movs	r1, #11
                data[1] = 0;
 80018a4:	f88d 400d 	strb.w	r4, [sp, #13]
                len = 1;
 80018a8:	f88d 700b 	strb.w	r7, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 80018ac:	4630      	mov	r0, r6
 80018ae:	f7ff ff93 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
                packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 80018b2:	4641      	mov	r1, r8
 80018b4:	f8cd 9000 	str.w	r9, [sp]
 80018b8:	ab03      	add	r3, sp, #12
 80018ba:	f10d 020a 	add.w	r2, sp, #10
 80018be:	4814      	ldr	r0, [pc, #80]	; (8001910 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf0>)
 80018c0:	f003 fe84 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
 80018c4:	e7bf      	b.n	8001846 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x26>
                data[1] = send_packet_len; // amt_packet; (!!!!!) (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) -----
 80018c6:	f896 3134 	ldrb.w	r3, [r6, #308]	; 0x134
                data[0] = 0;
 80018ca:	2400      	movs	r4, #0
                data[1] = send_packet_len; // amt_packet; (!!!!!) (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) ----- (!) -----
 80018cc:	f88d 300d 	strb.w	r3, [sp, #13]
                len = 2;
 80018d0:	2302      	movs	r3, #2
                create_packet(size, Packet_Type::CONNECTION);
 80018d2:	4622      	mov	r2, r4
 80018d4:	210c      	movs	r1, #12
                data[0] = 0;
 80018d6:	f88d 400c 	strb.w	r4, [sp, #12]
                len = 2;
 80018da:	f88d 300b 	strb.w	r3, [sp, #11]
                create_packet(size, Packet_Type::CONNECTION);
 80018de:	e7e5      	b.n	80018ac <_ZN17LoRa_contact_data21create_connect_packetEhb+0x8c>
            len = 0;
 80018e0:	2500      	movs	r5, #0
            size = 11 + (uint8_t)swap_type;
 80018e2:	f104 010b 	add.w	r1, r4, #11
            create_packet(size, Packet_Type::CONNECTION);
 80018e6:	462a      	mov	r2, r5
 80018e8:	4630      	mov	r0, r6
 80018ea:	b2c9      	uxtb	r1, r1
            len = 0;
 80018ec:	f88d 500b 	strb.w	r5, [sp, #11]
            data[0] = 1;
 80018f0:	f88d 700c 	strb.w	r7, [sp, #12]
            create_packet(size, Packet_Type::CONNECTION);
 80018f4:	f7ff ff70 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
            packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 80018f8:	4641      	mov	r1, r8
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <_ZN17LoRa_contact_data21create_connect_packetEhb+0xf0>)
 80018fc:	f8cd 9000 	str.w	r9, [sp]
 8001900:	ab03      	add	r3, sp, #12
 8001902:	f10d 020a 	add.w	r2, sp, #10
 8001906:	f003 fe61 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    bool err = false;
 800190a:	462c      	mov	r4, r5
 800190c:	e79b      	b.n	8001846 <_ZN17LoRa_contact_data21create_connect_packetEhb+0x26>
 800190e:	bf00      	nop
 8001910:	200023a4 	.word	0x200023a4
 8001914:	20002388 	.word	0x20002388

08001918 <_ZN17LoRa_contact_data18create_data_packetEv>:


// создание пакета на основе номера из списка
bool LoRa_contact_data::create_data_packet() {
 8001918:	b570      	push	{r4, r5, r6, lr}
    bool err = true;
    switch (current_stage_.type_communication) {
 800191a:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_data_packet() {
 800191c:	4605      	mov	r5, r0
    switch (current_stage_.type_communication) {
 800191e:	f014 04fd 	ands.w	r4, r4, #253	; 0xfd
 8001922:	d11b      	bne.n	800195c <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
    // Инициатор
    case TC_INITIATOR:
    case TC_BROADCAST: {
        last_send_packet_.clear_packet();
 8001924:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8001928:	4630      	mov	r0, r6
 800192a:	f002 fb9b 	bl	8004064 <_ZN11LoRa_packet12clear_packetEv>
#if defined ( USE_VECTOR )
        for(int i = 0; i < send_packet_.size(); ++i)
#else
        for(unsigned int i = 0; i < send_packet_len; ++i)
 800192e:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 8001932:	f105 03ac 	add.w	r3, r5, #172	; 0xac
 8001936:	42a2      	cmp	r2, r4
 8001938:	d910      	bls.n	800195c <_ZN17LoRa_contact_data18create_data_packetEv+0x44>
#endif
        {
            if(send_flag_[i]) {
 800193a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800193e:	b159      	cbz	r1, 8001958 <_ZN17LoRa_contact_data18create_data_packetEv+0x40>
      { return const_cast<_Tp&>(__t[__n]); }
 8001940:	f105 0134 	add.w	r1, r5, #52	; 0x34
                // last_send_packet_.set_packet(send_packet_[i]);
                last_send_packet_ = send_packet_[i];
 8001944:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001948:	4630      	mov	r0, r6
 800194a:	f002 fba4 	bl	8004096 <_ZN11LoRa_packetaSERKS_>
                send_flag_[i] = false;
 800194e:	2000      	movs	r0, #0
 8001950:	442c      	add	r4, r5
 8001952:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
        break;
    }
    default: break;
    }
    return err;
}
 8001956:	bd70      	pop	{r4, r5, r6, pc}
        for(unsigned int i = 0; i < send_packet_len; ++i)
 8001958:	3401      	adds	r4, #1
 800195a:	e7ec      	b.n	8001936 <_ZN17LoRa_contact_data18create_data_packetEv+0x1e>
    bool err = true;
 800195c:	2001      	movs	r0, #1
 800195e:	e7fa      	b.n	8001956 <_ZN17LoRa_contact_data18create_data_packetEv+0x3e>

08001960 <_ZN17LoRa_contact_data17create_amt_packetEv>:

// создание пакета количества пакетов
bool LoRa_contact_data::create_amt_packet() {
 8001960:	b530      	push	{r4, r5, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 8001962:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_amt_packet() {
 8001964:	4605      	mov	r5, r0
 8001966:	b085      	sub	sp, #20
    switch (current_stage_.type_communication) {
 8001968:	b124      	cbz	r4, 8001974 <_ZN17LoRa_contact_data17create_amt_packetEv+0x14>
 800196a:	2c01      	cmp	r4, #1
 800196c:	d018      	beq.n	80019a0 <_ZN17LoRa_contact_data17create_amt_packetEv+0x40>
 800196e:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 8001970:	b005      	add	sp, #20
 8001972:	bd30      	pop	{r4, r5, pc}
        uint8_t com = 0x03;
 8001974:	2303      	movs	r3, #3
        create_packet(size, Packet_Type::CONNECTION);
 8001976:	4622      	mov	r2, r4
 8001978:	210a      	movs	r1, #10
        uint8_t com = 0x03;
 800197a:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = 0;
 800197e:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 8001982:	f7ff ff29 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 8001986:	f10d 030f 	add.w	r3, sp, #15
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4623      	mov	r3, r4
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <_ZN17LoRa_contact_data17create_amt_packetEv+0x64>)
 8001990:	f10d 020e 	add.w	r2, sp, #14
 8001994:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001998:	f003 fe18 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 800199c:	2000      	movs	r0, #0
 800199e:	e7e7      	b.n	8001970 <_ZN17LoRa_contact_data17create_amt_packetEv+0x10>
        uint8_t com = 0x04;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {amt_packet_};
 80019a6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
        create_packet(size, Packet_Type::CONNECTION);
 80019aa:	2200      	movs	r2, #0
 80019ac:	210b      	movs	r1, #11
        uint8_t data[1] = {amt_packet_};
 80019ae:	f88d 300c 	strb.w	r3, [sp, #12]
        uint8_t len = 1;
 80019b2:	f88d 400f 	strb.w	r4, [sp, #15]
        create_packet(size, Packet_Type::CONNECTION);
 80019b6:	f7ff ff0f 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 80019ba:	f10d 030f 	add.w	r3, sp, #15
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	ab03      	add	r3, sp, #12
 80019c2:	e7e4      	b.n	800198e <_ZN17LoRa_contact_data17create_amt_packetEv+0x2e>
 80019c4:	200023a4 	.word	0x200023a4

080019c8 <_ZN17LoRa_contact_data20create_number_packetEv>:

// Создание пакета номеров пришедших пакетов
bool LoRa_contact_data::create_number_packet() {
 80019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bool err = false;
    switch (current_stage_.type_communication) {
 80019cc:	7cc4      	ldrb	r4, [r0, #19]
bool LoRa_contact_data::create_number_packet() {
 80019ce:	4605      	mov	r5, r0
 80019d0:	b086      	sub	sp, #24
    switch (current_stage_.type_communication) {
 80019d2:	b12c      	cbz	r4, 80019e0 <_ZN17LoRa_contact_data20create_number_packetEv+0x18>
 80019d4:	2c01      	cmp	r4, #1
 80019d6:	d018      	beq.n	8001a0a <_ZN17LoRa_contact_data20create_number_packetEv+0x42>
 80019d8:	2001      	movs	r0, #1
    default:
        err = true;
        break;
    }
    return err;
}
 80019da:	b006      	add	sp, #24
 80019dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uint8_t com = 0x05;
 80019e0:	2305      	movs	r3, #5
        create_packet(size, Packet_Type::CONNECTION);
 80019e2:	4622      	mov	r2, r4
 80019e4:	210a      	movs	r1, #10
        uint8_t com = 0x05;
 80019e6:	f88d 300f 	strb.w	r3, [sp, #15]
        uint8_t len = 0;
 80019ea:	f88d 4010 	strb.w	r4, [sp, #16]
        create_packet(size, Packet_Type::CONNECTION);
 80019ee:	f7ff fef3 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, nullptr, &len);
 80019f2:	ab04      	add	r3, sp, #16
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	482c      	ldr	r0, [pc, #176]	; (8001aa8 <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 80019f8:	4623      	mov	r3, r4
 80019fa:	f10d 020f 	add.w	r2, sp, #15
 80019fe:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001a02:	f003 fde3 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    return err;
 8001a06:	2000      	movs	r0, #0
 8001a08:	e7e7      	b.n	80019da <_ZN17LoRa_contact_data20create_number_packetEv+0x12>
        LoRa_packet packet;
 8001a0a:	a804      	add	r0, sp, #16
 8001a0c:	f002 faf6 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
        uint8_t com = 0x06;
 8001a10:	2306      	movs	r3, #6
        uint8_t len = reciev_packet_len * 2;
 8001a12:	f895 4135 	ldrb.w	r4, [r5, #309]	; 0x135
        uint8_t com = 0x06;
 8001a16:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t len = reciev_packet_len * 2;
 8001a1a:	0064      	lsls	r4, r4, #1
 8001a1c:	b2e0      	uxtb	r0, r4
        uint8_t size = 11 + len;
 8001a1e:	f100 070b 	add.w	r7, r0, #11
        uint8_t len = reciev_packet_len * 2;
 8001a22:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t size = 11 + len;
 8001a26:	b2ff      	uxtb	r7, r7
        if(len != 0)
 8001a28:	b308      	cbz	r0, 8001a6e <_ZN17LoRa_contact_data20create_number_packetEv+0xa6>
            data = new uint8_t[len];
 8001a2a:	f006 faec 	bl	8008006 <_Znaj>
        for(int i = 0; i < (len / 2); ++i) {
 8001a2e:	f04f 0a00 	mov.w	sl, #0
            data = new uint8_t[len];
 8001a32:	4604      	mov	r4, r0
        for(int i = 0; i < (len / 2); ++i) {
 8001a34:	4606      	mov	r6, r0
            number = packet_analyzer.get_packet_number(packet);
 8001a36:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001aac <_ZN17LoRa_contact_data20create_number_packetEv+0xe4>
 8001a3a:	f105 08bc 	add.w	r8, r5, #188	; 0xbc
        for(int i = 0; i < (len / 2); ++i) {
 8001a3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001a42:	3602      	adds	r6, #2
 8001a44:	ebba 0f53 	cmp.w	sl, r3, lsr #1
 8001a48:	da12      	bge.n	8001a70 <_ZN17LoRa_contact_data20create_number_packetEv+0xa8>
            packet = reciev_packet_[i];
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	a804      	add	r0, sp, #16
 8001a4e:	f002 fb22 	bl	8004096 <_ZN11LoRa_packetaSERKS_>
            number = packet_analyzer.get_packet_number(packet);
 8001a52:	4648      	mov	r0, r9
 8001a54:	a904      	add	r1, sp, #16
 8001a56:	f003 fc72 	bl	800533e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
            data[i * 2] = (number >> 8) & 0xFF;
 8001a5a:	0a03      	lsrs	r3, r0, #8
 8001a5c:	f806 3c02 	strb.w	r3, [r6, #-2]
            data[(i * 2) + 1] = number & 0xFF;
 8001a60:	f806 0c01 	strb.w	r0, [r6, #-1]
        for(int i = 0; i < (len / 2); ++i) {
 8001a64:	f10a 0a01 	add.w	sl, sl, #1
 8001a68:	f108 0808 	add.w	r8, r8, #8
 8001a6c:	e7e7      	b.n	8001a3e <_ZN17LoRa_contact_data20create_number_packetEv+0x76>
        uint8_t *data = nullptr;
 8001a6e:	4604      	mov	r4, r0
        create_packet(size, Packet_Type::CONNECTION);
 8001a70:	2200      	movs	r2, #0
 8001a72:	4639      	mov	r1, r7
 8001a74:	4628      	mov	r0, r5
 8001a76:	f7ff feaf 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001a7a:	f10d 030f 	add.w	r3, sp, #15
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <_ZN17LoRa_contact_data20create_number_packetEv+0xe0>)
 8001a82:	4623      	mov	r3, r4
 8001a84:	f10d 020e 	add.w	r2, sp, #14
 8001a88:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8001a8c:	f003 fd9e 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
        if(len != 0)
 8001a90:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001a94:	b11b      	cbz	r3, 8001a9e <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
            delete[] data;
 8001a96:	b114      	cbz	r4, 8001a9e <_ZN17LoRa_contact_data20create_number_packetEv+0xd6>
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f006 faa1 	bl	8007fe0 <_ZdaPv>
        LoRa_packet packet;
 8001a9e:	a804      	add	r0, sp, #16
 8001aa0:	f002 fab4 	bl	800400c <_ZN11LoRa_packetD1Ev>
 8001aa4:	e7af      	b.n	8001a06 <_ZN17LoRa_contact_data20create_number_packetEv+0x3e>
 8001aa6:	bf00      	nop
 8001aa8:	200023a4 	.word	0x200023a4
 8001aac:	20002388 	.word	0x20002388

08001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>:
        break;
    }
    return err;
}
// Создание пакета разрыва соединения // err переменная класса? 
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    bool err = false;
    init_ = false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f880 3138 	strb.w	r3, [r0, #312]	; 0x138
    switch (current_stage_.type_communication) {
 8001ab8:	7cc3      	ldrb	r3, [r0, #19]
bool LoRa_contact_data::create_disconnet_packet(bool error) {
 8001aba:	4604      	mov	r4, r0
    switch (current_stage_.type_communication) {
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f04f 0001 	mov.w	r0, #1
 8001ac2:	d818      	bhi.n	8001af6 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x46>
    case TC_INITIATOR:
    // Получатель
    case TC_RECIPIENT: {
        // Создание пакета
        uint8_t size = 11;
        uint8_t com = 0x08;
 8001ac4:	2308      	movs	r3, #8
        uint8_t len = 1;
 8001ac6:	f88d 000f 	strb.w	r0, [sp, #15]
        uint8_t com = 0x08;
 8001aca:	f88d 300e 	strb.w	r3, [sp, #14]
        uint8_t data[1] = {0};
        if(error)
 8001ace:	b9a1      	cbnz	r1, 8001afa <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x4a>
        uint8_t data[1] = {0};
 8001ad0:	f88d 100c 	strb.w	r1, [sp, #12]
            data[0] = 2;
        create_packet(size, Packet_Type::CONNECTION);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	210b      	movs	r1, #11
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff fe7d 	bl	80017d8 <_ZN17LoRa_contact_data13create_packetEh11Packet_Type>
        // static_cast<Packet_Connection*>(last_send_packet_.packet)->set_packet_data(&com, data, nullptr);
        packet_connection.set_packet_data(last_send_packet_, &com, data, &len);
 8001ade:	f10d 030f 	add.w	r3, sp, #15
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4807      	ldr	r0, [pc, #28]	; (8001b04 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x54>)
 8001ae6:	ab03      	add	r3, sp, #12
 8001ae8:	f10d 020e 	add.w	r2, sp, #14
 8001aec:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001af0:	f003 fd6c 	bl	80055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>
    }
    default:
        err = true;
        break;
    }
    return err;
 8001af4:	2000      	movs	r0, #0
}
 8001af6:	b004      	add	sp, #16
 8001af8:	bd10      	pop	{r4, pc}
            data[0] = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f88d 300c 	strb.w	r3, [sp, #12]
 8001b00:	e7e8      	b.n	8001ad4 <_ZN17LoRa_contact_data23create_disconnet_packetEb+0x24>
 8001b02:	bf00      	nop
 8001b04:	200023a4 	.word	0x200023a4

08001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>:

// --- функции обработки пакетов ---

// Проверка пакета на "пришёл" и "мой|глобальный", и от того, кого
//   я жду | от всех (при глобальном адресе ожидания - тоже все)
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Проверка размера пакета
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001b0a:	f100 0620 	add.w	r6, r0, #32
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001b0e:	4604      	mov	r4, r0
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001b10:	4630      	mov	r0, r6
bool LoRa_contact_data::packet_dont_correct(bool global_adr, bool all_adr_sendler) {
 8001b12:	460f      	mov	r7, r1
 8001b14:	4615      	mov	r5, r2
    if(last_receive_packet_.get_len() < PACKET_HEADER_SIZE)
 8001b16:	f002 fab0 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8001b1a:	2808      	cmp	r0, #8
 8001b1c:	d90a      	bls.n	8001b34 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
        return false;
    // Проверка "пакет отправлен мне"
    // if(last_receive_packet_.packet->get_dest_adr() != my_adr_) {
    if(packet_analyzer.get_dest_adr(last_receive_packet_) != my_adr_) {
 8001b1e:	4631      	mov	r1, r6
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001b22:	f003 fbdb 	bl	80052dc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001b26:	1d21      	adds	r1, r4, #4
 8001b28:	9001      	str	r0, [sp, #4]
 8001b2a:	a801      	add	r0, sp, #4
 8001b2c:	f003 fba9 	bl	8005282 <_ZneRK12LoRa_addressS1_>
 8001b30:	b160      	cbz	r0, 8001b4c <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x44>
        // Проверка "пакет отправлен всем"
        // if(!(global_adr && (last_receive_packet_.packet->get_dest_adr().global()))) {
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001b32:	b90f      	cbnz	r7, 8001b38 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x30>
        return false;
 8001b34:	2000      	movs	r0, #0
 8001b36:	e01b      	b.n	8001b70 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
        if(!(global_adr && (packet_analyzer.get_dest_adr(last_receive_packet_).global()))) {
 8001b38:	4631      	mov	r1, r6
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001b3c:	f003 fbce 	bl	80052dc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>
 8001b40:	9001      	str	r0, [sp, #4]
 8001b42:	a801      	add	r0, sp, #4
 8001b44:	f003 fb8f 	bl	8005266 <_ZN12LoRa_address6globalEv>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d0f3      	beq.n	8001b34 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x2c>
            return false;
        }
    }
    // Проверка "мне не важно кто отправлял"
    if(!((connect_adr_.global()) || all_adr_sendler))
 8001b4c:	3408      	adds	r4, #8
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f003 fb89 	bl	8005266 <_ZN12LoRa_address6globalEv>
 8001b54:	b960      	cbnz	r0, 8001b70 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 8001b56:	b96d      	cbnz	r5, 8001b74 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x6c>
        // Проверка "мне важно кто отправил"
        // if(last_receive_packet_.packet->get_sour_adr() != connect_adr_)
        if(packet_analyzer.get_sour_adr(last_receive_packet_) != connect_adr_)
 8001b58:	4631      	mov	r1, r6
 8001b5a:	4807      	ldr	r0, [pc, #28]	; (8001b78 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x70>)
 8001b5c:	f003 fbdc 	bl	8005318 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
 8001b60:	4621      	mov	r1, r4
 8001b62:	9001      	str	r0, [sp, #4]
 8001b64:	a801      	add	r0, sp, #4
 8001b66:	f003 fb8c 	bl	8005282 <_ZneRK12LoRa_addressS1_>
 8001b6a:	f080 0001 	eor.w	r0, r0, #1
 8001b6e:	b2c0      	uxtb	r0, r0
            return false;
    return true;
}
 8001b70:	b003      	add	sp, #12
 8001b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
 8001b74:	4628      	mov	r0, r5
 8001b76:	e7fb      	b.n	8001b70 <_ZN17LoRa_contact_data19packet_dont_correctEbb+0x68>
 8001b78:	20002388 	.word	0x20002388

08001b7c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>:
        if(last_receive_packet_[9] == subtype_packet[i])
            return true;
    return false;
}
#else
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet) {
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	460c      	mov	r4, r1
    return (packet_analyzer.get_packet_type(last_receive_packet_) == type_packet);
 8001b80:	f100 0120 	add.w	r1, r0, #32
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type+0x18>)
 8001b86:	f003 fbd5 	bl	8005334 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
}
 8001b8a:	1b03      	subs	r3, r0, r4
 8001b8c:	4258      	negs	r0, r3
 8001b8e:	4158      	adcs	r0, r3
 8001b90:	bd10      	pop	{r4, pc}
 8001b92:	bf00      	nop
 8001b94:	20002388 	.word	0x20002388

08001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>:
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001b98:	b570      	push	{r4, r5, r6, lr}
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001b9a:	f100 0420 	add.w	r4, r0, #32
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001b9e:	460e      	mov	r6, r1
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x30>)
 8001ba2:	4621      	mov	r1, r4
bool LoRa_contact_data::check_packet_type(Packet_Type type_packet, const uint8_t& subtype_packet) {
 8001ba4:	4615      	mov	r5, r2
    if(packet_analyzer.get_packet_type(last_receive_packet_) != type_packet)
 8001ba6:	f003 fbc5 	bl	8005334 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>
 8001baa:	42b0      	cmp	r0, r6
 8001bac:	d109      	bne.n	8001bc2 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x2a>
        return false;
    if(last_receive_packet_[9] == subtype_packet)
 8001bae:	2109      	movs	r1, #9
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f002 fa68 	bl	8004086 <_ZN11LoRa_packetixEi>
 8001bb6:	782b      	ldrb	r3, [r5, #0]
 8001bb8:	7800      	ldrb	r0, [r0, #0]
 8001bba:	1ac3      	subs	r3, r0, r3
 8001bbc:	4258      	negs	r0, r3
 8001bbe:	4158      	adcs	r0, r3
        return true;
    return false;
}
 8001bc0:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e7fc      	b.n	8001bc0 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh+0x28>
 8001bc6:	bf00      	nop
 8001bc8:	20002388 	.word	0x20002388

08001bcc <_ZN17LoRa_contact_data17search_num_packetEt>:
#endif

// поиск номера в send_packet_
int16_t LoRa_contact_data::search_num_packet(uint16_t number) {
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	460e      	mov	r6, r1
 8001bd4:	2400      	movs	r4, #0
#else
    for(uint16_t i = 0; i < send_packet_len; ++i)
#endif
    {
        // packet.set_packet(send_packet_[i]);
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001bd6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001c0c <_ZN17LoRa_contact_data17search_num_packetEt+0x40>
 8001bda:	f100 0734 	add.w	r7, r0, #52	; 0x34
    for(uint16_t i = 0; i < send_packet_len; ++i)
 8001bde:	f895 2134 	ldrb.w	r2, [r5, #308]	; 0x134
 8001be2:	b2a3      	uxth	r3, r4
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d90e      	bls.n	8001c06 <_ZN17LoRa_contact_data17search_num_packetEt+0x3a>
        if(number == packet_analyzer.get_packet_number(send_packet_[i]))
 8001be8:	4639      	mov	r1, r7
 8001bea:	4640      	mov	r0, r8
 8001bec:	f003 fba7 	bl	800533e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	f104 0301 	add.w	r3, r4, #1
 8001bf6:	f107 0708 	add.w	r7, r7, #8
 8001bfa:	d102      	bne.n	8001c02 <_ZN17LoRa_contact_data17search_num_packetEt+0x36>
            return i;
 8001bfc:	b220      	sxth	r0, r4
        // if(packet.packet->get_packet_number() == number)
        //     return i;

    }
    return -1;
}
 8001bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c02:	461c      	mov	r4, r3
 8001c04:	e7eb      	b.n	8001bde <_ZN17LoRa_contact_data17search_num_packetEt+0x12>
    return -1;
 8001c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c0a:	e7f8      	b.n	8001bfe <_ZN17LoRa_contact_data17search_num_packetEt+0x32>
 8001c0c:	20002388 	.word	0x20002388

08001c10 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>:
    for(int j = 0; j < amt_packet_; ++j)
        send_flag_.push_back(true);
    return i;
}
#else
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(len > send_packet_len)
 8001c14:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001c18:	4604      	mov	r4, r0
    if(len > send_packet_len)
 8001c1a:	4293      	cmp	r3, r2
uint8_t LoRa_contact_data::pop_num_packet(const std::array<uint16_t, CONTACT_DATA_MAX_PACKET>& number, uint8_t len) {
 8001c1c:	4688      	mov	r8, r1
 8001c1e:	4617      	mov	r7, r2
    if(len > send_packet_len)
 8001c20:	d335      	bcc.n	8001c8e <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7e>
        return 0;
    int i;
    for(i = 0; i < len; ++i) {
 8001c22:	2600      	movs	r6, #0
 8001c24:	f100 0934 	add.w	r9, r0, #52	; 0x34
 8001c28:	42b7      	cmp	r7, r6
 8001c2a:	dd19      	ble.n	8001c60 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
        int16_t search = search_num_packet(number[i]);
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f838 1016 	ldrh.w	r1, [r8, r6, lsl #1]
 8001c32:	f7ff ffcb 	bl	8001bcc <_ZN17LoRa_contact_data17search_num_packetEt>
        if(search == -1)
 8001c36:	1c43      	adds	r3, r0, #1
        int16_t search = search_num_packet(number[i]);
 8001c38:	4605      	mov	r5, r0
        if(search == -1)
 8001c3a:	d011      	beq.n	8001c60 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x50>
            break;
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001c3c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8001c40:	3b01      	subs	r3, #1
 8001c42:	42ab      	cmp	r3, r5
 8001c44:	dd08      	ble.n	8001c58 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x48>
        	send_packet_[j] = std::move(send_packet_[j+1]);
 8001c46:	00e8      	lsls	r0, r5, #3
 8001c48:	f100 0108 	add.w	r1, r0, #8
 8001c4c:	4449      	add	r1, r9
 8001c4e:	4448      	add	r0, r9
 8001c50:	3501      	adds	r5, #1
 8001c52:	f002 fa3f 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
        for(int j = search; j < send_packet_len - 1; ++j) {
 8001c56:	e7f1      	b.n	8001c3c <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x2c>
        }
		--send_packet_len;
 8001c58:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
    for(i = 0; i < len; ++i) {
 8001c5c:	3601      	adds	r6, #1
 8001c5e:	e7e3      	b.n	8001c28 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x18>
    }
    amt_packet_ = send_packet_len;
    send_flag_len = send_packet_len;
    for(int j = 0; j < send_flag_len; ++j) {
 8001c60:	f06f 00ab 	mvn.w	r0, #171	; 0xab
        send_flag_[j] = true;
 8001c64:	2101      	movs	r1, #1
    amt_packet_ = send_packet_len;
 8001c66:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
    for(int j = 0; j < send_flag_len; ++j) {
 8001c6a:	1b00      	subs	r0, r0, r4
    amt_packet_ = send_packet_len;
 8001c6c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    send_flag_len = send_packet_len;
 8001c70:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
    for(int j = 0; j < send_flag_len; ++j) {
 8001c74:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8001c78:	f894 5136 	ldrb.w	r5, [r4, #310]	; 0x136
 8001c7c:	18c2      	adds	r2, r0, r3
 8001c7e:	42aa      	cmp	r2, r5
 8001c80:	da02      	bge.n	8001c88 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x78>
        send_flag_[j] = true;
 8001c82:	f803 1b01 	strb.w	r1, [r3], #1
    for(int j = 0; j < send_flag_len; ++j) {
 8001c86:	e7f7      	b.n	8001c78 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x68>
    }
    return i;
 8001c88:	b2f0      	uxtb	r0, r6
}
 8001c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return 0;
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e7fb      	b.n	8001c8a <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh+0x7a>
	...

08001c94 <_ZN17LoRa_contact_data15sort_num_packetEv>:
#endif

// сортировка reciev_packet_
void LoRa_contact_data::sort_num_packet() {
 8001c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	4606      	mov	r6, r0
    uint16_t number1, number2;
    bool swap;
#if defined ( USE_VECTOR )
    for(unsigned int i = 0; (i < (reciev_packet_.size() - 1)) && (reciev_packet_.size() != 0);)
#else
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8001c9a:	2400      	movs	r4, #0
        // packet.set_packet(reciev_packet_[i]);
        // number1 = packet.packet->get_packet_number();
        // packet.set_packet(reciev_packet_[i+1]);
        // number2 = packet.packet->get_packet_number();

        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8001c9c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001d18 <_ZN17LoRa_contact_data15sort_num_packetEv+0x84>
 8001ca0:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    for(uint8_t i = 0; (i < (reciev_packet_len - 1)) && (reciev_packet_len != 0);)
 8001ca4:	f896 3135 	ldrb.w	r3, [r6, #309]	; 0x135
 8001ca8:	1e5a      	subs	r2, r3, #1
 8001caa:	4294      	cmp	r4, r2
 8001cac:	da30      	bge.n	8001d10 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8001cae:	b37b      	cbz	r3, 8001d10 <_ZN17LoRa_contact_data15sort_num_packetEv+0x7c>
 8001cb0:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
        number1 = packet_analyzer.get_packet_number(reciev_packet_[i]);
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	f003 fb41 	bl	800533e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>
 8001cbc:	4605      	mov	r5, r0
        number2 = packet_analyzer.get_packet_number(reciev_packet_[i+1]);
 8001cbe:	f104 0b01 	add.w	fp, r4, #1
 8001cc2:	eb07 09cb 	add.w	r9, r7, fp, lsl #3
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	4640      	mov	r0, r8
 8001cca:	f003 fb38 	bl	800533e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>

        if(number1 == 0) {
 8001cce:	b92d      	cbnz	r5, 8001cdc <_ZN17LoRa_contact_data15sort_num_packetEv+0x48>
            if(0xFF00 <= number2)
 8001cd0:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8001cd4:	d205      	bcs.n	8001ce2 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>

            if(i != 0)
                --i;
        }
        else
            ++i;
 8001cd6:	fa5f f48b 	uxtb.w	r4, fp
 8001cda:	e7e3      	b.n	8001ca4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
        else if (number2 == 0) {
 8001cdc:	b9a8      	cbnz	r0, 8001d0a <_ZN17LoRa_contact_data15sort_num_packetEv+0x76>
            if(number1 <= 0x00FF)
 8001cde:	2dff      	cmp	r5, #255	; 0xff
 8001ce0:	d8f9      	bhi.n	8001cd6 <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001ce2:	4651      	mov	r1, sl
 8001ce4:	4668      	mov	r0, sp
 8001ce6:	f002 fa04 	bl	80040f2 <_ZN11LoRa_packetC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 8001cea:	4649      	mov	r1, r9
 8001cec:	4650      	mov	r0, sl
 8001cee:	f002 f9f1 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 8001cf2:	4669      	mov	r1, sp
 8001cf4:	4648      	mov	r0, r9
 8001cf6:	f002 f9ed 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001cfa:	4668      	mov	r0, sp
 8001cfc:	f002 f986 	bl	800400c <_ZN11LoRa_packetD1Ev>
            if(i != 0)
 8001d00:	2c00      	cmp	r4, #0
 8001d02:	d0cf      	beq.n	8001ca4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
                --i;
 8001d04:	3c01      	subs	r4, #1
 8001d06:	b2e4      	uxtb	r4, r4
 8001d08:	e7cc      	b.n	8001ca4 <_ZN17LoRa_contact_data15sort_num_packetEv+0x10>
            if(number2 < number1)
 8001d0a:	4285      	cmp	r5, r0
 8001d0c:	d9e3      	bls.n	8001cd6 <_ZN17LoRa_contact_data15sort_num_packetEv+0x42>
 8001d0e:	e7e8      	b.n	8001ce2 <_ZN17LoRa_contact_data15sort_num_packetEv+0x4e>
    }
}
 8001d10:	b003      	add	sp, #12
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d16:	bf00      	nop
 8001d18:	20002388 	.word	0x20002388

08001d1c <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>:
    //   (стадия _connection = C_AWAITING_REQUEST)
    // - Сброс ожидания определённого модуля => отправить пакет сброса
    //   (стадия _connection = C_AWAITING_REQUEST)
    // ----- ---- -----
    // Проверка состояние модуля
    switch (module_state_) {
 8001d1c:	7c82      	ldrb	r2, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_queue_check(Stage_control& use_stage) {
 8001d1e:	4603      	mov	r3, r0
    switch (module_state_) {
 8001d20:	2a01      	cmp	r2, #1
 8001d22:	d115      	bne.n	8001d50 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x34>
			//     create_reset_wait_packet();
			//     set_LoRa_mode_send();
        }
#endif
        else {
            connect_adr_ = wait_adr_;
 8001d24:	68c2      	ldr	r2, [r0, #12]
 8001d26:	f103 0118 	add.w	r1, r3, #24
 8001d2a:	6082      	str	r2, [r0, #8]
        }
        if(!use_past_stage)
 8001d2c:	7f40      	ldrb	r0, [r0, #29]
 8001d2e:	f103 0213 	add.w	r2, r3, #19
 8001d32:	b938      	cbnz	r0, 8001d44 <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x28>
            past_stage_ = current_stage_;
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	6198      	str	r0, [r3, #24]
 8001d38:	7912      	ldrb	r2, [r2, #4]
 8001d3a:	710a      	strb	r2, [r1, #4]
        else
            current_stage_ = past_stage_;
        current_stage_.connection = C_AWAITING_REQUEST;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2000      	movs	r0, #0
 8001d40:	755a      	strb	r2, [r3, #21]
    }
    default:
        error = 211;
        break;
    }
    return error;
 8001d42:	4770      	bx	lr
            current_stage_ = past_stage_;
 8001d44:	6998      	ldr	r0, [r3, #24]
 8001d46:	7909      	ldrb	r1, [r1, #4]
 8001d48:	f8c3 0013 	str.w	r0, [r3, #19]
 8001d4c:	7111      	strb	r1, [r2, #4]
 8001d4e:	e7f5      	b.n	8001d3c <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control+0x20>
        error = 211;
 8001d50:	20d3      	movs	r0, #211	; 0xd3
}
 8001d52:	4770      	bx	lr

08001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>:
    current_stage_.stade_communication = SC_COMPLETE;
    past_stage_ = current_stage_;
    start_connect_ = false;
    set_LoRa_mode_sleep();
}
void LoRa_contact_data::set_LoRa_mode_receive() {
 8001d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    module_state_ = MS_LoRa_RECIEVE;
 8001d56:	2302      	movs	r3, #2
#if defined ( ESP32 )
    lora_.mode_sleep();
    // delay(1);
    lora_.receiver_packet(1, 0);
#else
    LoRa.mode_sleep();
 8001d58:	4c08      	ldr	r4, [pc, #32]	; (8001d7c <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv+0x28>)
    module_state_ = MS_LoRa_RECIEVE;
 8001d5a:	7483      	strb	r3, [r0, #18]
    LoRa.mode_sleep();
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	f001 fb11 	bl	8003384 <_ZN10LoRa_class10mode_sleepEv>
    //HAL_Delay(1);
    LoRa.receiver_packet(1, 0);
 8001d62:	2300      	movs	r3, #0
 8001d64:	2201      	movs	r2, #1
 8001d66:	4621      	mov	r1, r4
 8001d68:	e9cd 3300 	strd	r3, r3, [sp]
 8001d6c:	a802      	add	r0, sp, #8
 8001d6e:	f001 fe87 	bl	8003a80 <_ZN10LoRa_class15receiver_packetEhmbb>
 8001d72:	a802      	add	r0, sp, #8
 8001d74:	f002 f94a 	bl	800400c <_ZN11LoRa_packetD1Ev>
#endif
}
 8001d78:	b004      	add	sp, #16
 8001d7a:	bd10      	pop	{r4, pc}
 8001d7c:	20000360 	.word	0x20000360

08001d80 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>:
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8001d80:	b507      	push	{r0, r1, r2, lr}
    current_stage_.type_communication = TC_RECIPIENT;
 8001d82:	2201      	movs	r2, #1
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8001d84:	9101      	str	r1, [sp, #4]
    current_stage_.type_communication = TC_RECIPIENT;
 8001d86:	74c2      	strb	r2, [r0, #19]
    current_stage_.stade_communication = SC_CONNECTION;
 8001d88:	f240 1201 	movw	r2, #257	; 0x101
 8001d8c:	8282      	strh	r2, [r0, #20]
    past_stage_ = current_stage_;
 8001d8e:	4602      	mov	r2, r0
bool LoRa_contact_data::wait_recipient(LoRa_address address) {
 8001d90:	4603      	mov	r3, r0
    wait_adr_ = address;
 8001d92:	60c1      	str	r1, [r0, #12]
    past_stage_ = current_stage_;
 8001d94:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8001d98:	6198      	str	r0, [r3, #24]
 8001d9a:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_receive();
 8001d9c:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 8001d9e:	771a      	strb	r2, [r3, #28]
    set_LoRa_mode_receive();
 8001da0:	f7ff ffd8 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8001da4:	2000      	movs	r0, #0
 8001da6:	b003      	add	sp, #12
 8001da8:	f85d fb04 	ldr.w	pc, [sp], #4

08001dac <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>:
uint16_t LoRa_contact_data::broadcast_receive(LoRa_address address) {
 8001dac:	b513      	push	{r0, r1, r4, lr}
 8001dae:	4604      	mov	r4, r0
 8001db0:	9101      	str	r1, [sp, #4]
    clear();
 8001db2:	f7ff fcb0 	bl	8001716 <_ZN17LoRa_contact_data5clearEv>
    wait_adr_ = address;
 8001db6:	9b01      	ldr	r3, [sp, #4]
 8001db8:	60e3      	str	r3, [r4, #12]
    current_stage_.type_communication = TC_BROADCAST;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	74e3      	strb	r3, [r4, #19]
    current_stage_.stade_communication = SC_WAITING;
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	f853 0f13 	ldr.w	r0, [r3, #19]!
 8001dc8:	61a0      	str	r0, [r4, #24]
 8001dca:	791b      	ldrb	r3, [r3, #4]
    set_LoRa_mode_receive();
 8001dcc:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 8001dce:	7723      	strb	r3, [r4, #28]
    set_LoRa_mode_receive();
 8001dd0:	f7ff ffc0 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
}
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd10      	pop	{r4, pc}

08001dda <_ZN17LoRa_contact_data21broadcast_wait_packetEv>:
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 8001dda:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 8001ddc:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_wait_packet() {
 8001dde:	4604      	mov	r4, r0
    switch (module_state_) {
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d00a      	beq.n	8001dfa <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x20>
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d002      	beq.n	8001dee <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x14>
 8001de8:	f44f 709b 	mov.w	r0, #310	; 0x136
}
 8001dec:	bd38      	pop	{r3, r4, r5, pc}
        if(!packet_dont_correct(true, true)) {
 8001dee:	2201      	movs	r2, #1
 8001df0:	4611      	mov	r1, r2
 8001df2:	f7ff fe89 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8001df6:	b920      	cbnz	r0, 8001e02 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x28>
            set_LoRa_mode_receive();
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff ffab 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8001dfe:	2000      	movs	r0, #0
    return error;
 8001e00:	e7f4      	b.n	8001dec <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x12>
			if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 8001e02:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8001e06:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
			reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8001e10:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8001e14:	f104 0120 	add.w	r1, r4, #32
 8001e18:	f002 f93d 	bl	8004096 <_ZN11LoRa_packetaSERKS_>
            current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	7523      	strb	r3, [r4, #20]
 8001e20:	e7ea      	b.n	8001df8 <_ZN17LoRa_contact_data21broadcast_wait_packetEv+0x1e>
	...

08001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>:
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
    module_state_ = MS_LoRa_SEND;
 8001e24:	2301      	movs	r3, #1
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 8001e26:	b570      	push	{r4, r5, r6, lr}
    module_state_ = MS_LoRa_SEND;
 8001e28:	7483      	strb	r3, [r0, #18]
void LoRa_contact_data::set_LoRa_mode_send(bool first) {
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
#if defined ( ESP32 )
    time_last_packet_ = millis();
#else
    time_last_packet_ = HAL_GetTick();
 8001e2e:	f004 fc63 	bl	80066f8 <HAL_GetTick>
 8001e32:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
#endif
    if(first)
 8001e36:	b10d      	cbz	r5, 8001e3c <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x18>
        time_first_packet_ = time_last_packet_;
 8001e38:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c

                                                            #if defined ( ALL_SAVE_PACKET )
                                                            all_packet.push_back(pack(last_send_packet_.get_data(), true));
                                                            #endif
#else
    LoRa.mode_sleep();
 8001e3c:	4810      	ldr	r0, [pc, #64]	; (8001e80 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 8001e3e:	f001 faa1 	bl	8003384 <_ZN10LoRa_class10mode_sleepEv>
 8001e42:	f243 03d4 	movw	r3, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 8001e46:	bf00      	nop
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	d1fc      	bne.n	8001e46 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x22>
    LoRa.mode_FSTX();
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 8001e4e:	f001 fabd 	bl	80033cc <_ZN10LoRa_class9mode_FSTXEv>
 8001e52:	f243 05d4 	movw	r5, #12500	; 0x30d4
    for(int i = 0; i < 12500; i++) __NOP(); // HAL_Delay(3);
 8001e56:	bf00      	nop
 8001e58:	3d01      	subs	r5, #1
 8001e5a:	d1fc      	bne.n	8001e56 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x32>
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 8001e5c:	3428      	adds	r4, #40	; 0x28
 8001e5e:	4629      	mov	r1, r5
 8001e60:	4620      	mov	r0, r4
 8001e62:	f002 f910 	bl	8004086 <_ZN11LoRa_packetixEi>
 8001e66:	4606      	mov	r6, r0
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f002 f906 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8001e6e:	462b      	mov	r3, r5
 8001e70:	4602      	mov	r2, r0
 8001e72:	4631      	mov	r1, r6
#endif
}
 8001e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LoRa.sender_packet(&last_send_packet_[0], last_send_packet_.get_len(), false);
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb+0x5c>)
 8001e7a:	f002 b821 	b.w	8003ec0 <_ZN10LoRa_class13sender_packetEPhhm>
 8001e7e:	bf00      	nop
 8001e80:	20000360 	.word	0x20000360

08001e84 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>:
    switch (module_state_) {
 8001e84:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 8001e86:	b510      	push	{r4, lr}
    switch (module_state_) {
 8001e88:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_boardcast(Stage_control& use_stage) {
 8001e8a:	4604      	mov	r4, r0
    switch (module_state_) {
 8001e8c:	d117      	bne.n	8001ebe <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3a>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8001e8e:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 8001e92:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 8001e96:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8001e9a:	1b00      	subs	r0, r0, r4
 8001e9c:	18c2      	adds	r2, r0, r3
 8001e9e:	4291      	cmp	r1, r2
 8001ea0:	d90f      	bls.n	8001ec2 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3e>
            if(send_flag_[i] == true) {
 8001ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d0f8      	beq.n	8001e9c <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x18>
            create_data_packet();
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff fd34 	bl	8001918 <_ZN17LoRa_contact_data18create_data_packetEv>
 8001eb0:	e017      	b.n	8001ee2 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x5e>
                current_stage_ = past_stage_;
 8001eb2:	69a0      	ldr	r0, [r4, #24]
 8001eb4:	7912      	ldrb	r2, [r2, #4]
 8001eb6:	f8c4 0013 	str.w	r0, [r4, #19]
 8001eba:	711a      	strb	r2, [r3, #4]
 8001ebc:	e00c      	b.n	8001ed8 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x54>
        error = 121;
 8001ebe:	2079      	movs	r0, #121	; 0x79
}
 8001ec0:	bd10      	pop	{r4, pc}
            if(!use_past_stage)
 8001ec2:	7f61      	ldrb	r1, [r4, #29]
 8001ec4:	f104 0218 	add.w	r2, r4, #24
 8001ec8:	f104 0313 	add.w	r3, r4, #19
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d1f0      	bne.n	8001eb2 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x2e>
                past_stage_ = current_stage_;
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	61a0      	str	r0, [r4, #24]
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	7113      	strb	r3, [r2, #4]
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 8001ed8:	2301      	movs	r3, #1
            create_amt_packet();
 8001eda:	4620      	mov	r0, r4
            current_stage_.exchange = E_WAITING_CONFIRMATION;
 8001edc:	75a3      	strb	r3, [r4, #22]
            create_amt_packet();
 8001ede:	f7ff fd3f 	bl	8001960 <_ZN17LoRa_contact_data17create_amt_packetEv>
            set_LoRa_mode_send();
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f7ff ff9d 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8001eea:	2000      	movs	r0, #0
 8001eec:	e7e8      	b.n	8001ec0 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control+0x3c>
	...

08001ef0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>:
void LoRa_contact_data::set_LoRa_mode_sleep() {
    module_state_ = MS_LoRa_SLEEP;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	7483      	strb	r3, [r0, #18]
    // lora mode
#if defined ( ESP32 )
    lora_.mode_sleep();
#else
    LoRa.mode_sleep();
 8001ef4:	4801      	ldr	r0, [pc, #4]	; (8001efc <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv+0xc>)
 8001ef6:	f001 ba45 	b.w	8003384 <_ZN10LoRa_class10mode_sleepEv>
 8001efa:	bf00      	nop
 8001efc:	20000360 	.word	0x20000360

08001f00 <_ZN17LoRa_contact_data11end_contactEv>:
bool LoRa_contact_data::end_contact() {
 8001f00:	b538      	push	{r3, r4, r5, lr}
 8001f02:	4604      	mov	r4, r0
    set_LoRa_mode_sleep();
 8001f04:	f7ff fff4 	bl	8001ef0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    if((current_stage_.stade_communication != SC_DOWNTIME) &&
 8001f08:	7d23      	ldrb	r3, [r4, #20]
 8001f0a:	f104 0518 	add.w	r5, r4, #24
 8001f0e:	f104 0113 	add.w	r1, r4, #19
 8001f12:	b17b      	cbz	r3, 8001f34 <_ZN17LoRa_contact_data11end_contactEv+0x34>
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <_ZN17LoRa_contact_data11end_contactEv+0x1e>
      ((current_stage_.stade_communication != SC_CONNECTION) || (current_stage_.type_communication != TC_RECIPIENT))) {
 8001f18:	7ce3      	ldrb	r3, [r4, #19]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d00a      	beq.n	8001f34 <_ZN17LoRa_contact_data11end_contactEv+0x34>
        clear();
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fbf9 	bl	8001716 <_ZN17LoRa_contact_data5clearEv>
        current_stage_.stade_communication = SC_DOWNTIME;
 8001f24:	2300      	movs	r3, #0
 8001f26:	7523      	strb	r3, [r4, #20]
        past_stage_ = current_stage_;
 8001f28:	6808      	ldr	r0, [r1, #0]
 8001f2a:	61a0      	str	r0, [r4, #24]
        return true;
 8001f2c:	2001      	movs	r0, #1
        past_stage_ = current_stage_;
 8001f2e:	790b      	ldrb	r3, [r1, #4]
 8001f30:	712b      	strb	r3, [r5, #4]
}
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
    current_stage_.stade_communication = SC_DOWNTIME;
 8001f34:	2300      	movs	r3, #0
 8001f36:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8001f38:	6808      	ldr	r0, [r1, #0]
 8001f3a:	61a0      	str	r0, [r4, #24]
 8001f3c:	790a      	ldrb	r2, [r1, #4]
    return false;
 8001f3e:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 8001f40:	712a      	strb	r2, [r5, #4]
    return false;
 8001f42:	e7f6      	b.n	8001f32 <_ZN17LoRa_contact_data11end_contactEv+0x32>

08001f44 <_ZN17LoRa_contact_data16contact_completeEv>:
    current_stage_.stade_communication = SC_COMPLETE;
 8001f44:	2204      	movs	r2, #4
 8001f46:	7502      	strb	r2, [r0, #20]
    past_stage_ = current_stage_;
 8001f48:	4602      	mov	r2, r0
void LoRa_contact_data::contact_complete() {
 8001f4a:	4603      	mov	r3, r0
    past_stage_ = current_stage_;
 8001f4c:	f852 0f13 	ldr.w	r0, [r2, #19]!
 8001f50:	6198      	str	r0, [r3, #24]
 8001f52:	7912      	ldrb	r2, [r2, #4]
    set_LoRa_mode_sleep();
 8001f54:	4618      	mov	r0, r3
    past_stage_ = current_stage_;
 8001f56:	771a      	strb	r2, [r3, #28]
    start_connect_ = false;
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
    set_LoRa_mode_sleep();
 8001f5e:	f7ff bfc7 	b.w	8001ef0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>

08001f62 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>:
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 8001f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (use_stage.disconnect) {
 8001f64:	790e      	ldrb	r6, [r1, #4]
uint32_t LoRa_contact_data::recip_disconnect(Stage_control& use_stage) {
 8001f66:	4605      	mov	r5, r0
    switch (use_stage.disconnect) {
 8001f68:	2e00      	cmp	r6, #0
 8001f6a:	d14c      	bne.n	8002006 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0xa4>
        switch (module_state_) {
 8001f6c:	7c83      	ldrb	r3, [r0, #18]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d004      	beq.n	8001f7c <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1a>
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d006      	beq.n	8001f84 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x22>
 8001f76:	20e7      	movs	r0, #231	; 0xe7
}
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
            set_LoRa_mode_receive();
 8001f7c:	f7ff feea 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8001f80:	4630      	mov	r0, r6
 8001f82:	e7f9      	b.n	8001f78 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
            if(!packet_dont_correct()) {
 8001f84:	4632      	mov	r2, r6
 8001f86:	4631      	mov	r1, r6
 8001f88:	f7ff fdbe 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	bb40      	cbnz	r0, 8001fe2 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x80>
                if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_disconnect)
 8001f90:	f004 fbb2 	bl	80066f8 <HAL_GetTick>
 8001f94:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8001f98:	1ac0      	subs	r0, r0, r3
 8001f9a:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	d204      	bcs.n	8001fac <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x4a>
                    set_LoRa_mode_receive();
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f7ff fed6 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
                    set_LoRa_mode_send(true);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	e7e5      	b.n	8001f78 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    if(!use_past_stage)
 8001fac:	7f69      	ldrb	r1, [r5, #29]
 8001fae:	f105 0218 	add.w	r2, r5, #24
 8001fb2:	f105 0313 	add.w	r3, r5, #19
 8001fb6:	b971      	cbnz	r1, 8001fd6 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x74>
                        past_stage_ = current_stage_;
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	61a8      	str	r0, [r5, #24]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8001fc0:	2400      	movs	r4, #0
                    create_disconnet_packet(true);
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4628      	mov	r0, r5
                    current_stage_.stade_communication = SC_DOWNTIME;
 8001fc6:	752c      	strb	r4, [r5, #20]
                    create_disconnet_packet(true);
 8001fc8:	f7ff fd72 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f7ff ff28 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8001fd4:	e7e8      	b.n	8001fa8 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x46>
                        current_stage_ = past_stage_;
 8001fd6:	69a8      	ldr	r0, [r5, #24]
 8001fd8:	7912      	ldrb	r2, [r2, #4]
 8001fda:	f8c5 0013 	str.w	r0, [r5, #19]
 8001fde:	711a      	strb	r2, [r3, #4]
 8001fe0:	e7ee      	b.n	8001fc0 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x5e>
                if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	4631      	mov	r1, r6
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f10d 0207 	add.w	r2, sp, #7
 8001fec:	f88d 3007 	strb.w	r3, [sp, #7]
 8001ff0:	f7ff fdd2 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d0bf      	beq.n	8001f78 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>
                    sort_num_packet();
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f7ff fe4b 	bl	8001c94 <_ZN17LoRa_contact_data15sort_num_packetEv>
                    contact_complete();
 8001ffe:	4628      	mov	r0, r5
 8002000:	f7ff ffa0 	bl	8001f44 <_ZN17LoRa_contact_data16contact_completeEv>
 8002004:	e7bc      	b.n	8001f80 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x1e>
        error = 230;
 8002006:	20e6      	movs	r0, #230	; 0xe6
 8002008:	e7b6      	b.n	8001f78 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control+0x16>

0800200a <_ZN17LoRa_contact_data14broadcast_sendEb>:
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 800200a:	b538      	push	{r3, r4, r5, lr}
    if(send_packet_len == 0)
 800200c:	f890 3134 	ldrb.w	r3, [r0, #308]	; 0x134
uint16_t LoRa_contact_data::broadcast_send(bool reply) {
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
    if(send_packet_len == 0)
 8002014:	b1bb      	cbz	r3, 8002046 <_ZN17LoRa_contact_data14broadcast_sendEb+0x3c>
    set_LoRa_mode_sleep();
 8002016:	f7ff ff6b 	bl	8001ef0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
    current_stage_.type_communication = TC_BROADCAST;
 800201a:	2302      	movs	r3, #2
    if(reply)
 800201c:	2d00      	cmp	r5, #0
    current_stage_.type_communication = TC_BROADCAST;
 800201e:	74e3      	strb	r3, [r4, #19]
        current_stage_.stade_communication = SC_BROADCASTING;
 8002020:	bf14      	ite	ne
 8002022:	2308      	movne	r3, #8
 8002024:	2305      	moveq	r3, #5
 8002026:	7523      	strb	r3, [r4, #20]
    past_stage_ = current_stage_;
 8002028:	4623      	mov	r3, r4
 800202a:	f853 0f13 	ldr.w	r0, [r3, #19]!
 800202e:	61a0      	str	r0, [r4, #24]
 8002030:	791b      	ldrb	r3, [r3, #4]
    create_data_packet();
 8002032:	4620      	mov	r0, r4
    past_stage_ = current_stage_;
 8002034:	7723      	strb	r3, [r4, #28]
    create_data_packet();
 8002036:	f7ff fc6f 	bl	8001918 <_ZN17LoRa_contact_data18create_data_packetEv>
    set_LoRa_mode_send();
 800203a:	4620      	mov	r0, r4
 800203c:	2100      	movs	r1, #0
 800203e:	f7ff fef1 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    return 0;
 8002042:	2000      	movs	r0, #0
}
 8002044:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002046:	2001      	movs	r0, #1
 8002048:	e7fc      	b.n	8002044 <_ZN17LoRa_contact_data14broadcast_sendEb+0x3a>

0800204a <_ZN17LoRa_contact_data21broadcast_send_packetEv>:
uint32_t LoRa_contact_data::broadcast_send_packet() {
 800204a:	b538      	push	{r3, r4, r5, lr}
    switch (module_state_) {
 800204c:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::broadcast_send_packet() {
 800204e:	4604      	mov	r4, r0
    switch (module_state_) {
 8002050:	2b01      	cmp	r3, #1
 8002052:	d120      	bne.n	8002096 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x4c>
        for(unsigned int i = 0; i < send_flag_len; ++i)
 8002054:	f890 1136 	ldrb.w	r1, [r0, #310]	; 0x136
 8002058:	f100 03ac 	add.w	r3, r0, #172	; 0xac
 800205c:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8002060:	1b00      	subs	r0, r0, r4
 8002062:	18c2      	adds	r2, r0, r3
 8002064:	4291      	cmp	r1, r2
 8002066:	d919      	bls.n	800209c <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x52>
            if(send_flag_[i] == true) {
 8002068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800206c:	2a00      	cmp	r2, #0
 800206e:	d0f8      	beq.n	8002062 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x18>
            create_data_packet();
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff fc51 	bl	8001918 <_ZN17LoRa_contact_data18create_data_packetEv>
            set_LoRa_mode_send();
 8002076:	2100      	movs	r1, #0
 8002078:	4620      	mov	r0, r4
 800207a:	f7ff fed3 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800207e:	e01a      	b.n	80020b6 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
                if(reciev_packet_len == 0)
 8002080:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
                set_LoRa_mode_receive();
 8002084:	4620      	mov	r0, r4
                    current_stage_.stade_communication = SC_PACKET_ACCEPTED;
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2306      	moveq	r3, #6
 800208c:	2307      	movne	r3, #7
 800208e:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_receive();
 8002090:	f7ff fe60 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 8002094:	e00f      	b.n	80020b6 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x6c>
        error = 320;
 8002096:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
 800209a:	bd38      	pop	{r3, r4, r5, pc}
            send_packet_len = 0;
 800209c:	2500      	movs	r5, #0
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 800209e:	7d23      	ldrb	r3, [r4, #20]
            send_packet_len = 0;
 80020a0:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 80020a4:	2b05      	cmp	r3, #5
			send_flag_len = 0;
 80020a6:	f884 5136 	strb.w	r5, [r4, #310]	; 0x136
            if(current_stage_.stade_communication == SC_BROADCASTING) {
 80020aa:	d1e9      	bne.n	8002080 <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x36>
                current_stage_.stade_communication = SC_COMPLETE;
 80020ac:	2304      	movs	r3, #4
                set_LoRa_mode_sleep();
 80020ae:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_COMPLETE;
 80020b0:	7523      	strb	r3, [r4, #20]
                set_LoRa_mode_sleep();
 80020b2:	f7ff ff1d 	bl	8001ef0 <_ZN17LoRa_contact_data19set_LoRa_mode_sleepEv>
            set_LoRa_mode_send();
 80020b6:	2000      	movs	r0, #0
 80020b8:	e7ef      	b.n	800209a <_ZN17LoRa_contact_data21broadcast_send_packetEv+0x50>
	...

080020bc <_ZN17LoRa_contact_data19work_contact_systemEv>:
uint32_t LoRa_contact_data::work_contact_system() {
 80020bc:	b530      	push	{r4, r5, lr}
 80020be:	4604      	mov	r4, r0
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 80020c0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
 80020c4:	7f40      	ldrb	r0, [r0, #29]
uint32_t LoRa_contact_data::work_contact_system() {
 80020c6:	b085      	sub	sp, #20
    if(((in_processing_) || (!lora_init_) || (!lora_begin_) || (current_stage_.stade_communication == SC_DOWNTIME) || (current_stage_.stade_communication == SC_COMPLETE)) && !use_past_stage)
 80020c8:	b93b      	cbnz	r3, 80020da <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 80020ca:	7823      	ldrb	r3, [r4, #0]
 80020cc:	b12b      	cbz	r3, 80020da <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 80020ce:	7863      	ldrb	r3, [r4, #1]
 80020d0:	b11b      	cbz	r3, 80020da <_ZN17LoRa_contact_data19work_contact_systemEv+0x1e>
 80020d2:	7d23      	ldrb	r3, [r4, #20]
 80020d4:	f013 0ffb 	tst.w	r3, #251	; 0xfb
 80020d8:	d103      	bne.n	80020e2 <_ZN17LoRa_contact_data19work_contact_systemEv+0x26>
 80020da:	2800      	cmp	r0, #0
 80020dc:	d146      	bne.n	800216c <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
}
 80020de:	b005      	add	sp, #20
 80020e0:	bd30      	pop	{r4, r5, pc}
    if(!use_past_stage) {
 80020e2:	2800      	cmp	r0, #0
 80020e4:	d142      	bne.n	800216c <_ZN17LoRa_contact_data19work_contact_systemEv+0xb0>
        in_processing_ = true;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
        if(module_state_ == MS_LoRa_RECIEVE) {
 80020ec:	7ca3      	ldrb	r3, [r4, #18]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d119      	bne.n	8002126 <_ZN17LoRa_contact_data19work_contact_systemEv+0x6a>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 80020f2:	4603      	mov	r3, r0
 80020f4:	4602      	mov	r2, r0
 80020f6:	e9cd 0000 	strd	r0, r0, [sp]
 80020fa:	4939      	ldr	r1, [pc, #228]	; (80021e0 <_ZN17LoRa_contact_data19work_contact_systemEv+0x124>)
 80020fc:	a802      	add	r0, sp, #8
 80020fe:	f001 fcbf 	bl	8003a80 <_ZN10LoRa_class15receiver_packetEhmbb>
            if(!((read_packet.get_len() < PACKET_HEADER_SIZE) || (read_packet.get_crc_error()))) {
 8002102:	a802      	add	r0, sp, #8
 8002104:	f001 ffb9 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8002108:	2808      	cmp	r0, #8
 800210a:	f104 0520 	add.w	r5, r4, #32
 800210e:	d929      	bls.n	8002164 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
 8002110:	a802      	add	r0, sp, #8
 8002112:	f001 ffb6 	bl	8004082 <_ZNK11LoRa_packet13get_crc_errorEv>
 8002116:	bb28      	cbnz	r0, 8002164 <_ZN17LoRa_contact_data19work_contact_systemEv+0xa8>
                last_receive_packet_ = read_packet;
 8002118:	4628      	mov	r0, r5
 800211a:	a902      	add	r1, sp, #8
 800211c:	f001 ffbb 	bl	8004096 <_ZN11LoRa_packetaSERKS_>
            class LoRa_packet read_packet = LoRa.receiver_packet(0, 0);
 8002120:	a802      	add	r0, sp, #8
 8002122:	f001 ff73 	bl	800400c <_ZN11LoRa_packetD1Ev>
        use_stage = &current_stage_;
 8002126:	f104 0113 	add.w	r1, r4, #19
    switch (use_stage->type_communication) {
 800212a:	780b      	ldrb	r3, [r1, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d02a      	beq.n	8002186 <_ZN17LoRa_contact_data19work_contact_systemEv+0xca>
 8002130:	2b02      	cmp	r3, #2
 8002132:	d03b      	beq.n	80021ac <_ZN17LoRa_contact_data19work_contact_systemEv+0xf0>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d14c      	bne.n	80021d2 <_ZN17LoRa_contact_data19work_contact_systemEv+0x116>
        switch (use_stage->stade_communication) {
 8002138:	784b      	ldrb	r3, [r1, #1]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d019      	beq.n	8002172 <_ZN17LoRa_contact_data19work_contact_systemEv+0xb6>
 800213e:	2b03      	cmp	r3, #3
 8002140:	d01b      	beq.n	800217a <_ZN17LoRa_contact_data19work_contact_systemEv+0xbe>
 8002142:	2b01      	cmp	r3, #1
 8002144:	d148      	bne.n	80021d8 <_ZN17LoRa_contact_data19work_contact_systemEv+0x11c>
            error = init_connection(*use_stage);
 8002146:	4620      	mov	r0, r4
 8002148:	f000 f96e 	bl	8002428 <_ZN17LoRa_contact_data15init_connectionER13Stage_control>
    if(!use_past_stage)
 800214c:	7f63      	ldrb	r3, [r4, #29]
 800214e:	b90b      	cbnz	r3, 8002154 <_ZN17LoRa_contact_data19work_contact_systemEv+0x98>
        in_processing_ = false;
 8002150:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
    if(error != 0) {
 8002154:	2800      	cmp	r0, #0
 8002156:	d0c2      	beq.n	80020de <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
        start_connect_ = false;
 8002158:	2300      	movs	r3, #0
 800215a:	f884 3137 	strb.w	r3, [r4, #311]	; 0x137
        init_ = false;
 800215e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8002162:	e7bc      	b.n	80020de <_ZN17LoRa_contact_data19work_contact_systemEv+0x22>
                last_receive_packet_.clear_packet();
 8002164:	4628      	mov	r0, r5
 8002166:	f001 ff7d 	bl	8004064 <_ZN11LoRa_packet12clear_packetEv>
 800216a:	e7d9      	b.n	8002120 <_ZN17LoRa_contact_data19work_contact_systemEv+0x64>
        use_stage = &past_stage_;
 800216c:	f104 0118 	add.w	r1, r4, #24
 8002170:	e7db      	b.n	800212a <_ZN17LoRa_contact_data19work_contact_systemEv+0x6e>
            error = init_exchange(*use_stage);
 8002172:	4620      	mov	r0, r4
 8002174:	f000 fac6 	bl	8002704 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>
            break;
 8002178:	e7e8      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (module_state_) {
 800217a:	7ca3      	ldrb	r3, [r4, #18]
        error = 131;
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf0c      	ite	eq
 8002180:	2000      	moveq	r0, #0
 8002182:	2083      	movne	r0, #131	; 0x83
 8002184:	e7e2      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 8002186:	784b      	ldrb	r3, [r1, #1]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d007      	beq.n	800219c <_ZN17LoRa_contact_data19work_contact_systemEv+0xe0>
 800218c:	2b03      	cmp	r3, #3
 800218e:	d009      	beq.n	80021a4 <_ZN17LoRa_contact_data19work_contact_systemEv+0xe8>
 8002190:	2b01      	cmp	r3, #1
 8002192:	d123      	bne.n	80021dc <_ZN17LoRa_contact_data19work_contact_systemEv+0x120>
            error = recip_connection(*use_stage);
 8002194:	4620      	mov	r0, r4
 8002196:	f000 fb87 	bl	80028a8 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>
            break;
 800219a:	e7d7      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_exchange(*use_stage);
 800219c:	4620      	mov	r0, r4
 800219e:	f000 fcb3 	bl	8002b08 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>
            break;
 80021a2:	e7d3      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = recip_disconnect(*use_stage);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fedc 	bl	8001f62 <_ZN17LoRa_contact_data16recip_disconnectER13Stage_control>
            break;
 80021aa:	e7cf      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
        switch (use_stage->stade_communication) {
 80021ac:	784b      	ldrb	r3, [r1, #1]
 80021ae:	2b07      	cmp	r3, #7
 80021b0:	d805      	bhi.n	80021be <_ZN17LoRa_contact_data19work_contact_systemEv+0x102>
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d805      	bhi.n	80021c2 <_ZN17LoRa_contact_data19work_contact_systemEv+0x106>
 80021b6:	d008      	beq.n	80021ca <_ZN17LoRa_contact_data19work_contact_systemEv+0x10e>
 80021b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021bc:	e7c6      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	e7f9      	b.n	80021b6 <_ZN17LoRa_contact_data19work_contact_systemEv+0xfa>
            error = broadcast_wait_packet();
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff fe09 	bl	8001dda <_ZN17LoRa_contact_data21broadcast_wait_packetEv>
            break;
 80021c8:	e7c0      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
            error = broadcast_send_packet();
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff3d 	bl	800204a <_ZN17LoRa_contact_data21broadcast_send_packetEv>
            break;
 80021d0:	e7bc      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
    switch (use_stage->type_communication) {
 80021d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021d6:	e7b9      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	e7b7      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 80021dc:	20c8      	movs	r0, #200	; 0xc8
 80021de:	e7b5      	b.n	800214c <_ZN17LoRa_contact_data19work_contact_systemEv+0x90>
 80021e0:	20000360 	.word	0x20000360

080021e4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 80021e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    switch (module_state_) {
 80021e6:	7c86      	ldrb	r6, [r0, #18]
uint32_t LoRa_contact_data::init_connection_expect(Stage_control& use_stage) {
 80021e8:	4604      	mov	r4, r0
    switch (module_state_) {
 80021ea:	2e01      	cmp	r6, #1
 80021ec:	d014      	beq.n	8002218 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x34>
 80021ee:	2e02      	cmp	r6, #2
 80021f0:	d002      	beq.n	80021f8 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x14>
 80021f2:	206f      	movs	r0, #111	; 0x6f
}
 80021f4:	b004      	add	sp, #16
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 80021f8:	2200      	movs	r2, #0
 80021fa:	4611      	mov	r1, r2
 80021fc:	f7ff fc84 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002200:	4605      	mov	r5, r0
 8002202:	bbc8      	cbnz	r0, 8002278 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x94>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_connect) {
 8002204:	f004 fa78 	bl	80066f8 <HAL_GetTick>
 8002208:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800220c:	1ac0      	subs	r0, r0, r3
 800220e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8002212:	4298      	cmp	r0, r3
 8002214:	d203      	bcs.n	800221e <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x3a>
                    set_LoRa_mode_receive();
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff fd9c 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 800221c:	e00c      	b.n	8002238 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x54>
                if(send_packet_amt_ < packet_constraints_.I_connect) {
 800221e:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002222:	f894 2165 	ldrb.w	r2, [r4, #357]	; 0x165
 8002226:	429a      	cmp	r2, r3
 8002228:	d908      	bls.n	800223c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x58>
                    set_LoRa_mode_send();
 800222a:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 800222c:	3301      	adds	r3, #1
 800222e:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                        set_LoRa_mode_send(true);
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fdf6 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
    uint32_t error = 0;
 8002238:	2000      	movs	r0, #0
 800223a:	e7db      	b.n	80021f4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                    if(!use_past_stage)
 800223c:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 800223e:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002242:	f104 0218 	add.w	r2, r4, #24
 8002246:	f104 0313 	add.w	r3, r4, #19
 800224a:	b979      	cbnz	r1, 800226c <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x88>
                        past_stage_ = current_stage_;
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	61a0      	str	r0, [r4, #24]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002254:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 8002256:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 8002258:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fc28 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002260:	4620      	mov	r0, r4
 8002262:	2101      	movs	r1, #1
 8002264:	f7ff fdde 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 112;
 8002268:	2070      	movs	r0, #112	; 0x70
 800226a:	e7c3      	b.n	80021f4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
                        current_stage_ = past_stage_;
 800226c:	69a0      	ldr	r0, [r4, #24]
 800226e:	7912      	ldrb	r2, [r2, #4]
 8002270:	f8c4 0013 	str.w	r0, [r4, #19]
 8002274:	711a      	strb	r2, [r3, #4]
 8002276:	e7ed      	b.n	8002254 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x70>
            if(check_packet_type(Packet_Type::CONNECTION, {0x01})) {
 8002278:	2501      	movs	r5, #1
 800227a:	2100      	movs	r1, #0
 800227c:	4620      	mov	r0, r4
 800227e:	aa03      	add	r2, sp, #12
 8002280:	f88d 500c 	strb.w	r5, [sp, #12]
 8002284:	f7ff fc88 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002288:	2800      	cmp	r0, #0
 800228a:	d062      	beq.n	8002352 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x16e>
                send_packet_amt_ = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                uint8_t data[2] = {0, 0};
 8002292:	f8ad 300c 	strh.w	r3, [sp, #12]
                if(amt_packet_ == 0xFF)
 8002296:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                uint8_t com = 0x01;
 800229a:	f88d 500a 	strb.w	r5, [sp, #10]
                    len = 2;
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	bf08      	it	eq
 80022a2:	4635      	moveq	r5, r6
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80022a4:	f10d 030b 	add.w	r3, sp, #11
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f10d 020a 	add.w	r2, sp, #10
 80022ae:	ab03      	add	r3, sp, #12
 80022b0:	f104 0120 	add.w	r1, r4, #32
 80022b4:	482c      	ldr	r0, [pc, #176]	; (8002368 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x184>)
                    len = 2;
 80022b6:	f88d 500b 	strb.w	r5, [sp, #11]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80022ba:	f003 fa15 	bl	80056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0) {
 80022be:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80022c2:	7f61      	ldrb	r1, [r4, #29]
 80022c4:	f104 0218 	add.w	r2, r4, #24
 80022c8:	f104 0313 	add.w	r3, r4, #19
 80022cc:	bb98      	cbnz	r0, 8002336 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x152>
                    if(amt_packet_ == 0xFF) {
 80022ce:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80022d2:	28ff      	cmp	r0, #255	; 0xff
 80022d4:	d11c      	bne.n	8002310 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x12c>
                        if(!use_past_stage)
 80022d6:	b9a9      	cbnz	r1, 8002304 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x120>
                            past_stage_ = current_stage_;
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	61a0      	str	r0, [r4, #24]
 80022dc:	791b      	ldrb	r3, [r3, #4]
 80022de:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_EXCHANGE;
 80022e0:	2302      	movs	r3, #2
                        current_stage_.type_communication = TC_RECIPIENT;
 80022e2:	2501      	movs	r5, #1
                        current_stage_.exchange = E_BOARDCAST;
 80022e4:	2100      	movs	r1, #0
                        current_stage_.stade_communication = SC_EXCHANGE;
 80022e6:	7523      	strb	r3, [r4, #20]
                        expected_amt_packet_ = data[1];
 80022e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
                        create_connect_packet(0, true); // уже не инициатор
 80022ec:	462a      	mov	r2, r5
 80022ee:	4620      	mov	r0, r4
                        current_stage_.type_communication = TC_RECIPIENT;
 80022f0:	74e5      	strb	r5, [r4, #19]
                        current_stage_.exchange = E_BOARDCAST;
 80022f2:	75a1      	strb	r1, [r4, #22]
                        expected_amt_packet_ = data[1];
 80022f4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                        amt_packet_ = 0;
 80022f8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
                        create_connect_packet(0, true); // уже не инициатор
 80022fc:	f7ff fa90 	bl	8001820 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                        set_LoRa_mode_send(true);
 8002300:	2101      	movs	r1, #1
 8002302:	e796      	b.n	8002232 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x4e>
                            current_stage_ = past_stage_;
 8002304:	69a0      	ldr	r0, [r4, #24]
 8002306:	7912      	ldrb	r2, [r2, #4]
 8002308:	f8c4 0013 	str.w	r0, [r4, #19]
 800230c:	711a      	strb	r2, [r3, #4]
 800230e:	e7e7      	b.n	80022e0 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0xfc>
                        if(!use_past_stage)
 8002310:	b959      	cbnz	r1, 800232a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x146>
                            past_stage_ = current_stage_;
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	61a0      	str	r0, [r4, #24]
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	7113      	strb	r3, [r2, #4]
                        current_stage_.exchange = E_BOARDCAST;
 800231a:	2300      	movs	r3, #0
 800231c:	75a3      	strb	r3, [r4, #22]
                        current_stage_.stade_communication = SC_EXCHANGE;
 800231e:	2302      	movs	r3, #2
                        create_data_packet();
 8002320:	4620      	mov	r0, r4
                        current_stage_.stade_communication = SC_EXCHANGE;
 8002322:	7523      	strb	r3, [r4, #20]
                        create_data_packet();
 8002324:	f7ff faf8 	bl	8001918 <_ZN17LoRa_contact_data18create_data_packetEv>
 8002328:	e7ea      	b.n	8002300 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x11c>
                            current_stage_ = past_stage_;
 800232a:	69a0      	ldr	r0, [r4, #24]
 800232c:	7912      	ldrb	r2, [r2, #4]
 800232e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002332:	711a      	strb	r2, [r3, #4]
 8002334:	e7f1      	b.n	800231a <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x136>
                    if(!use_past_stage)
 8002336:	b931      	cbnz	r1, 8002346 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x162>
                        past_stage_ = current_stage_;
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	61a0      	str	r0, [r4, #24]
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	7113      	strb	r3, [r2, #4]
                    current_stage_.connection = C_WAIT_RESET;
 8002340:	2301      	movs	r3, #1
 8002342:	7563      	strb	r3, [r4, #21]
 8002344:	e767      	b.n	8002216 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                        current_stage_ = past_stage_;
 8002346:	69a0      	ldr	r0, [r4, #24]
 8002348:	7912      	ldrb	r2, [r2, #4]
 800234a:	f8c4 0013 	str.w	r0, [r4, #19]
 800234e:	711a      	strb	r2, [r3, #4]
 8002350:	e7f6      	b.n	8002340 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x15c>
                if(!use_past_stage) {
 8002352:	7f66      	ldrb	r6, [r4, #29]
 8002354:	2e00      	cmp	r6, #0
 8002356:	f47f af5e 	bne.w	8002216 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x32>
                    error = work_contact_system();
 800235a:	4620      	mov	r0, r4
                    use_past_stage = true;
 800235c:	7765      	strb	r5, [r4, #29]
                    error = work_contact_system();
 800235e:	f7ff fead 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002362:	7766      	strb	r6, [r4, #29]
    return error;
 8002364:	e746      	b.n	80021f4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control+0x10>
 8002366:	bf00      	nop
 8002368:	200023a4 	.word	0x200023a4

0800236c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>:
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 800236c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 800236e:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::init_connection_wait(Stage_control& use_stage) {
 8002370:	4604      	mov	r4, r0
    switch (module_state_) {
 8002372:	2d01      	cmp	r5, #1
 8002374:	d013      	beq.n	800239e <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x32>
 8002376:	2d02      	cmp	r5, #2
 8002378:	d002      	beq.n	8002380 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x14>
 800237a:	2071      	movs	r0, #113	; 0x71
}
 800237c:	b003      	add	sp, #12
 800237e:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 8002380:	2200      	movs	r2, #0
 8002382:	4611      	mov	r1, r2
 8002384:	f7ff fbc0 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002388:	bb48      	cbnz	r0, 80023de <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x72>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_wait_connect) {
 800238a:	f004 f9b5 	bl	80066f8 <HAL_GetTick>
 800238e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002392:	1ac0      	subs	r0, r0, r3
 8002394:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8002398:	4298      	cmp	r0, r3
 800239a:	d204      	bcs.n	80023a6 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x3a>
                set_LoRa_mode_receive();
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff fcd9 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80023a2:	2000      	movs	r0, #0
 80023a4:	e7ea      	b.n	800237c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                if(!use_past_stage)
 80023a6:	7f61      	ldrb	r1, [r4, #29]
 80023a8:	f104 0218 	add.w	r2, r4, #24
 80023ac:	f104 0313 	add.w	r3, r4, #19
 80023b0:	b979      	cbnz	r1, 80023d2 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x66>
                    past_stage_ = current_stage_;
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	61a0      	str	r0, [r4, #24]
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 80023ba:	2300      	movs	r3, #0
                create_disconnet_packet(true);
 80023bc:	2101      	movs	r1, #1
                current_stage_.stade_communication = SC_DOWNTIME;
 80023be:	7523      	strb	r3, [r4, #20]
                create_disconnet_packet(true);
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fb75 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 80023c6:	4620      	mov	r0, r4
 80023c8:	2101      	movs	r1, #1
 80023ca:	f7ff fd2b 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                error = 114;
 80023ce:	2072      	movs	r0, #114	; 0x72
 80023d0:	e7d4      	b.n	800237c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 80023d2:	69a0      	ldr	r0, [r4, #24]
 80023d4:	7912      	ldrb	r2, [r2, #4]
 80023d6:	f8c4 0013 	str.w	r0, [r4, #19]
 80023da:	711a      	strb	r2, [r3, #4]
 80023dc:	e7ed      	b.n	80023ba <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x4e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x02})) {
 80023de:	2100      	movs	r1, #0
 80023e0:	4620      	mov	r0, r4
 80023e2:	f10d 0207 	add.w	r2, sp, #7
 80023e6:	f88d 5007 	strb.w	r5, [sp, #7]
 80023ea:	f7ff fbd5 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80023ee:	7f65      	ldrb	r5, [r4, #29]
 80023f0:	b188      	cbz	r0, 8002416 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0xaa>
                if(!use_past_stage)
 80023f2:	f104 0218 	add.w	r2, r4, #24
 80023f6:	f104 0313 	add.w	r3, r4, #19
 80023fa:	b935      	cbnz	r5, 800240a <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x9e>
                    past_stage_ = current_stage_;
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	61a0      	str	r0, [r4, #24]
 8002400:	791b      	ldrb	r3, [r3, #4]
 8002402:	7113      	strb	r3, [r2, #4]
                current_stage_.connection = C_EXPECTATION; // ??? (?) -----
 8002404:	2000      	movs	r0, #0
 8002406:	7560      	strb	r0, [r4, #21]
 8002408:	e7b8      	b.n	800237c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 800240a:	69a0      	ldr	r0, [r4, #24]
 800240c:	7912      	ldrb	r2, [r2, #4]
 800240e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002412:	711a      	strb	r2, [r3, #4]
 8002414:	e7f6      	b.n	8002404 <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x98>
                if(!use_past_stage) {
 8002416:	2d00      	cmp	r5, #0
 8002418:	d1c0      	bne.n	800239c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x30>
                    use_past_stage = true;
 800241a:	2301      	movs	r3, #1
                    error = work_contact_system();
 800241c:	4620      	mov	r0, r4
                    use_past_stage = true;
 800241e:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002420:	f7ff fe4c 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002424:	7765      	strb	r5, [r4, #29]
    return error;
 8002426:	e7a9      	b.n	800237c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control+0x10>

08002428 <_ZN17LoRa_contact_data15init_connectionER13Stage_control>:
    switch (use_stage.connection) {
 8002428:	788b      	ldrb	r3, [r1, #2]
 800242a:	b11b      	cbz	r3, 8002434 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0xc>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d003      	beq.n	8002438 <_ZN17LoRa_contact_data15init_connectionER13Stage_control+0x10>
}
 8002430:	206e      	movs	r0, #110	; 0x6e
 8002432:	4770      	bx	lr
        error = init_connection_expect(use_stage);
 8002434:	f7ff bed6 	b.w	80021e4 <_ZN17LoRa_contact_data22init_connection_expectER13Stage_control>
        error = init_connection_wait(use_stage);
 8002438:	f7ff bf98 	b.w	800236c <_ZN17LoRa_contact_data20init_connection_waitER13Stage_control>

0800243c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 800243c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 800243e:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002440:	4604      	mov	r4, r0
    switch (module_state_) {
 8002442:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_confirmation(Stage_control& use_stage) {
 8002444:	b085      	sub	sp, #20
    switch (module_state_) {
 8002446:	d014      	beq.n	8002472 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x36>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d002      	beq.n	8002452 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x16>
 800244c:	207a      	movs	r0, #122	; 0x7a
}
 800244e:	b005      	add	sp, #20
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 8002452:	2200      	movs	r2, #0
 8002454:	4611      	mov	r1, r2
 8002456:	f7ff fb57 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 800245a:	4605      	mov	r5, r0
 800245c:	bbb0      	cbnz	r0, 80024cc <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x90>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_amt_pack) {
 800245e:	f004 f94b 	bl	80066f8 <HAL_GetTick>
 8002462:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002466:	1ac0      	subs	r0, r0, r3
 8002468:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 800246c:	4298      	cmp	r0, r3
 800246e:	d204      	bcs.n	800247a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff fc6f 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002476:	2000      	movs	r0, #0
 8002478:	e7e9      	b.n	800244e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_amt_pack) {
 800247a:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800247e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
 8002482:	429a      	cmp	r2, r3
 8002484:	d904      	bls.n	8002490 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x54>
                    ++send_packet_amt_;
 8002486:	3301      	adds	r3, #1
 8002488:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 800248c:	2100      	movs	r1, #0
 800248e:	e04a      	b.n	8002526 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xea>
                    if(!use_past_stage)
 8002490:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 8002492:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 8002496:	f104 0218 	add.w	r2, r4, #24
 800249a:	f104 0313 	add.w	r3, r4, #19
 800249e:	b979      	cbnz	r1, 80024c0 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x84>
                        past_stage_ = current_stage_;
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	61a0      	str	r0, [r4, #24]
 80024a4:	791b      	ldrb	r3, [r3, #4]
 80024a6:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80024a8:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 80024aa:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 80024ac:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff fafe 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80024b4:	4620      	mov	r0, r4
 80024b6:	2101      	movs	r1, #1
 80024b8:	f7ff fcb4 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 123;
 80024bc:	207b      	movs	r0, #123	; 0x7b
 80024be:	e7c6      	b.n	800244e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 80024c0:	69a0      	ldr	r0, [r4, #24]
 80024c2:	7912      	ldrb	r2, [r2, #4]
 80024c4:	f8c4 0013 	str.w	r0, [r4, #19]
 80024c8:	711a      	strb	r2, [r3, #4]
 80024ca:	e7ed      	b.n	80024a8 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x6c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x04})) {
 80024cc:	2604      	movs	r6, #4
 80024ce:	f10d 070f 	add.w	r7, sp, #15
 80024d2:	463a      	mov	r2, r7
 80024d4:	2100      	movs	r1, #0
 80024d6:	4620      	mov	r0, r4
 80024d8:	f88d 600f 	strb.w	r6, [sp, #15]
 80024dc:	f7ff fb5c 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d03a      	beq.n	800255a <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x11e>
                send_packet_amt_ = 0;
 80024e4:	2500      	movs	r5, #0
                uint8_t com = 0x04;
 80024e6:	f88d 600e 	strb.w	r6, [sp, #14]
                uint8_t len = 1;
 80024ea:	2601      	movs	r6, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80024ec:	ab03      	add	r3, sp, #12
 80024ee:	f10d 020e 	add.w	r2, sp, #14
 80024f2:	481f      	ldr	r0, [pc, #124]	; (8002570 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x134>)
                send_packet_amt_ = 0;
 80024f4:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80024f8:	9700      	str	r7, [sp, #0]
 80024fa:	f104 0120 	add.w	r1, r4, #32
                uint8_t data[1] = {0};
 80024fe:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t len = 1;
 8002502:	f88d 600f 	strb.w	r6, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 8002506:	f003 f8ef 	bl	80056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == amt_packet_) {
 800250a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800250e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002512:	429a      	cmp	r2, r3
 8002514:	d10b      	bne.n	800252e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0xf2>
                    contact_complete();
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff fd14 	bl	8001f44 <_ZN17LoRa_contact_data16contact_completeEv>
                    create_disconnet_packet();
 800251c:	4629      	mov	r1, r5
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fac6 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 8002524:	4631      	mov	r1, r6
                    set_LoRa_mode_send();
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff fc7c 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800252c:	e7a3      	b.n	8002476 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x3a>
                    if(!use_past_stage)
 800252e:	7f61      	ldrb	r1, [r4, #29]
 8002530:	f104 0218 	add.w	r2, r4, #24
 8002534:	f104 0313 	add.w	r3, r4, #19
 8002538:	b949      	cbnz	r1, 800254e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x112>
                        past_stage_ = current_stage_;
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	61a0      	str	r0, [r4, #24]
 800253e:	791b      	ldrb	r3, [r3, #4]
 8002540:	7113      	strb	r3, [r2, #4]
                    current_stage_.exchange = E_WAITING_NUMBERS;
 8002542:	2302      	movs	r3, #2
                    create_number_packet();
 8002544:	4620      	mov	r0, r4
                    current_stage_.exchange = E_WAITING_NUMBERS;
 8002546:	75a3      	strb	r3, [r4, #22]
                    create_number_packet();
 8002548:	f7ff fa3e 	bl	80019c8 <_ZN17LoRa_contact_data20create_number_packetEv>
 800254c:	e79e      	b.n	800248c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x50>
                        current_stage_ = past_stage_;
 800254e:	69a0      	ldr	r0, [r4, #24]
 8002550:	7912      	ldrb	r2, [r2, #4]
 8002552:	f8c4 0013 	str.w	r0, [r4, #19]
 8002556:	711a      	strb	r2, [r3, #4]
 8002558:	e7f3      	b.n	8002542 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x106>
                if(!use_past_stage) {
 800255a:	7f65      	ldrb	r5, [r4, #29]
 800255c:	2d00      	cmp	r5, #0
 800255e:	d187      	bne.n	8002470 <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x34>
                    use_past_stage = true;
 8002560:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002562:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002564:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002566:	f7ff fda9 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 800256a:	7765      	strb	r5, [r4, #29]
    return error;
 800256c:	e76f      	b.n	800244e <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control+0x12>
 800256e:	bf00      	nop
 8002570:	200023a4 	.word	0x200023a4

08002574 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>:
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (module_state_) {
 8002576:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 8002578:	4604      	mov	r4, r0
    switch (module_state_) {
 800257a:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::init_exchange_wait_numbers(Stage_control& use_stage) {
 800257c:	b08d      	sub	sp, #52	; 0x34
    switch (module_state_) {
 800257e:	d014      	beq.n	80025aa <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x36>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d002      	beq.n	800258a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16>
 8002584:	207c      	movs	r0, #124	; 0x7c
}
 8002586:	b00d      	add	sp, #52	; 0x34
 8002588:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!packet_dont_correct()) {
 800258a:	2200      	movs	r2, #0
 800258c:	4611      	mov	r1, r2
 800258e:	f7ff fabb 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002592:	4605      	mov	r5, r0
 8002594:	bbc8      	cbnz	r0, 800260a <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x96>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.I_num_pack) {
 8002596:	f004 f8af 	bl	80066f8 <HAL_GetTick>
 800259a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800259e:	1ac0      	subs	r0, r0, r3
 80025a0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 80025a4:	4298      	cmp	r0, r3
 80025a6:	d204      	bcs.n	80025b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff fbd3 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 80025ae:	2000      	movs	r0, #0
 80025b0:	e7e9      	b.n	8002586 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                if(send_packet_amt_ < packet_constraints_.I_num_pack) {
 80025b2:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 80025b6:	f894 2167 	ldrb.w	r2, [r4, #359]	; 0x167
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d907      	bls.n	80025ce <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x5a>
                    set_LoRa_mode_send();
 80025be:	4629      	mov	r1, r5
                    ++send_packet_amt_;
 80025c0:	3301      	adds	r3, #1
 80025c2:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send(true);
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff fc2c 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 80025cc:	e7ef      	b.n	80025ae <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x3a>
                    if(!use_past_stage)
 80025ce:	7f61      	ldrb	r1, [r4, #29]
                    send_packet_amt_ = 0;
 80025d0:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                    if(!use_past_stage)
 80025d4:	f104 0218 	add.w	r2, r4, #24
 80025d8:	f104 0313 	add.w	r3, r4, #19
 80025dc:	b979      	cbnz	r1, 80025fe <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x8a>
                        past_stage_ = current_stage_;
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	61a0      	str	r0, [r4, #24]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	7113      	strb	r3, [r2, #4]
                    current_stage_.stade_communication = SC_DOWNTIME;
 80025e6:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 80025e8:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 80025ea:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80025ec:	4620      	mov	r0, r4
 80025ee:	f7ff fa5f 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80025f2:	4620      	mov	r0, r4
 80025f4:	2101      	movs	r1, #1
 80025f6:	f7ff fc15 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 125;
 80025fa:	207d      	movs	r0, #125	; 0x7d
 80025fc:	e7c3      	b.n	8002586 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                        current_stage_ = past_stage_;
 80025fe:	69a0      	ldr	r0, [r4, #24]
 8002600:	7912      	ldrb	r2, [r2, #4]
 8002602:	f8c4 0013 	str.w	r0, [r4, #19]
 8002606:	711a      	strb	r2, [r3, #4]
 8002608:	e7ed      	b.n	80025e6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x72>
            if(check_packet_type(Packet_Type::CONNECTION, {0x06})) {
 800260a:	2306      	movs	r3, #6
 800260c:	ae04      	add	r6, sp, #16
 800260e:	4632      	mov	r2, r6
 8002610:	2100      	movs	r1, #0
 8002612:	4620      	mov	r0, r4
 8002614:	f88d 3010 	strb.w	r3, [sp, #16]
 8002618:	f7ff fabe 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 800261c:	7f65      	ldrb	r5, [r4, #29]
 800261e:	2800      	cmp	r0, #0
 8002620:	d064      	beq.n	80026ec <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x178>
                if(!use_past_stage)
 8002622:	f104 0218 	add.w	r2, r4, #24
 8002626:	f104 0313 	add.w	r3, r4, #19
 800262a:	2d00      	cmp	r5, #0
 800262c:	d13b      	bne.n	80026a6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x132>
                    past_stage_ = current_stage_;
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	61a0      	str	r0, [r4, #24]
 8002632:	791b      	ldrb	r3, [r3, #4]
 8002634:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_BOARDCAST;
 8002636:	2300      	movs	r3, #0
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002638:	f104 0720 	add.w	r7, r4, #32
 800263c:	4639      	mov	r1, r7
 800263e:	4830      	ldr	r0, [pc, #192]	; (8002700 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
                current_stage_.exchange = E_BOARDCAST;
 8002640:	75a3      	strb	r3, [r4, #22]
                send_packet_amt_ = 0;
 8002642:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 8002646:	f10d 020d 	add.w	r2, sp, #13
                uint8_t size = 0;
 800264a:	f88d 300d 	strb.w	r3, [sp, #13]
                packet_connection.get_size_by_packet(last_receive_packet_, size);
 800264e:	f003 f85f 	bl	8005710 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>
                if(size != 0)
 8002652:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002656:	b108      	cbz	r0, 800265c <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xe8>
                    data = new uint8_t[size];
 8002658:	f005 fcd5 	bl	8008006 <_Znaj>
                uint8_t com = 0xFF;
 800265c:	23ff      	movs	r3, #255	; 0xff
 800265e:	f88d 300e 	strb.w	r3, [sp, #14]
                uint8_t len = 0xFF;
 8002662:	f88d 300f 	strb.w	r3, [sp, #15]
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 8002666:	f10d 030f 	add.w	r3, sp, #15
 800266a:	9300      	str	r3, [sp, #0]
                uint8_t *data = nullptr;
 800266c:	4605      	mov	r5, r0
                packet_connection.get_packet_data(last_receive_packet_, &com, data, &len);
 800266e:	4603      	mov	r3, r0
 8002670:	4639      	mov	r1, r7
 8002672:	4823      	ldr	r0, [pc, #140]	; (8002700 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x18c>)
 8002674:	f10d 020e 	add.w	r2, sp, #14
 8002678:	f003 f836 	bl	80056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if (com != 0x06) {
 800267c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d116      	bne.n	80026b2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x13e>
					for(int i = 0; i < len/2; ++i) {
 8002684:	2300      	movs	r3, #0
 8002686:	f89d 200f 	ldrb.w	r2, [sp, #15]
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 800268a:	1c6f      	adds	r7, r5, #1
					for(int i = 0; i < len/2; ++i) {
 800268c:	0852      	lsrs	r2, r2, #1
 800268e:	429a      	cmp	r2, r3
 8002690:	dd1f      	ble.n	80026d2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x15e>
						pack_num[pack_num_len++] = (((uint16_t)data[i*2]) << 8) | (data[i*2+1]);
 8002692:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
 8002696:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 800269a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800269e:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
					for(int i = 0; i < len/2; ++i) {
 80026a2:	3301      	adds	r3, #1
 80026a4:	e7f3      	b.n	800268e <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x11a>
                    current_stage_ = past_stage_;
 80026a6:	69a0      	ldr	r0, [r4, #24]
 80026a8:	7912      	ldrb	r2, [r2, #4]
 80026aa:	f8c4 0013 	str.w	r0, [r4, #19]
 80026ae:	711a      	strb	r2, [r3, #4]
 80026b0:	e7c1      	b.n	8002636 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0xc2>
                    if(data != nullptr)
 80026b2:	b115      	cbz	r5, 80026ba <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x146>
                        delete[] data;
 80026b4:	4628      	mov	r0, r5
 80026b6:	f005 fc93 	bl	8007fe0 <_ZdaPv>
                    current_stage_.stade_communication = SC_DOWNTIME;
 80026ba:	2300      	movs	r3, #0
                    create_disconnet_packet(true);
 80026bc:	2101      	movs	r1, #1
                    current_stage_.stade_communication = SC_DOWNTIME;
 80026be:	7523      	strb	r3, [r4, #20]
                    create_disconnet_packet(true);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff f9f5 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                    set_LoRa_mode_send(true);
 80026c6:	4620      	mov	r0, r4
 80026c8:	2101      	movs	r1, #1
 80026ca:	f7ff fbab 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    error = 126;
 80026ce:	207e      	movs	r0, #126	; 0x7e
 80026d0:	e759      	b.n	8002586 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
                    pop_num_packet(pack_num, pack_num_len);
 80026d2:	4631      	mov	r1, r6
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7ff fa9b 	bl	8001c10 <_ZN17LoRa_contact_data14pop_num_packetERKSt5arrayItLj15EEh>
                    if(data != nullptr)
 80026da:	b115      	cbz	r5, 80026e2 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x16e>
                        delete[] data;
 80026dc:	4628      	mov	r0, r5
 80026de:	f005 fc7f 	bl	8007fe0 <_ZdaPv>
                    create_data_packet();
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff f918 	bl	8001918 <_ZN17LoRa_contact_data18create_data_packetEv>
                    set_LoRa_mode_send(true);
 80026e8:	2101      	movs	r1, #1
 80026ea:	e76c      	b.n	80025c6 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x52>
                if(!use_past_stage) {
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	f47f af5b 	bne.w	80025a8 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x34>
                    use_past_stage = true;
 80026f2:	2301      	movs	r3, #1
                    error = work_contact_system();
 80026f4:	4620      	mov	r0, r4
                    use_past_stage = true;
 80026f6:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 80026f8:	f7ff fce0 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 80026fc:	7765      	strb	r5, [r4, #29]
    return error;
 80026fe:	e742      	b.n	8002586 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control+0x12>
 8002700:	200023a4 	.word	0x200023a4

08002704 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 8002704:	78cb      	ldrb	r3, [r1, #3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d004      	beq.n	8002714 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x10>
 800270a:	2b02      	cmp	r3, #2
 800270c:	d004      	beq.n	8002718 <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x14>
 800270e:	b92b      	cbnz	r3, 800271c <_ZN17LoRa_contact_data13init_exchangeER13Stage_control+0x18>
        error = init_exchange_boardcast(use_stage);
 8002710:	f7ff bbb8 	b.w	8001e84 <_ZN17LoRa_contact_data23init_exchange_boardcastER13Stage_control>
        error = init_exchange_wait_confirmation(use_stage);
 8002714:	f7ff be92 	b.w	800243c <_ZN17LoRa_contact_data31init_exchange_wait_confirmationER13Stage_control>
        error = init_exchange_wait_numbers(use_stage);
 8002718:	f7ff bf2c 	b.w	8002574 <_ZN17LoRa_contact_data26init_exchange_wait_numbersER13Stage_control>
}
 800271c:	2078      	movs	r0, #120	; 0x78
 800271e:	4770      	bx	lr

08002720 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>:
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch (module_state_) {
 8002724:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 8002726:	4604      	mov	r4, r0
    switch (module_state_) {
 8002728:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_connection_wait_request(Stage_control& use_stage) {
 800272a:	b085      	sub	sp, #20
    switch (module_state_) {
 800272c:	d01f      	beq.n	800276e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4e>
 800272e:	2b02      	cmp	r3, #2
 8002730:	d003      	beq.n	800273a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x1a>
 8002732:	20d4      	movs	r0, #212	; 0xd4
}
 8002734:	b005      	add	sp, #20
 8002736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!packet_dont_correct(true)) {
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	f7ff f9e3 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002742:	2800      	cmp	r0, #0
 8002744:	d13b      	bne.n	80027be <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x9e>
            if(!packet_dont_correct(true, true)) {
 8002746:	2201      	movs	r2, #1
 8002748:	4620      	mov	r0, r4
 800274a:	4611      	mov	r1, r2
 800274c:	f7ff f9dc 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 8002750:	4605      	mov	r5, r0
 8002752:	b958      	cbnz	r0, 800276c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                if (send_wait_reset_packet_)
 8002754:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
 8002758:	b143      	cbz	r3, 800276c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_connect) {
 800275a:	f003 ffcd 	bl	80066f8 <HAL_GetTick>
 800275e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002762:	1ac0      	subs	r0, r0, r3
 8002764:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002768:	4298      	cmp	r0, r3
 800276a:	d204      	bcs.n	8002776 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x56>
                        set_LoRa_mode_receive();
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff faf1 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002772:	2000      	movs	r0, #0
 8002774:	e7de      	b.n	8002734 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                        if(send_packet_amt_ < packet_constraints_.R_wait_connect) {
 8002776:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 800277a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800277e:	429a      	cmp	r2, r3
 8002780:	d907      	bls.n	8002792 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x72>
                            ++send_packet_amt_;
 8002782:	3301      	adds	r3, #1
 8002784:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002788:	4629      	mov	r1, r5
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff fb4a 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002790:	e7ef      	b.n	8002772 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                            if(!use_past_stage)
 8002792:	7f61      	ldrb	r1, [r4, #29]
                            send_packet_amt_ = 0;
 8002794:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                            if(!use_past_stage)
 8002798:	f104 0218 	add.w	r2, r4, #24
 800279c:	f104 0313 	add.w	r3, r4, #19
 80027a0:	b939      	cbnz	r1, 80027b2 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x92>
                                past_stage_ = current_stage_;
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	61a0      	str	r0, [r4, #24]
 80027a6:	791b      	ldrb	r3, [r3, #4]
 80027a8:	7113      	strb	r3, [r2, #4]
                            current_stage_.connection = C_QUEUE_CHECK;
 80027aa:	2300      	movs	r3, #0
                            error = 213;
 80027ac:	20d5      	movs	r0, #213	; 0xd5
                            current_stage_.connection = C_QUEUE_CHECK;
 80027ae:	7563      	strb	r3, [r4, #21]
 80027b0:	e7c0      	b.n	8002734 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
                                current_stage_ = past_stage_;
 80027b2:	69a0      	ldr	r0, [r4, #24]
 80027b4:	7912      	ldrb	r2, [r2, #4]
 80027b6:	f8c4 0013 	str.w	r0, [r4, #19]
 80027ba:	711a      	strb	r2, [r3, #4]
 80027bc:	e7f5      	b.n	80027aa <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x8a>
            if(check_packet_type(Packet_Type::CONNECTION, {0x00})) {
 80027be:	2500      	movs	r5, #0
 80027c0:	f10d 060f 	add.w	r6, sp, #15
 80027c4:	4632      	mov	r2, r6
 80027c6:	4629      	mov	r1, r5
 80027c8:	4620      	mov	r0, r4
 80027ca:	f88d 500f 	strb.w	r5, [sp, #15]
 80027ce:	f7ff f9e3 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d059      	beq.n	800288a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x16a>
                uint8_t len = 1;
 80027d6:	f04f 0801 	mov.w	r8, #1
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80027da:	f104 0920 	add.w	r9, r4, #32
 80027de:	9600      	str	r6, [sp, #0]
 80027e0:	ab03      	add	r3, sp, #12
 80027e2:	4649      	mov	r1, r9
 80027e4:	482e      	ldr	r0, [pc, #184]	; (80028a0 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x180>)
                send_packet_amt_ = 0;
 80027e6:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                send_wait_reset_packet_ = false;
 80027ea:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80027ee:	f10d 020e 	add.w	r2, sp, #14
                uint8_t data[1] = {0};
 80027f2:	f88d 500c 	strb.w	r5, [sp, #12]
                uint8_t com = 0x00;
 80027f6:	f88d 500e 	strb.w	r5, [sp, #14]
                uint8_t len = 1;
 80027fa:	f88d 800f 	strb.w	r8, [sp, #15]
                if (packet_connection.get_packet_data(last_receive_packet_, &com, data, &len) != 0) {
 80027fe:	f002 ff73 	bl	80056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>
                if(data[0] == 0xFF) {
 8002802:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002806:	f104 0718 	add.w	r7, r4, #24
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	f104 0613 	add.w	r6, r4, #19
 8002810:	d121      	bne.n	8002856 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x136>
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002812:	4649      	mov	r1, r9
 8002814:	4823      	ldr	r0, [pc, #140]	; (80028a4 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x184>)
					start_connect_ = true;
 8002816:	f884 8137 	strb.w	r8, [r4, #311]	; 0x137
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 800281a:	f002 fd7d 	bl	8005318 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>
                    create_connect_packet(send_packet_len, true);
 800281e:	4642      	mov	r2, r8
 8002820:	f894 1134 	ldrb.w	r1, [r4, #308]	; 0x134
                    connect_adr_ = packet_analyzer.get_sour_adr(last_receive_packet_); // (?) -----
 8002824:	60a0      	str	r0, [r4, #8]
                    create_connect_packet(send_packet_len, true);
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe fffa 	bl	8001820 <_ZN17LoRa_contact_data21create_connect_packetEhb>
                    set_LoRa_mode_send();
 800282c:	4629      	mov	r1, r5
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff faf8 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                    if(!use_past_stage)
 8002834:	7f63      	ldrb	r3, [r4, #29]
 8002836:	b943      	cbnz	r3, 800284a <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x12a>
                        past_stage_ = current_stage_;
 8002838:	6830      	ldr	r0, [r6, #0]
 800283a:	61a0      	str	r0, [r4, #24]
 800283c:	7933      	ldrb	r3, [r6, #4]
 800283e:	713b      	strb	r3, [r7, #4]
                    current_stage_.type_communication = TC_INITIATOR;
 8002840:	2300      	movs	r3, #0
 8002842:	74e3      	strb	r3, [r4, #19]
                    current_stage_.stade_communication = SC_CONNECTION;
 8002844:	2301      	movs	r3, #1
 8002846:	82a3      	strh	r3, [r4, #20]
 8002848:	e793      	b.n	8002772 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x52>
                        current_stage_ = past_stage_;
 800284a:	69a0      	ldr	r0, [r4, #24]
 800284c:	793b      	ldrb	r3, [r7, #4]
 800284e:	f8c4 0013 	str.w	r0, [r4, #19]
 8002852:	7133      	strb	r3, [r6, #4]
 8002854:	e7f4      	b.n	8002840 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x120>
                    if(!use_past_stage)
 8002856:	7f62      	ldrb	r2, [r4, #29]
 8002858:	b98a      	cbnz	r2, 800287e <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x15e>
                        past_stage_ = current_stage_;
 800285a:	6830      	ldr	r0, [r6, #0]
 800285c:	61a0      	str	r0, [r4, #24]
 800285e:	7932      	ldrb	r2, [r6, #4]
 8002860:	713a      	strb	r2, [r7, #4]
                    current_stage_.exchange = E_EXPECTATION;
 8002862:	2500      	movs	r5, #0
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002864:	2202      	movs	r2, #2
                    create_connect_packet();
 8002866:	4629      	mov	r1, r5
                    current_stage_.stade_communication = SC_EXCHANGE;
 8002868:	7522      	strb	r2, [r4, #20]
                    create_connect_packet();
 800286a:	4620      	mov	r0, r4
 800286c:	462a      	mov	r2, r5
                    current_stage_.exchange = E_EXPECTATION;
 800286e:	75a5      	strb	r5, [r4, #22]
                    expected_amt_packet_ = data[0];
 8002870:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                    amt_packet_ = 0;
 8002874:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                    create_connect_packet();
 8002878:	f7fe ffd2 	bl	8001820 <_ZN17LoRa_contact_data21create_connect_packetEhb>
 800287c:	e784      	b.n	8002788 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x68>
                        current_stage_ = past_stage_;
 800287e:	69a0      	ldr	r0, [r4, #24]
 8002880:	793a      	ldrb	r2, [r7, #4]
 8002882:	f8c4 0013 	str.w	r0, [r4, #19]
 8002886:	7132      	strb	r2, [r6, #4]
 8002888:	e7eb      	b.n	8002862 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x142>
                if(!use_past_stage) {
 800288a:	7f65      	ldrb	r5, [r4, #29]
 800288c:	2d00      	cmp	r5, #0
 800288e:	f47f af6d 	bne.w	800276c <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x4c>
                    use_past_stage = true;
 8002892:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002894:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002896:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002898:	f7ff fc10 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 800289c:	7765      	strb	r5, [r4, #29]
    return error;
 800289e:	e749      	b.n	8002734 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control+0x14>
 80028a0:	200023a4 	.word	0x200023a4
 80028a4:	20002388 	.word	0x20002388

080028a8 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control>:
    switch (use_stage.connection) {
 80028a8:	788b      	ldrb	r3, [r1, #2]
 80028aa:	b11b      	cbz	r3, 80028b4 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0xc>
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d003      	beq.n	80028b8 <_ZN17LoRa_contact_data16recip_connectionER13Stage_control+0x10>
}
 80028b0:	20d2      	movs	r0, #210	; 0xd2
 80028b2:	4770      	bx	lr
        error = recip_connection_queue_check(use_stage);
 80028b4:	f7ff ba32 	b.w	8001d1c <_ZN17LoRa_contact_data28recip_connection_queue_checkER13Stage_control>
        error = recip_connection_wait_request(use_stage);
 80028b8:	f7ff bf32 	b.w	8002720 <_ZN17LoRa_contact_data29recip_connection_wait_requestER13Stage_control>

080028bc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>:
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 80028bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (module_state_) {
 80028be:	7c85      	ldrb	r5, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_expect(Stage_control& use_stage) {
 80028c0:	4604      	mov	r4, r0
    switch (module_state_) {
 80028c2:	2d01      	cmp	r5, #1
 80028c4:	d013      	beq.n	80028ee <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x32>
 80028c6:	2d02      	cmp	r5, #2
 80028c8:	d002      	beq.n	80028d0 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x14>
 80028ca:	20dd      	movs	r0, #221	; 0xdd
}
 80028cc:	b002      	add	sp, #8
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
        if(!packet_dont_correct()) {
 80028d0:	2200      	movs	r2, #0
 80028d2:	4611      	mov	r1, r2
 80028d4:	f7ff f918 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80028d8:	bb38      	cbnz	r0, 800292a <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x6e>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_data_pack) {
 80028da:	f003 ff0d 	bl	80066f8 <HAL_GetTick>
 80028de:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80028e2:	1ac0      	subs	r0, r0, r3
 80028e4:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 80028e8:	4298      	cmp	r0, r3
 80028ea:	d203      	bcs.n	80028f4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x38>
                set_LoRa_mode_receive();
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff fa31 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
 80028f2:	e037      	b.n	8002964 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                if(!use_past_stage)
 80028f4:	7f61      	ldrb	r1, [r4, #29]
 80028f6:	f104 0218 	add.w	r2, r4, #24
 80028fa:	f104 0313 	add.w	r3, r4, #19
 80028fe:	b971      	cbnz	r1, 800291e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x62>
                    past_stage_ = current_stage_;
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	61a0      	str	r0, [r4, #24]
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	7113      	strb	r3, [r2, #4]
                current_stage_.stade_communication = SC_DOWNTIME;
 8002908:	2500      	movs	r5, #0
                create_disconnet_packet(true);
 800290a:	2101      	movs	r1, #1
 800290c:	4620      	mov	r0, r4
                current_stage_.stade_communication = SC_DOWNTIME;
 800290e:	7525      	strb	r5, [r4, #20]
                create_disconnet_packet(true);
 8002910:	f7ff f8ce 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                set_LoRa_mode_send(true);
 8002914:	2101      	movs	r1, #1
                    set_LoRa_mode_send();
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fa84 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 800291c:	e022      	b.n	8002964 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa8>
                    current_stage_ = past_stage_;
 800291e:	69a0      	ldr	r0, [r4, #24]
 8002920:	7912      	ldrb	r2, [r2, #4]
 8002922:	f8c4 0013 	str.w	r0, [r4, #19]
 8002926:	711a      	strb	r2, [r3, #4]
 8002928:	e7ee      	b.n	8002908 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x4c>
            if(check_packet_type(Packet_Type::CONNECTION, {0x03})) {
 800292a:	2603      	movs	r6, #3
 800292c:	2100      	movs	r1, #0
 800292e:	4620      	mov	r0, r4
 8002930:	f10d 0207 	add.w	r2, sp, #7
 8002934:	f88d 6007 	strb.w	r6, [sp, #7]
 8002938:	f7ff f92e 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 800293c:	b1d0      	cbz	r0, 8002974 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xb8>
                create_amt_packet();
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff f80e 	bl	8001960 <_ZN17LoRa_contact_data17create_amt_packetEv>
                set_LoRa_mode_send();
 8002944:	2100      	movs	r1, #0
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff fa6c 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 800294c:	7f61      	ldrb	r1, [r4, #29]
 800294e:	f104 0218 	add.w	r2, r4, #24
 8002952:	f104 0313 	add.w	r3, r4, #19
 8002956:	b939      	cbnz	r1, 8002968 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xac>
                    past_stage_ = current_stage_;
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	61a0      	str	r0, [r4, #24]
 800295c:	791b      	ldrb	r3, [r3, #4]
 800295e:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_WAITING_REACTION;
 8002960:	2301      	movs	r3, #1
 8002962:	75a3      	strb	r3, [r4, #22]
    uint32_t error = 0;
 8002964:	2000      	movs	r0, #0
 8002966:	e7b1      	b.n	80028cc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002968:	69a0      	ldr	r0, [r4, #24]
 800296a:	7912      	ldrb	r2, [r2, #4]
 800296c:	f8c4 0013 	str.w	r0, [r4, #19]
 8002970:	711a      	strb	r2, [r3, #4]
 8002972:	e7f5      	b.n	8002960 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xa4>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 8002974:	4629      	mov	r1, r5
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff f900 	bl	8001b7c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 800297c:	b190      	cbz	r0, 80029a4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xe8>
                if(reciev_packet_len == CONTACT_DATA_MAX_PACKET) {
 800297e:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002982:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
				reciev_packet_[reciev_packet_len++] = last_receive_packet_;
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800298c:	f884 2135 	strb.w	r2, [r4, #309]	; 0x135
 8002990:	f104 0120 	add.w	r1, r4, #32
 8002994:	f001 fb7f 	bl	8004096 <_ZN11LoRa_packetaSERKS_>
                ++amt_packet_;
 8002998:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800299c:	3301      	adds	r3, #1
 800299e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80029a2:	e7a3      	b.n	80028ec <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                    check_packet_type(Packet_Type::SENSOR) ||
 80029a4:	2101      	movs	r1, #1
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7ff f8e8 	bl	8001b7c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
            else if(check_packet_type(Packet_Type::DEVICE) ||
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d1e6      	bne.n	800297e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                    check_packet_type(Packet_Type::SYSTEM)) {
 80029b0:	4631      	mov	r1, r6
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff f8e2 	bl	8001b7c <_ZN17LoRa_contact_data17check_packet_typeE11Packet_Type>
                    check_packet_type(Packet_Type::SENSOR) ||
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d1e0      	bne.n	800297e <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0xc2>
                if(past_stage_.type_communication == TC_INITIATOR) {
 80029bc:	7e25      	ldrb	r5, [r4, #24]
 80029be:	b90d      	cbnz	r5, 80029c4 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x108>
                    set_LoRa_mode_send();
 80029c0:	4629      	mov	r1, r5
 80029c2:	e7a8      	b.n	8002916 <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x5a>
                    if(!use_past_stage) {
 80029c4:	7f65      	ldrb	r5, [r4, #29]
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	d190      	bne.n	80028ec <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x30>
                        use_past_stage = true;
 80029ca:	2301      	movs	r3, #1
                        error = work_contact_system();
 80029cc:	4620      	mov	r0, r4
                        use_past_stage = true;
 80029ce:	7763      	strb	r3, [r4, #29]
                        error = work_contact_system();
 80029d0:	f7ff fb74 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                        use_past_stage = false;
 80029d4:	7765      	strb	r5, [r4, #29]
    return error;
 80029d6:	e779      	b.n	80028cc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control+0x10>

080029d8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>:
    switch (module_state_) {
 80029d8:	7c83      	ldrb	r3, [r0, #18]
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 80029da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (module_state_) {
 80029dc:	2b01      	cmp	r3, #1
uint32_t LoRa_contact_data::recip_exchange_wait_reaction(Stage_control& use_stage) {
 80029de:	4604      	mov	r4, r0
    switch (module_state_) {
 80029e0:	d015      	beq.n	8002a0e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x36>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d002      	beq.n	80029ec <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x14>
 80029e6:	20de      	movs	r0, #222	; 0xde
}
 80029e8:	b003      	add	sp, #12
 80029ea:	bd30      	pop	{r4, r5, pc}
        if(!packet_dont_correct()) {
 80029ec:	2200      	movs	r2, #0
 80029ee:	4611      	mov	r1, r2
 80029f0:	f7ff f88a 	bl	8001b08 <_ZN17LoRa_contact_data19packet_dont_correctEbb>
 80029f4:	4605      	mov	r5, r0
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d13f      	bne.n	8002a7a <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xa2>
            if(HAL_GetTick() - time_last_packet_ < time_constraints_.R_correct_pack) {
 80029fa:	f003 fe7d 	bl	80066f8 <HAL_GetTick>
 80029fe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002a02:	1ac0      	subs	r0, r0, r3
 8002a04:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8002a08:	4298      	cmp	r0, r3
 8002a0a:	d204      	bcs.n	8002a16 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3e>
                set_LoRa_mode_receive();
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff f9a1 	bl	8001d54 <_ZN17LoRa_contact_data21set_LoRa_mode_receiveEv>
    uint32_t error = 0;
 8002a12:	2000      	movs	r0, #0
 8002a14:	e7e8      	b.n	80029e8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                if(send_packet_amt_ < packet_constraints_.R_correct_pack) {
 8002a16:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
 8002a1a:	f894 2169 	ldrb.w	r2, [r4, #361]	; 0x169
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d907      	bls.n	8002a32 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x5a>
                    ++send_packet_amt_;
 8002a22:	3301      	adds	r3, #1
                    set_LoRa_mode_send();
 8002a24:	4629      	mov	r1, r5
 8002a26:	4620      	mov	r0, r4
                    ++send_packet_amt_;
 8002a28:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
                    set_LoRa_mode_send();
 8002a2c:	f7ff f9fa 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
 8002a30:	e7ef      	b.n	8002a12 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                    if(expected_amt_packet_ != reciev_packet_len)
 8002a32:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002a36:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d053      	beq.n	8002ae6 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10e>
                        if(!use_past_stage)
 8002a3e:	7f61      	ldrb	r1, [r4, #29]
                        send_packet_amt_ = 0;
 8002a40:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                        if(!use_past_stage)
 8002a44:	f104 0218 	add.w	r2, r4, #24
 8002a48:	f104 0313 	add.w	r3, r4, #19
 8002a4c:	b979      	cbnz	r1, 8002a6e <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x96>
                            past_stage_ = current_stage_;
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	61a0      	str	r0, [r4, #24]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	7113      	strb	r3, [r2, #4]
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002a56:	2300      	movs	r3, #0
                        create_disconnet_packet(true);
 8002a58:	2101      	movs	r1, #1
                        current_stage_.stade_communication = SC_DOWNTIME;
 8002a5a:	7523      	strb	r3, [r4, #20]
                        create_disconnet_packet(true);
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f7ff f827 	bl	8001ab0 <_ZN17LoRa_contact_data23create_disconnet_packetEb>
                        set_LoRa_mode_send(true);
 8002a62:	4620      	mov	r0, r4
 8002a64:	2101      	movs	r1, #1
 8002a66:	f7ff f9dd 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                        error = 223;
 8002a6a:	20df      	movs	r0, #223	; 0xdf
 8002a6c:	e7bc      	b.n	80029e8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                            current_stage_ = past_stage_;
 8002a6e:	69a0      	ldr	r0, [r4, #24]
 8002a70:	7912      	ldrb	r2, [r2, #4]
 8002a72:	f8c4 0013 	str.w	r0, [r4, #19]
 8002a76:	711a      	strb	r2, [r3, #4]
 8002a78:	e7ed      	b.n	8002a56 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x7e>
            if(check_packet_type(Packet_Type::CONNECTION, {0x05})) {
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f10d 0207 	add.w	r2, sp, #7
 8002a84:	f88d 3007 	strb.w	r3, [sp, #7]
 8002a88:	f7ff f886 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	b1f0      	cbz	r0, 8002ace <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xf6>
                send_packet_amt_ = 0;
 8002a90:	2500      	movs	r5, #0
                create_number_packet();
 8002a92:	4620      	mov	r0, r4
                send_packet_amt_ = 0;
 8002a94:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                create_number_packet();
 8002a98:	f7fe ff96 	bl	80019c8 <_ZN17LoRa_contact_data20create_number_packetEv>
                set_LoRa_mode_send();
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff f9c0 	bl	8001e24 <_ZN17LoRa_contact_data18set_LoRa_mode_sendEb>
                if(!use_past_stage)
 8002aa4:	7f61      	ldrb	r1, [r4, #29]
                amt_packet_ = 0;
 8002aa6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
                if(!use_past_stage)
 8002aaa:	f104 0218 	add.w	r2, r4, #24
 8002aae:	f104 0313 	add.w	r3, r4, #19
 8002ab2:	b931      	cbnz	r1, 8002ac2 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xea>
                    past_stage_ = current_stage_;
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	61a0      	str	r0, [r4, #24]
 8002ab8:	791b      	ldrb	r3, [r3, #4]
 8002aba:	7113      	strb	r3, [r2, #4]
                current_stage_.exchange = E_EXPECTATION;
 8002abc:	2000      	movs	r0, #0
 8002abe:	75a0      	strb	r0, [r4, #22]
 8002ac0:	e792      	b.n	80029e8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>
                    current_stage_ = past_stage_;
 8002ac2:	69a0      	ldr	r0, [r4, #24]
 8002ac4:	7912      	ldrb	r2, [r2, #4]
 8002ac6:	f8c4 0013 	str.w	r0, [r4, #19]
 8002aca:	711a      	strb	r2, [r3, #4]
 8002acc:	e7f6      	b.n	8002abc <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0xe4>
            else if(check_packet_type(Packet_Type::CONNECTION, {0x08})) {
 8002ace:	2308      	movs	r3, #8
 8002ad0:	4601      	mov	r1, r0
 8002ad2:	f10d 0207 	add.w	r2, sp, #7
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f88d 3007 	strb.w	r3, [sp, #7]
 8002adc:	f7ff f85c 	bl	8001b98 <_ZN17LoRa_contact_data17check_packet_typeE11Packet_TypeRKh>
 8002ae0:	b140      	cbz	r0, 8002af4 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x11c>
                send_packet_amt_ = 0;
 8002ae2:	f884 5164 	strb.w	r5, [r4, #356]	; 0x164
                sort_num_packet();
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff f8d4 	bl	8001c94 <_ZN17LoRa_contact_data15sort_num_packetEv>
                contact_complete();
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff fa29 	bl	8001f44 <_ZN17LoRa_contact_data16contact_completeEv>
 8002af2:	e78e      	b.n	8002a12 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x3a>
                if(!use_past_stage) {
 8002af4:	7f65      	ldrb	r5, [r4, #29]
 8002af6:	2d00      	cmp	r5, #0
 8002af8:	d188      	bne.n	8002a0c <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x34>
                    use_past_stage = true;
 8002afa:	2301      	movs	r3, #1
                    error = work_contact_system();
 8002afc:	4620      	mov	r0, r4
                    use_past_stage = true;
 8002afe:	7763      	strb	r3, [r4, #29]
                    error = work_contact_system();
 8002b00:	f7ff fadc 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
                    use_past_stage = false;
 8002b04:	7765      	strb	r5, [r4, #29]
    return error;
 8002b06:	e76f      	b.n	80029e8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control+0x10>

08002b08 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control>:
    switch (use_stage.exchange) {
 8002b08:	78cb      	ldrb	r3, [r1, #3]
 8002b0a:	b11b      	cbz	r3, 8002b14 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0xc>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d003      	beq.n	8002b18 <_ZN17LoRa_contact_data14recip_exchangeER13Stage_control+0x10>
}
 8002b10:	20dc      	movs	r0, #220	; 0xdc
 8002b12:	4770      	bx	lr
        error = recip_exchange_expect(use_stage);
 8002b14:	f7ff bed2 	b.w	80028bc <_ZN17LoRa_contact_data21recip_exchange_expectER13Stage_control>
        error = recip_exchange_wait_reaction(use_stage);
 8002b18:	f7ff bf5e 	b.w	80029d8 <_ZN17LoRa_contact_data28recip_exchange_wait_reactionER13Stage_control>

08002b1c <Get_control_module_info_from_main>:


extern "C" {

void Get_control_module_info_from_main(uint32_t* id_main) {
	control_module_adr = id_main[0];
 8002b1c:	6802      	ldr	r2, [r0, #0]
 8002b1e:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <Get_control_module_info_from_main+0x10>)
 8002b20:	601a      	str	r2, [r3, #0]
	control_module_channel = id_main[1];
 8002b22:	6842      	ldr	r2, [r0, #4]
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <Get_control_module_info_from_main+0x14>)
 8002b26:	601a      	str	r2, [r3, #0]
}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	2000031c 	.word	0x2000031c
 8002b30:	20000320 	.word	0x20000320

08002b34 <Send_registration_packet>:

void Send_registration_packet() {
	grow_device_interface.send_registration_packet(grow_device, contact_data);
 8002b34:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <Send_registration_packet+0xc>)
 8002b36:	4903      	ldr	r1, [pc, #12]	; (8002b44 <Send_registration_packet+0x10>)
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <Send_registration_packet+0x14>)
 8002b3a:	f7fe ba09 	b.w	8000f50 <_ZN21Grow_device_interface24send_registration_packetERK11Grow_deviceR17LoRa_contact_data>
 8002b3e:	bf00      	nop
 8002b40:	200001ac 	.word	0x200001ac
 8002b44:	20000328 	.word	0x20000328
 8002b48:	200001a7 	.word	0x200001a7

08002b4c <Init_lora_module>:
}

bool Init_lora_module(SPI_HandleTypeDef *spi) {
 8002b4c:	4601      	mov	r1, r0
	return contact_data.init_lora_module(spi);
 8002b4e:	4801      	ldr	r0, [pc, #4]	; (8002b54 <Init_lora_module+0x8>)
 8002b50:	f7fe bcf6 	b.w	8001540 <_ZN17LoRa_contact_data16init_lora_moduleEP19__SPI_HandleTypeDef>
 8002b54:	200001ac 	.word	0x200001ac

08002b58 <Begin_lora_module>:
}
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	4615      	mov	r5, r2
 8002b5e:	461e      	mov	r6, r3
	grow_device.set_system_id(MODULE_ID);
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <Begin_lora_module+0x6c>)
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002b62:	b087      	sub	sp, #28
	grow_device.set_system_id(MODULE_ID);
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4817      	ldr	r0, [pc, #92]	; (8002bc8 <Begin_lora_module+0x70>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
uint8_t Begin_lora_module(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8002b6c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	grow_device.set_system_id(MODULE_ID);
 8002b6e:	f7fe f889 	bl	8000c84 <_ZN11Grow_device13set_system_idESt5arrayIhLj12EE>
	contact_data.begin_lora_module(frequency, paboost, signal_power, SF, SBW, sync_word);
 8002b72:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002b76:	4621      	mov	r1, r4
 8002b78:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8002b7c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8002b80:	462a      	mov	r2, r5
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4811      	ldr	r0, [pc, #68]	; (8002bcc <Begin_lora_module+0x74>)
 8002b86:	4633      	mov	r3, r6
 8002b88:	f7fe fce6 	bl	8001558 <_ZN17LoRa_contact_data17begin_lora_moduleEmbhhmh>
	if (control_module_adr == 0x00000000) {
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <Begin_lora_module+0x78>)
 8002b8e:	4c11      	ldr	r4, [pc, #68]	; (8002bd4 <Begin_lora_module+0x7c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b92b      	cbnz	r3, 8002ba0 <Begin_lora_module+0x48>
		current_mode = REGISTRATION_MODE;
 8002b94:	7023      	strb	r3, [r4, #0]
		Send_registration_packet();
 8002b96:	f7ff ffcd 	bl	8002b34 <Send_registration_packet>
		grow_device_interface.load_data(grow_device, contact_data, control_module_adr, control_module_channel);
		current_mode = WORKING_MODE;
		contact_data.wait_recipient(grow_device.get_address_control_module());
	}
	return 0;
}
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	b007      	add	sp, #28
 8002b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		grow_device_interface.load_data(grow_device, contact_data, control_module_adr, control_module_channel);
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <Begin_lora_module+0x80>)
 8002ba2:	4909      	ldr	r1, [pc, #36]	; (8002bc8 <Begin_lora_module+0x70>)
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <Begin_lora_module+0x84>)
 8002ba8:	9200      	str	r2, [sp, #0]
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <Begin_lora_module+0x74>)
 8002bac:	f7fe f996 	bl	8000edc <_ZN21Grow_device_interface9load_dataER11Grow_deviceR17LoRa_contact_datamm>
		current_mode = WORKING_MODE;
 8002bb0:	2301      	movs	r3, #1
		contact_data.wait_recipient(grow_device.get_address_control_module());
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <Begin_lora_module+0x70>)
		current_mode = WORKING_MODE;
 8002bb4:	7023      	strb	r3, [r4, #0]
		contact_data.wait_recipient(grow_device.get_address_control_module());
 8002bb6:	f7fe f889 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4803      	ldr	r0, [pc, #12]	; (8002bcc <Begin_lora_module+0x74>)
 8002bbe:	f7ff f8df 	bl	8001d80 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8002bc2:	e7ea      	b.n	8002b9a <Begin_lora_module+0x42>
 8002bc4:	0800831f 	.word	0x0800831f
 8002bc8:	20000328 	.word	0x20000328
 8002bcc:	200001ac 	.word	0x200001ac
 8002bd0:	2000031c 	.word	0x2000031c
 8002bd4:	20000324 	.word	0x20000324
 8002bd8:	20000320 	.word	0x20000320
 8002bdc:	200001a7 	.word	0x200001a7

08002be0 <Main_cpp>:

void Main_cpp(DevicesDataTypeDef* devices_data) {
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	4604      	mov	r4, r0

	grow_device.set_value(0, devices_data->lamp_d1);
 8002be4:	4d08      	ldr	r5, [pc, #32]	; (8002c08 <Main_cpp+0x28>)
 8002be6:	8802      	ldrh	r2, [r0, #0]
 8002be8:	2100      	movs	r1, #0
 8002bea:	4628      	mov	r0, r5
 8002bec:	f7fe f8a0 	bl	8000d30 <_ZN11Grow_device9set_valueEht>
	grow_device.set_value(1, devices_data->lamp_d2);
 8002bf0:	8862      	ldrh	r2, [r4, #2]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f7fe f89b 	bl	8000d30 <_ZN11Grow_device9set_valueEht>
	grow_device_interface.build_data_packet(grow_device, contact_data);
 8002bfa:	4629      	mov	r1, r5

}
 8002bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	grow_device_interface.build_data_packet(grow_device, contact_data);
 8002c00:	4a02      	ldr	r2, [pc, #8]	; (8002c0c <Main_cpp+0x2c>)
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <Main_cpp+0x30>)
 8002c04:	f7fe bb0c 	b.w	8001220 <_ZN21Grow_device_interface17build_data_packetER11Grow_deviceR17LoRa_contact_data>
 8002c08:	20000328 	.word	0x20000328
 8002c0c:	200001ac 	.word	0x200001ac
 8002c10:	200001a7 	.word	0x200001a7

08002c14 <Contact_group_control_module>:
    NVIC_EnableIRQ(EXTI2_IRQn);
    NVIC_EnableIRQ(EXTI15_10_IRQn);
	// Sleep STM
}

void Contact_group_control_module() {
 8002c14:	b530      	push	{r4, r5, lr}
	contact_status = contact_data.work_contact_system();
 8002c16:	4831      	ldr	r0, [pc, #196]	; (8002cdc <Contact_group_control_module+0xc8>)
void Contact_group_control_module() {
 8002c18:	b085      	sub	sp, #20
	contact_status = contact_data.work_contact_system();
 8002c1a:	f7ff fa4f 	bl	80020bc <_ZN17LoRa_contact_data19work_contact_systemEv>
	switch (current_mode) {
 8002c1e:	4c30      	ldr	r4, [pc, #192]	; (8002ce0 <Contact_group_control_module+0xcc>)
	contact_status = contact_data.work_contact_system();
 8002c20:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <Contact_group_control_module+0xd0>)
 8002c22:	4625      	mov	r5, r4
 8002c24:	6018      	str	r0, [r3, #0]
	switch (current_mode) {
 8002c26:	7823      	ldrb	r3, [r4, #0]
 8002c28:	b11b      	cbz	r3, 8002c32 <Contact_group_control_module+0x1e>
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d026      	beq.n	8002c7c <Contact_group_control_module+0x68>
	        	contact_data.clear_send_packet();
	            contact_data.wait_recipient(grow_device.get_address_control_module());
	        }
		}
	}
}
 8002c2e:	b005      	add	sp, #20
 8002c30:	bd30      	pop	{r4, r5, pc}
			if(contact_data.get_signal_complete()) {
 8002c32:	482a      	ldr	r0, [pc, #168]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c34:	f7fe fd67 	bl	8001706 <_ZN17LoRa_contact_data19get_signal_completeEv>
 8002c38:	b150      	cbz	r0, 8002c50 <Contact_group_control_module+0x3c>
				contact_data.broadcast_receive(); // Ожидаем ответа на запрос или ошибку запроса
 8002c3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c42:	a803      	add	r0, sp, #12
 8002c44:	f002 fb08 	bl	8005258 <_ZN12LoRa_addressC1Ett>
 8002c48:	9903      	ldr	r1, [sp, #12]
 8002c4a:	4824      	ldr	r0, [pc, #144]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c4c:	f7ff f8ae 	bl	8001dac <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
			if(contact_data.get_state_contact() == SC_PACKET_ACCEPTED) {
 8002c50:	4822      	ldr	r0, [pc, #136]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c52:	f7fe fcfe 	bl	8001652 <_ZN17LoRa_contact_data17get_state_contactEv>
 8002c56:	2807      	cmp	r0, #7
 8002c58:	d1e9      	bne.n	8002c2e <Contact_group_control_module+0x1a>
				if(grow_device_interface.check_regist_packet(grow_device, contact_data)) {
 8002c5a:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c5c:	4922      	ldr	r1, [pc, #136]	; (8002ce8 <Contact_group_control_module+0xd4>)
 8002c5e:	4823      	ldr	r0, [pc, #140]	; (8002cec <Contact_group_control_module+0xd8>)
 8002c60:	f7fe fa26 	bl	80010b0 <_ZN21Grow_device_interface19check_regist_packetER11Grow_deviceR17LoRa_contact_data>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d0e2      	beq.n	8002c2e <Contact_group_control_module+0x1a>
					current_mode = WORKING_MODE;
 8002c68:	2301      	movs	r3, #1
					contact_data.wait_recipient(grow_device.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 8002c6a:	481f      	ldr	r0, [pc, #124]	; (8002ce8 <Contact_group_control_module+0xd4>)
					current_mode = WORKING_MODE;
 8002c6c:	702b      	strb	r3, [r5, #0]
					contact_data.wait_recipient(grow_device.get_address_control_module()); // Начинаем слушать на наличие управляющих пакетов
 8002c6e:	f7fe f82d 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 8002c72:	4601      	mov	r1, r0
	            contact_data.wait_recipient(grow_device.get_address_control_module());
 8002c74:	4819      	ldr	r0, [pc, #100]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c76:	f7ff f883 	bl	8001d80 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
}
 8002c7a:	e7d8      	b.n	8002c2e <Contact_group_control_module+0x1a>
	        if(contact_status != 0) {
 8002c7c:	b190      	cbz	r0, 8002ca4 <Contact_group_control_module+0x90>
	        	if(grow_device_interface.check_contact_error(grow_device, contact_data)) {
 8002c7e:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002c80:	4919      	ldr	r1, [pc, #100]	; (8002ce8 <Contact_group_control_module+0xd4>)
 8002c82:	481a      	ldr	r0, [pc, #104]	; (8002cec <Contact_group_control_module+0xd8>)
 8002c84:	f7fe f9d6 	bl	8001034 <_ZN21Grow_device_interface19check_contact_errorER11Grow_deviceR17LoRa_contact_data>
 8002c88:	b1f8      	cbz	r0, 8002cca <Contact_group_control_module+0xb6>
					current_mode = REGISTRATION_MODE;
 8002c8a:	2300      	movs	r3, #0
	        		contact_data.broadcast_receive();
 8002c8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c94:	a803      	add	r0, sp, #12
					current_mode = REGISTRATION_MODE;
 8002c96:	7023      	strb	r3, [r4, #0]
	        		contact_data.broadcast_receive();
 8002c98:	f002 fade 	bl	8005258 <_ZN12LoRa_addressC1Ett>
 8002c9c:	9903      	ldr	r1, [sp, #12]
 8002c9e:	480f      	ldr	r0, [pc, #60]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002ca0:	f7ff f884 	bl	8001dac <_ZN17LoRa_contact_data17broadcast_receiveE12LoRa_address>
	        if(contact_data.get_signal_complete()) {
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002ca6:	f7fe fd2e 	bl	8001706 <_ZN17LoRa_contact_data19get_signal_completeEv>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d0bf      	beq.n	8002c2e <Contact_group_control_module+0x1a>
	        	grow_device_interface.read_received_data_packets(grow_device, contact_data);
 8002cae:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <Contact_group_control_module+0xd4>)
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002cb2:	480e      	ldr	r0, [pc, #56]	; (8002cec <Contact_group_control_module+0xd8>)
 8002cb4:	f7fe fba8 	bl	8001408 <_ZN21Grow_device_interface26read_received_data_packetsER11Grow_deviceR17LoRa_contact_data>
	        	contact_data.clear_send_packet();
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002cba:	f7fe fcbb 	bl	8001634 <_ZN17LoRa_contact_data17clear_send_packetEv>
	            contact_data.wait_recipient(grow_device.get_address_control_module());
 8002cbe:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <Contact_group_control_module+0xd4>)
 8002cc0:	f7fe f804 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	9003      	str	r0, [sp, #12]
 8002cc8:	e7d4      	b.n	8002c74 <Contact_group_control_module+0x60>
	        		contact_data.wait_recipient(grow_device.get_address_control_module());
 8002cca:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <Contact_group_control_module+0xd4>)
 8002ccc:	f7fd fffe 	bl	8000ccc <_ZNK11Grow_device26get_address_control_moduleEv>
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	4802      	ldr	r0, [pc, #8]	; (8002cdc <Contact_group_control_module+0xc8>)
 8002cd4:	f7ff f854 	bl	8001d80 <_ZN17LoRa_contact_data14wait_recipientE12LoRa_address>
 8002cd8:	e7e4      	b.n	8002ca4 <Contact_group_control_module+0x90>
 8002cda:	bf00      	nop
 8002cdc:	200001ac 	.word	0x200001ac
 8002ce0:	20000324 	.word	0x20000324
 8002ce4:	20000318 	.word	0x20000318
 8002ce8:	20000328 	.word	0x20000328
 8002cec:	200001a7 	.word	0x200001a7

08002cf0 <_GLOBAL__sub_I_device_array>:

} // extern "C"
 8002cf0:	b508      	push	{r3, lr}
LoRa_contact_data contact_data;
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <_GLOBAL__sub_I_device_array+0x18>)
 8002cf4:	f7fe fd1e 	bl	8001734 <_ZN17LoRa_contact_dataC1Ev>
} // extern "C"
 8002cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Grow_device grow_device(AMT_COMPONENT, device_array);
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <_GLOBAL__sub_I_device_array+0x1c>)
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <_GLOBAL__sub_I_device_array+0x20>)
 8002d02:	f7fe b8a1 	b.w	8000e48 <_ZN11Grow_deviceC1EhP11Type_device>
 8002d06:	bf00      	nop
 8002d08:	200001ac 	.word	0x200001ac
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000328 	.word	0x20000328

08002d14 <_GLOBAL__sub_D_device_array>:
} // extern "C"
 8002d14:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <_GLOBAL__sub_D_device_array+0x18>)
 8002d18:	6918      	ldr	r0, [r3, #16]
	if (__p)
 8002d1a:	b108      	cbz	r0, 8002d20 <_GLOBAL__sub_D_device_array+0xc>
	::operator delete(__p);
 8002d1c:	f005 f95c 	bl	8007fd8 <_ZdlPv>
 8002d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
LoRa_contact_data contact_data;
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <_GLOBAL__sub_D_device_array+0x1c>)
 8002d26:	f7fe bbe8 	b.w	80014fa <_ZN17LoRa_contact_dataD1Ev>
 8002d2a:	bf00      	nop
 8002d2c:	20000328 	.word	0x20000328
 8002d30:	200001ac 	.word	0x200001ac

08002d34 <_ZN8RegisterC1Ethh>:

//   ----- ----- ----- ---- ----- ----- -----
// ----- ----- ----- Register ----- ----- -----
//   ----- ----- ----- ---- ----- ----- -----

Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8002d34:	2a08      	cmp	r2, #8
 8002d36:	7082      	strb	r2, [r0, #2]
 8002d38:	bf28      	it	cs
 8002d3a:	2208      	movcs	r2, #8
 8002d3c:	2a01      	cmp	r2, #1
 8002d3e:	bf38      	it	cc
 8002d40:	2201      	movcc	r2, #1
 8002d42:	b530      	push	{r4, r5, lr}
    uint8_t bit_in_reg = 8;
    bit_count = value_range(bit_count, 1, bit_in_reg);
    bit_bias = value_range(bit_bias, 0, (bit_in_reg - bit_count));
 8002d44:	2400      	movs	r4, #0
 8002d46:	f1c2 0508 	rsb	r5, r2, #8
 8002d4a:	b2ed      	uxtb	r5, r5
Register::Register(uint16_t address, uint8_t bit_count, uint8_t bit_bias): address_(address), bit_count_(bit_count), bit_bias_(bit_bias) {
 8002d4c:	8001      	strh	r1, [r0, #0]
 8002d4e:	70c3      	strb	r3, [r0, #3]
    uint32_t mask = 0x00;
 8002d50:	4621      	mov	r1, r4
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
        if (i < bit_count)
            mask = (mask << 1) + 1;
        else
            if (i < (bit_count + bit_bias))
 8002d52:	429d      	cmp	r5, r3
 8002d54:	bf94      	ite	ls
 8002d56:	1953      	addls	r3, r2, r5
 8002d58:	18d3      	addhi	r3, r2, r3
        if (i < bit_count)
 8002d5a:	b2e5      	uxtb	r5, r4
 8002d5c:	42aa      	cmp	r2, r5
 8002d5e:	d906      	bls.n	8002d6e <_ZN8RegisterC1Ethh+0x3a>
            mask = (mask << 1) + 1;
 8002d60:	0049      	lsls	r1, r1, #1
 8002d62:	3101      	adds	r1, #1
    for (uint8_t i = 0; i < bit_in_reg; ++i) {
 8002d64:	3401      	adds	r4, #1
 8002d66:	2c08      	cmp	r4, #8
 8002d68:	d1f7      	bne.n	8002d5a <_ZN8RegisterC1Ethh+0x26>
                mask <<= 1;
    }
    mask_ = mask;
 8002d6a:	6041      	str	r1, [r0, #4]
}
 8002d6c:	bd30      	pop	{r4, r5, pc}
            if (i < (bit_count + bit_bias))
 8002d6e:	42a3      	cmp	r3, r4
                mask <<= 1;
 8002d70:	bfc8      	it	gt
 8002d72:	0049      	lslgt	r1, r1, #1
 8002d74:	e7f6      	b.n	8002d64 <_ZN8RegisterC1Ethh+0x30>

08002d76 <_ZNK8Register7addressEv>:

uint16_t Register::address() const {
    return address_;
}
 8002d76:	8800      	ldrh	r0, [r0, #0]
 8002d78:	4770      	bx	lr

08002d7a <_ZNK8Register4maskEv>:
uint8_t Register::bit_bias() const {
    return bit_bias_;
}
uint32_t Register::mask() const {
    return mask_;
}
 8002d7a:	6840      	ldr	r0, [r0, #4]
 8002d7c:	4770      	bx	lr

08002d7e <_ZeqRK8RegisterS1_>:

bool operator==(const Register& left, const Register& right) {
    if(left.address_ != right.address_)
 8002d7e:	8802      	ldrh	r2, [r0, #0]
 8002d80:	880b      	ldrh	r3, [r1, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d10d      	bne.n	8002da2 <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_count_ != right.bit_count_)
 8002d86:	7882      	ldrb	r2, [r0, #2]
 8002d88:	788b      	ldrb	r3, [r1, #2]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d109      	bne.n	8002da2 <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.bit_bias_ != right.bit_bias_)
 8002d8e:	78c2      	ldrb	r2, [r0, #3]
 8002d90:	78cb      	ldrb	r3, [r1, #3]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d105      	bne.n	8002da2 <_ZeqRK8RegisterS1_+0x24>
        return false;
    if(left.mask_ != right.mask_)
 8002d96:	6840      	ldr	r0, [r0, #4]
 8002d98:	684b      	ldr	r3, [r1, #4]
 8002d9a:	1ac3      	subs	r3, r0, r3
 8002d9c:	4258      	negs	r0, r3
 8002d9e:	4158      	adcs	r0, r3
 8002da0:	4770      	bx	lr
        return false;
 8002da2:	2000      	movs	r0, #0
        return false;
    return true;
}
 8002da4:	4770      	bx	lr

08002da6 <_ZneRK8RegisterS1_>:

bool operator!=(const Register& left, const Register& right) {
 8002da6:	b508      	push	{r3, lr}
    return !(left == right);
 8002da8:	f7ff ffe9 	bl	8002d7e <_ZeqRK8RegisterS1_>
 8002dac:	f080 0001 	eor.w	r0, r0, #1
}
 8002db0:	b2c0      	uxtb	r0, r0
 8002db2:	bd08      	pop	{r3, pc}

08002db4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>:
                             const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
}

bool Address_field::init_address_field(const Register *registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
                                       const uint32_t max_value, const uint32_t *reserved_value, const uint32_t reserv_count) {
 8002db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db8:	f89d c018 	ldrb.w	ip, [sp, #24]
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	e9dd 5707 	ldrd	r5, r7, [sp, #28]
    if ((mode != 'r') && (mode != 'w') && (mode != 'c'))
 8002dc2:	f1ac 0063 	sub.w	r0, ip, #99	; 0x63
 8002dc6:	b2c6      	uxtb	r6, r0
 8002dc8:	2e14      	cmp	r6, #20
 8002dca:	d838      	bhi.n	8002e3e <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x8a>
 8002dcc:	481d      	ldr	r0, [pc, #116]	; (8002e44 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x90>)
 8002dce:	40f0      	lsrs	r0, r6
 8002dd0:	43c0      	mvns	r0, r0
 8002dd2:	f010 0001 	ands.w	r0, r0, #1
 8002dd6:	d130      	bne.n	8002e3a <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
    uint8_t bit_count = 0;
    uint32_t value = 0;
    mode_ = mode;
    registers_ = registers;
    reg_count_ = reg_count;
    reg_revers_ = reg_revers;
 8002dd8:	7163      	strb	r3, [r4, #5]
    reserved_value_ = reserved_value;
 8002dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    uint8_t bit_count = 0;
 8002ddc:	4606      	mov	r6, r0
    reserved_value_ = reserved_value;
 8002dde:	6123      	str	r3, [r4, #16]
    reserv_count_ = reserv_count;
 8002de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    mode_ = mode;
 8002de2:	f884 c018 	strb.w	ip, [r4, #24]
    reserv_count_ = reserv_count;
 8002de6:	6163      	str	r3, [r4, #20]
    max_address_ = 0;
    for (int i = 0; i < reg_count_; ++i) {
 8002de8:	4603      	mov	r3, r0
    registers_ = registers;
 8002dea:	6021      	str	r1, [r4, #0]
    reg_count_ = reg_count;
 8002dec:	7122      	strb	r2, [r4, #4]
    max_address_ = 0;
 8002dee:	80e0      	strh	r0, [r4, #6]
    return bit_count_;
 8002df0:	f101 0e02 	add.w	lr, r1, #2
    for (int i = 0; i < reg_count_; ++i) {
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dd0d      	ble.n	8002e14 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x60>
        bit_count += registers_[i].bit_count();
 8002df8:	f81e c033 	ldrb.w	ip, [lr, r3, lsl #3]
        if (max_address_ < registers_[i].address())
 8002dfc:	f8b4 8006 	ldrh.w	r8, [r4, #6]
        bit_count += registers_[i].bit_count();
 8002e00:	4466      	add	r6, ip
    return address_;
 8002e02:	f831 c033 	ldrh.w	ip, [r1, r3, lsl #3]
        bit_count += registers_[i].bit_count();
 8002e06:	b2f6      	uxtb	r6, r6
        if (max_address_ < registers_[i].address())
 8002e08:	45e0      	cmp	r8, ip
            max_address_ = registers_[i].address();
 8002e0a:	bf38      	it	cc
 8002e0c:	f8a4 c006 	strhcc.w	ip, [r4, #6]
    for (int i = 0; i < reg_count_; ++i) {
 8002e10:	3301      	adds	r3, #1
 8002e12:	e7ef      	b.n	8002df4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x40>
    }
    for (int i = 0; i < bit_count; ++i)
 8002e14:	2200      	movs	r2, #0
    uint32_t value = 0;
 8002e16:	4613      	mov	r3, r2
    for (int i = 0; i < bit_count; ++i)
 8002e18:	4296      	cmp	r6, r2
 8002e1a:	dd03      	ble.n	8002e24 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x70>
        value = (value << 1) + 1;
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	3301      	adds	r3, #1
    for (int i = 0; i < bit_count; ++i)
 8002e20:	3201      	adds	r2, #1
 8002e22:	e7f9      	b.n	8002e18 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x64>
    min_value_ = value_range(min_value, 0, value);
 8002e24:	429d      	cmp	r5, r3
 8002e26:	bf94      	ite	ls
 8002e28:	60a5      	strls	r5, [r4, #8]
 8002e2a:	60a3      	strhi	r3, [r4, #8]
    if (value < min_value)
 8002e2c:	42bd      	cmp	r5, r7
 8002e2e:	d803      	bhi.n	8002e38 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x84>
    if (value > max_value)
 8002e30:	429f      	cmp	r7, r3
 8002e32:	463d      	mov	r5, r7
 8002e34:	bf28      	it	cs
 8002e36:	461d      	movcs	r5, r3
    max_value_ = value_range(max_value, min_value, value);
 8002e38:	60e5      	str	r5, [r4, #12]
    return false;
}
 8002e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return true;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e7fb      	b.n	8002e3a <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm+0x86>
 8002e42:	bf00      	nop
 8002e44:	00108001 	.word	0x00108001

08002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>:
Address_field::Address_field(const Register* registers, const uint8_t reg_count, const bool reg_revers, const char mode, const uint32_t min_value,
 8002e48:	b530      	push	{r4, r5, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b087      	sub	sp, #28
    init_address_field(registers, reg_count, reg_revers, mode, min_value, max_value, reserved_value, reserv_count);
 8002e4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002e50:	9504      	str	r5, [sp, #16]
 8002e52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002e54:	9503      	str	r5, [sp, #12]
 8002e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e58:	9502      	str	r5, [sp, #8]
 8002e5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002e5c:	9501      	str	r5, [sp, #4]
 8002e5e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8002e62:	9500      	str	r5, [sp, #0]
 8002e64:	f7ff ffa6 	bl	8002db4 <_ZN13Address_field18init_address_fieldEPK8RegisterhbcmmPKmm>
}
 8002e68:	4620      	mov	r0, r4
 8002e6a:	b007      	add	sp, #28
 8002e6c:	bd30      	pop	{r4, r5, pc}

08002e6e <_ZNK13Address_field9get_valueEPKhi>:


uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
    if (register_count < (max_address_ + 1))
 8002e6e:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 8002e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (register_count < (max_address_ + 1))
 8002e72:	4293      	cmp	r3, r2
uint32_t Address_field::get_value(const uint8_t *register_value, int register_count) const {
 8002e74:	4604      	mov	r4, r0
    if (register_count < (max_address_ + 1))
 8002e76:	da27      	bge.n	8002ec8 <_ZNK13Address_field9get_valueEPKhi+0x5a>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 8002e78:	7902      	ldrb	r2, [r0, #4]
 8002e7a:	7940      	ldrb	r0, [r0, #5]
 8002e7c:	b198      	cbz	r0, 8002ea6 <_ZNK13Address_field9get_valueEPKhi+0x38>
        for (int i = 0; i < reg_count_; ++i) {
 8002e7e:	2500      	movs	r5, #0
    uint32_t value = 0;
 8002e80:	4628      	mov	r0, r5
        for (int i = 0; i < reg_count_; ++i) {
 8002e82:	4295      	cmp	r5, r2
 8002e84:	da22      	bge.n	8002ecc <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 8002e86:	6827      	ldr	r7, [r4, #0]
 8002e88:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8002e8c:	78b3      	ldrb	r3, [r6, #2]
 8002e8e:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002e92:	f837 0035 	ldrh.w	r0, [r7, r5, lsl #3]
 8002e96:	6877      	ldr	r7, [r6, #4]
 8002e98:	5c08      	ldrb	r0, [r1, r0]
 8002e9a:	78f6      	ldrb	r6, [r6, #3]
 8002e9c:	4038      	ands	r0, r7
 8002e9e:	40f0      	lsrs	r0, r6
 8002ea0:	4318      	orrs	r0, r3
        for (int i = 0; i < reg_count_; ++i) {
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7ed      	b.n	8002e82 <_ZNK13Address_field9get_valueEPKhi+0x14>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	d310      	bcc.n	8002ecc <_ZNK13Address_field9get_valueEPKhi+0x5e>
            value <<= registers_[i].bit_count();
 8002eaa:	6826      	ldr	r6, [r4, #0]
 8002eac:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
 8002eb0:	78ab      	ldrb	r3, [r5, #2]
 8002eb2:	fa00 f303 	lsl.w	r3, r0, r3
            value |= (register_value[registers_[i].address()] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002eb6:	f836 0032 	ldrh.w	r0, [r6, r2, lsl #3]
 8002eba:	686e      	ldr	r6, [r5, #4]
 8002ebc:	5c08      	ldrb	r0, [r1, r0]
 8002ebe:	78ed      	ldrb	r5, [r5, #3]
 8002ec0:	4030      	ands	r0, r6
 8002ec2:	40e8      	lsrs	r0, r5
 8002ec4:	4318      	orrs	r0, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8002ec6:	e7ee      	b.n	8002ea6 <_ZNK13Address_field9get_valueEPKhi+0x38>
        return -1;
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 8002ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ece <_ZNK13Address_field9set_valueEmPhi>:

bool Address_field::set_value(uint32_t value, uint8_t *register_value, int register_count) const {
 8002ece:	b570      	push	{r4, r5, r6, lr}
    if ((register_count < (max_address_ + 1)) || (mode_ == 'r') ||
 8002ed0:	88c4      	ldrh	r4, [r0, #6]
 8002ed2:	429c      	cmp	r4, r3
 8002ed4:	da58      	bge.n	8002f88 <_ZNK13Address_field9set_valueEmPhi+0xba>
 8002ed6:	7e03      	ldrb	r3, [r0, #24]
 8002ed8:	2b72      	cmp	r3, #114	; 0x72
 8002eda:	d055      	beq.n	8002f88 <_ZNK13Address_field9set_valueEmPhi+0xba>
 8002edc:	6883      	ldr	r3, [r0, #8]
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d852      	bhi.n	8002f88 <_ZNK13Address_field9set_valueEmPhi+0xba>
                (value < min_value_) || (value > max_value_))
 8002ee2:	68c3      	ldr	r3, [r0, #12]
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	d34f      	bcc.n	8002f88 <_ZNK13Address_field9set_valueEmPhi+0xba>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6944      	ldr	r4, [r0, #20]
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d006      	beq.n	8002efe <_ZNK13Address_field9set_valueEmPhi+0x30>
        if (value == reserved_value_[i])
 8002ef0:	6905      	ldr	r5, [r0, #16]
 8002ef2:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8002ef6:	428d      	cmp	r5, r1
 8002ef8:	d046      	beq.n	8002f88 <_ZNK13Address_field9set_valueEmPhi+0xba>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8002efa:	3301      	adds	r3, #1
 8002efc:	e7f6      	b.n	8002eec <_ZNK13Address_field9set_valueEmPhi+0x1e>
            return true;
    if(reg_revers_) {
 8002efe:	7943      	ldrb	r3, [r0, #5]
 8002f00:	b30b      	cbz	r3, 8002f46 <_ZNK13Address_field9set_valueEmPhi+0x78>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8002f02:	7903      	ldrb	r3, [r0, #4]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	d201      	bcs.n	8002f0c <_ZNK13Address_field9set_valueEmPhi+0x3e>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 8002f08:	2000      	movs	r0, #0
}
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 8002f0c:	6804      	ldr	r4, [r0, #0]
 8002f0e:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8002f12:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 8002f16:	6876      	ldr	r6, [r6, #4]
 8002f18:	5d54      	ldrb	r4, [r2, r5]
 8002f1a:	ea24 0406 	bic.w	r4, r4, r6
 8002f1e:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8002f20:	6805      	ldr	r5, [r0, #0]
 8002f22:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8002f26:	78e6      	ldrb	r6, [r4, #3]
 8002f28:	6864      	ldr	r4, [r4, #4]
 8002f2a:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 8002f2e:	40f4      	lsrs	r4, r6
 8002f30:	400c      	ands	r4, r1
 8002f32:	40b4      	lsls	r4, r6
 8002f34:	5d56      	ldrb	r6, [r2, r5]
 8002f36:	4334      	orrs	r4, r6
 8002f38:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 8002f3a:	6804      	ldr	r4, [r0, #0]
 8002f3c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 8002f40:	78a4      	ldrb	r4, [r4, #2]
 8002f42:	40e1      	lsrs	r1, r4
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8002f44:	e7de      	b.n	8002f04 <_ZNK13Address_field9set_valueEmPhi+0x36>
        for (int i = 0; i < reg_count_; ++i) {
 8002f46:	7904      	ldrb	r4, [r0, #4]
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	dddd      	ble.n	8002f08 <_ZNK13Address_field9set_valueEmPhi+0x3a>
            register_value[registers_[i].address()] &= ~registers_[i].mask();
 8002f4c:	6804      	ldr	r4, [r0, #0]
 8002f4e:	f834 5033 	ldrh.w	r5, [r4, r3, lsl #3]
 8002f52:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 8002f56:	6876      	ldr	r6, [r6, #4]
 8002f58:	5d54      	ldrb	r4, [r2, r5]
 8002f5a:	ea24 0406 	bic.w	r4, r4, r6
 8002f5e:	5554      	strb	r4, [r2, r5]
            register_value[registers_[i].address()] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8002f60:	6805      	ldr	r5, [r0, #0]
 8002f62:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8002f66:	78e6      	ldrb	r6, [r4, #3]
 8002f68:	6864      	ldr	r4, [r4, #4]
 8002f6a:	f835 5033 	ldrh.w	r5, [r5, r3, lsl #3]
 8002f6e:	40f4      	lsrs	r4, r6
 8002f70:	400c      	ands	r4, r1
 8002f72:	40b4      	lsls	r4, r6
 8002f74:	5d56      	ldrb	r6, [r2, r5]
 8002f76:	4334      	orrs	r4, r6
 8002f78:	5554      	strb	r4, [r2, r5]
    return bit_count_;
 8002f7a:	6804      	ldr	r4, [r0, #0]
 8002f7c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
            value >>= registers_[i].bit_count();
 8002f80:	78a4      	ldrb	r4, [r4, #2]
        for (int i = 0; i < reg_count_; ++i) {
 8002f82:	3301      	adds	r3, #1
            value >>= registers_[i].bit_count();
 8002f84:	40e1      	lsrs	r1, r4
        for (int i = 0; i < reg_count_; ++i) {
 8002f86:	e7de      	b.n	8002f46 <_ZNK13Address_field9set_valueEmPhi+0x78>
        return true;
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e7be      	b.n	8002f0a <_ZNK13Address_field9set_valueEmPhi+0x3c>

08002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>:

#if defined( ADD_LORA_PACKET_CODE )
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8002f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8002f90:	88c3      	ldrh	r3, [r0, #6]
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8002f92:	4616      	mov	r6, r2
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8002f94:	3301      	adds	r3, #1
 8002f96:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
 8002f9a:	429a      	cmp	r2, r3
uint32_t Address_field::get_value(const class LoRa_packet& packet, uint8_t bias) const {
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	460d      	mov	r5, r1
    if ((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1))
 8002fa0:	d33c      	bcc.n	800301c <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x90>
        return -1;
    uint32_t value = 0;
    if(reg_revers_) {
 8002fa2:	7940      	ldrb	r0, [r0, #5]
 8002fa4:	b1f0      	cbz	r0, 8002fe4 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x58>
        for (int i = 0; i < reg_count_; ++i) {
 8002fa6:	2700      	movs	r7, #0
    uint32_t value = 0;
 8002fa8:	4638      	mov	r0, r7
        for (int i = 0; i < reg_count_; ++i) {
 8002faa:	7923      	ldrb	r3, [r4, #4]
 8002fac:	42bb      	cmp	r3, r7
 8002fae:	dd37      	ble.n	8003020 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8002fb6:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002fba:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 8002fbe:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002fc2:	4431      	add	r1, r6
            value <<= registers_[i].bit_count();
 8002fc4:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f001 f860 	bl	800408e <_ZNK11LoRa_packetixEi>
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	7803      	ldrb	r3, [r0, #0]
 8002fd2:	444a      	add	r2, r9
 8002fd4:	6850      	ldr	r0, [r2, #4]
        for (int i = 0; i < reg_count_; ++i) {
 8002fd6:	3701      	adds	r7, #1
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002fd8:	4003      	ands	r3, r0
 8002fda:	78d0      	ldrb	r0, [r2, #3]
 8002fdc:	40c3      	lsrs	r3, r0
 8002fde:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = 0; i < reg_count_; ++i) {
 8002fe2:	e7e2      	b.n	8002faa <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x1e>
        }
    }
    else {
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 8002fe4:	7927      	ldrb	r7, [r4, #4]
 8002fe6:	3f01      	subs	r7, #1
 8002fe8:	d31a      	bcc.n	8003020 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x94>
            value <<= registers_[i].bit_count();
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8002ff0:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8002ff4:	f892 8002 	ldrb.w	r8, [r2, #2]
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8002ff8:	f833 1037 	ldrh.w	r1, [r3, r7, lsl #3]
            value <<= registers_[i].bit_count();
 8002ffc:	fa00 f808 	lsl.w	r8, r0, r8
            value |= (packet[registers_[i].address() + bias] & registers_[i].mask()) >> registers_[i].bit_bias();
 8003000:	4431      	add	r1, r6
 8003002:	4628      	mov	r0, r5
 8003004:	f001 f843 	bl	800408e <_ZNK11LoRa_packetixEi>
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	7803      	ldrb	r3, [r0, #0]
 800300c:	444a      	add	r2, r9
 800300e:	6850      	ldr	r0, [r2, #4]
 8003010:	4003      	ands	r3, r0
 8003012:	78d0      	ldrb	r0, [r2, #3]
 8003014:	40c3      	lsrs	r3, r0
 8003016:	ea43 0008 	orr.w	r0, r3, r8
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800301a:	e7e4      	b.n	8002fe6 <_ZNK13Address_field9get_valueERK11LoRa_packeth+0x5a>
        return -1;
 800301c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
    return value;
}
 8003020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>:
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003028:	4617      	mov	r7, r2
 800302a:	4698      	mov	r8, r3
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 800302c:	f1c3 0232 	rsb	r2, r3, #50	; 0x32
 8003030:	88c3      	ldrh	r3, [r0, #6]
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003032:	4604      	mov	r4, r0
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 8003034:	3301      	adds	r3, #1
 8003036:	429a      	cmp	r2, r3
bool Address_field::set_value(uint32_t value, class LoRa_packet& packet, uint8_t bias) const {
 8003038:	460d      	mov	r5, r1
    if (((SIZE_LORA_PACKET_MAX_LEN - bias) < ((uint32_t)max_address_ + 1)) || (mode_ == 'r') ||
 800303a:	f0c0 8092 	bcc.w	8003162 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 800303e:	7e03      	ldrb	r3, [r0, #24]
 8003040:	2b72      	cmp	r3, #114	; 0x72
 8003042:	f000 808e 	beq.w	8003162 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
 8003046:	6883      	ldr	r3, [r0, #8]
 8003048:	428b      	cmp	r3, r1
 800304a:	f200 808a 	bhi.w	8003162 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
                (value < min_value_) || (value > max_value_))
 800304e:	68c3      	ldr	r3, [r0, #12]
 8003050:	428b      	cmp	r3, r1
 8003052:	f0c0 8086 	bcc.w	8003162 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
        return true;
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003056:	2300      	movs	r3, #0
 8003058:	6942      	ldr	r2, [r0, #20]
 800305a:	429a      	cmp	r2, r3
 800305c:	d006      	beq.n	800306c <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x48>
        if (value == reserved_value_[i])
 800305e:	6921      	ldr	r1, [r4, #16]
 8003060:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003064:	42a9      	cmp	r1, r5
 8003066:	d07c      	beq.n	8003162 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x13e>
    for (uint32_t i = 0; i < reserv_count_; ++i)
 8003068:	3301      	adds	r3, #1
 800306a:	e7f6      	b.n	800305a <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x36>
            return true;

    // while(packet.get_len() < max_address_ + bias)
    //     packet.add_packet_data(0);
    packet.add_packet_data(&packet[packet.get_len()-1], max_address_ + bias - packet.get_len() + 1);
 800306c:	4638      	mov	r0, r7
 800306e:	f001 f804 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8003072:	1e41      	subs	r1, r0, #1
 8003074:	4638      	mov	r0, r7
 8003076:	f001 f806 	bl	8004086 <_ZN11LoRa_packetixEi>
 800307a:	4681      	mov	r9, r0
 800307c:	4638      	mov	r0, r7
 800307e:	79a6      	ldrb	r6, [r4, #6]
 8003080:	f000 fffb 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8003084:	4446      	add	r6, r8
 8003086:	b2f6      	uxtb	r6, r6
 8003088:	3601      	adds	r6, #1
 800308a:	1a36      	subs	r6, r6, r0
 800308c:	b2f2      	uxtb	r2, r6
 800308e:	4649      	mov	r1, r9
 8003090:	4638      	mov	r0, r7
 8003092:	f000 ffc3 	bl	800401c <_ZN11LoRa_packet15add_packet_dataEPKhh>

    if(reg_revers_) {
 8003096:	7966      	ldrb	r6, [r4, #5]
 8003098:	b396      	cbz	r6, 8003100 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 800309a:	7926      	ldrb	r6, [r4, #4]
 800309c:	3e01      	subs	r6, #1
 800309e:	d202      	bcs.n	80030a6 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x82>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
            value >>= registers_[i].bit_count();
        }
    }
    return false;
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	4638      	mov	r0, r7
 80030aa:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 80030ae:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4441      	add	r1, r8
 80030b6:	ea6f 0903 	mvn.w	r9, r3
 80030ba:	f000 ffe4 	bl	8004086 <_ZN11LoRa_packetixEi>
 80030be:	7803      	ldrb	r3, [r0, #0]
 80030c0:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 80030c4:	ea03 0309 	and.w	r3, r3, r9
 80030c8:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	4638      	mov	r0, r7
 80030ce:	eb02 030a 	add.w	r3, r2, sl
 80030d2:	78d9      	ldrb	r1, [r3, #3]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	fa23 f901 	lsr.w	r9, r3, r1
 80030da:	ea09 0905 	and.w	r9, r9, r5
 80030de:	fa09 f901 	lsl.w	r9, r9, r1
 80030e2:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 80030e6:	4441      	add	r1, r8
 80030e8:	f000 ffcd 	bl	8004086 <_ZN11LoRa_packetixEi>
 80030ec:	7803      	ldrb	r3, [r0, #0]
 80030ee:	ea43 0909 	orr.w	r9, r3, r9
 80030f2:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	40dd      	lsrs	r5, r3
        for (int i = (reg_count_ - 1); i >= 0; --i) {
 80030fe:	e7cd      	b.n	800309c <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x78>
        for (int i = 0; i < reg_count_; ++i) {
 8003100:	7923      	ldrb	r3, [r4, #4]
 8003102:	42b3      	cmp	r3, r6
 8003104:	ddcc      	ble.n	80030a0 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7c>
            packet[registers_[i].address() + bias] &= ~registers_[i].mask();
 8003106:	6822      	ldr	r2, [r4, #0]
 8003108:	4638      	mov	r0, r7
 800310a:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
 800310e:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4441      	add	r1, r8
 8003116:	ea6f 0903 	mvn.w	r9, r3
 800311a:	f000 ffb4 	bl	8004086 <_ZN11LoRa_packetixEi>
 800311e:	7803      	ldrb	r3, [r0, #0]
 8003120:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 8003124:	ea03 0309 	and.w	r3, r3, r9
 8003128:	7003      	strb	r3, [r0, #0]
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	4638      	mov	r0, r7
 800312e:	eb02 030a 	add.w	r3, r2, sl
 8003132:	78d9      	ldrb	r1, [r3, #3]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	fa23 f901 	lsr.w	r9, r3, r1
 800313a:	ea09 0905 	and.w	r9, r9, r5
 800313e:	fa09 f901 	lsl.w	r9, r9, r1
 8003142:	f832 1036 	ldrh.w	r1, [r2, r6, lsl #3]
        for (int i = 0; i < reg_count_; ++i) {
 8003146:	3601      	adds	r6, #1
            packet[registers_[i].address() + bias] |= (value & (registers_[i].mask() >> registers_[i].bit_bias())) << registers_[i].bit_bias();
 8003148:	4441      	add	r1, r8
 800314a:	f000 ff9c 	bl	8004086 <_ZN11LoRa_packetixEi>
 800314e:	7803      	ldrb	r3, [r0, #0]
 8003150:	ea43 0909 	orr.w	r9, r3, r9
 8003154:	f880 9000 	strb.w	r9, [r0]
    return bit_count_;
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	4453      	add	r3, sl
            value >>= registers_[i].bit_count();
 800315c:	789b      	ldrb	r3, [r3, #2]
 800315e:	40dd      	lsrs	r5, r3
        for (int i = 0; i < reg_count_; ++i) {
 8003160:	e7ce      	b.n	8003100 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0xdc>
        return true;
 8003162:	2001      	movs	r0, #1
 8003164:	e79d      	b.n	80030a2 <_ZNK13Address_field9set_valueEmR11LoRa_packeth+0x7e>

08003166 <_ZNK13Address_field13get_registersEv>:
#endif

const Register *Address_field::get_registers() const {
    return registers_;
}
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	4770      	bx	lr

0800316a <_ZNK13Address_field13get_reg_countEv>:
uint8_t Address_field::get_reg_count() const {
    return reg_count_;
}
 800316a:	7900      	ldrb	r0, [r0, #4]
 800316c:	4770      	bx	lr

0800316e <_ZeqRK13Address_fieldS1_>:
}
char Address_field::get_mode() const {
    return mode_;
}

bool operator==(const Address_field& left, const Address_field& right) {
 800316e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(left.reg_count_ != right.reg_count_)
 8003172:	f890 8004 	ldrb.w	r8, [r0, #4]
 8003176:	790b      	ldrb	r3, [r1, #4]
bool operator==(const Address_field& left, const Address_field& right) {
 8003178:	4604      	mov	r4, r0
    if(left.reg_count_ != right.reg_count_)
 800317a:	4543      	cmp	r3, r8
bool operator==(const Address_field& left, const Address_field& right) {
 800317c:	460d      	mov	r5, r1
    if(left.reg_count_ != right.reg_count_)
 800317e:	d131      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_address_ != right.max_address_)
 8003180:	88c2      	ldrh	r2, [r0, #6]
 8003182:	88cb      	ldrh	r3, [r1, #6]
 8003184:	429a      	cmp	r2, r3
 8003186:	d12d      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.min_value_ != right.min_value_)
 8003188:	6882      	ldr	r2, [r0, #8]
 800318a:	688b      	ldr	r3, [r1, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	d129      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.max_value_ != right.max_value_)
 8003190:	68c2      	ldr	r2, [r0, #12]
 8003192:	68cb      	ldr	r3, [r1, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d125      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.reserv_count_ != right.reserv_count_)
 8003198:	6947      	ldr	r7, [r0, #20]
 800319a:	694b      	ldr	r3, [r1, #20]
 800319c:	429f      	cmp	r7, r3
 800319e:	d121      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    if(left.mode_ != right.mode_)
 80031a0:	7e02      	ldrb	r2, [r0, #24]
 80031a2:	7e0b      	ldrb	r3, [r1, #24]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d11d      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
        return false;
    for(int i = 0; i < left.reg_count_; ++i) {
 80031a8:	2600      	movs	r6, #0
 80031aa:	45b0      	cmp	r8, r6
 80031ac:	dd0a      	ble.n	80031c4 <_ZeqRK13Address_fieldS1_+0x56>
        if(left.registers_[i] != right.registers_[i])
 80031ae:	6829      	ldr	r1, [r5, #0]
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80031b6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80031ba:	f7ff fdf4 	bl	8002da6 <_ZneRK8RegisterS1_>
 80031be:	b988      	cbnz	r0, 80031e4 <_ZeqRK13Address_fieldS1_+0x76>
    for(int i = 0; i < left.reg_count_; ++i) {
 80031c0:	3601      	adds	r6, #1
 80031c2:	e7f2      	b.n	80031aa <_ZeqRK13Address_fieldS1_+0x3c>
            return false;
    }
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80031c4:	2300      	movs	r3, #0
 80031c6:	429f      	cmp	r7, r3
 80031c8:	d009      	beq.n	80031de <_ZeqRK13Address_fieldS1_+0x70>
        if(left.reserved_value_[i] != right.reserved_value_[i])
 80031ca:	6921      	ldr	r1, [r4, #16]
 80031cc:	692a      	ldr	r2, [r5, #16]
 80031ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80031d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031d6:	4291      	cmp	r1, r2
 80031d8:	d104      	bne.n	80031e4 <_ZeqRK13Address_fieldS1_+0x76>
    for(uint32_t i = 0; i < left.reserv_count_; ++i) {
 80031da:	3301      	adds	r3, #1
 80031dc:	e7f3      	b.n	80031c6 <_ZeqRK13Address_fieldS1_+0x58>
            return false;
    }
    return true;
 80031de:	2001      	movs	r0, #1
}
 80031e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
 80031e4:	2000      	movs	r0, #0
 80031e6:	e7fb      	b.n	80031e0 <_ZeqRK13Address_fieldS1_+0x72>

080031e8 <_ZN10LoRa_classD1Ev>:
	init(nullptr);
}
LoRa_class::LoRa_class(SPI_HandleTypeDef *spi) {
	init(spi);
}
LoRa_class::~LoRa_class() {
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
    if(_spi != nullptr)
 80031ec:	6800      	ldr	r0, [r0, #0]
 80031ee:	b110      	cbz	r0, 80031f6 <_ZN10LoRa_classD1Ev+0xe>
        delete _spi;
 80031f0:	2158      	movs	r1, #88	; 0x58
 80031f2:	f004 fef3 	bl	8007fdc <_ZdlPvj>
LoRa_class::~LoRa_class() {
 80031f6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80031fa:	f000 ff91 	bl	8004120 <_ZN13LoRa_registerD1Ev>
}
 80031fe:	4620      	mov	r0, r4
 8003200:	bd10      	pop	{r4, pc}
	...

08003204 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>:

void LoRa_class::init(SPI_HandleTypeDef *spi) {
 8003204:	b4f0      	push	{r4, r5, r6, r7}
	_reset_pin = LORA_RESET_Pin;
 8003206:	f44f 6300 	mov.w	r3, #2048	; 0x800
	_reset_port = LORA_RESET_GPIO_Port;
	_nss_pin = LORA_NSS_Pin;
	_nss_port = LORA_NSS_GPIO_Port;
#ifdef LoRa_DIO0_Pin
	_dio0_pin = LORA_DIO0_Pin;
 800320a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	_reset_port = LORA_RESET_GPIO_Port;
 800320e:	4c0c      	ldr	r4, [pc, #48]	; (8003240 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x3c>)
#else
	_dio3_pin = 0;
	_dio3_port = 0;
#endif
	_spi = spi;
	_frequency = 0;
 8003210:	2600      	movs	r6, #0
	_reset_port = LORA_RESET_GPIO_Port;
 8003212:	6084      	str	r4, [r0, #8]
	_dio0_port = LORA_DIO0_GPIO_Port;
 8003214:	6184      	str	r4, [r0, #24]
	_dio1_port = LORA_DIO1_GPIO_Port;
 8003216:	6204      	str	r4, [r0, #32]
	_dio3_pin = 0;
 8003218:	2400      	movs	r4, #0
	_frequency = 0;
 800321a:	2700      	movs	r7, #0
	_reset_pin = LORA_RESET_Pin;
 800321c:	8083      	strh	r3, [r0, #4]
	_dio0_pin = LORA_DIO0_Pin;
 800321e:	8285      	strh	r5, [r0, #20]
	_nss_pin = LORA_NSS_Pin;
 8003220:	2310      	movs	r3, #16
	_dio1_pin = LORA_DIO1_Pin;
 8003222:	2504      	movs	r5, #4
	_nss_port = LORA_NSS_GPIO_Port;
 8003224:	4a07      	ldr	r2, [pc, #28]	; (8003244 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef+0x40>)
	_FifoTxBaseAddr = 0;
 8003226:	8704      	strh	r4, [r0, #56]	; 0x38
	_frequency = 0;
 8003228:	e9c0 670c 	strd	r6, r7, [r0, #48]	; 0x30
	_dio1_pin = LORA_DIO1_Pin;
 800322c:	8385      	strh	r5, [r0, #28]
	_dio3_pin = 0;
 800322e:	8484      	strh	r4, [r0, #36]	; 0x24
	_dio3_port = 0;
 8003230:	6284      	str	r4, [r0, #40]	; 0x28
	_nss_pin = LORA_NSS_Pin;
 8003232:	8183      	strh	r3, [r0, #12]
	_nss_port = LORA_NSS_GPIO_Port;
 8003234:	6102      	str	r2, [r0, #16]
	_spi = spi;
 8003236:	6001      	str	r1, [r0, #0]
	_packet_length = 0;
	_reg_field.init(spi, _nss_port, _nss_pin);
}
 8003238:	bcf0      	pop	{r4, r5, r6, r7}
	_reg_field.init(spi, _nss_port, _nss_pin);
 800323a:	303c      	adds	r0, #60	; 0x3c
 800323c:	f000 bf71 	b.w	8004122 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8003240:	40010c00 	.word	0x40010c00
 8003244:	40010800 	.word	0x40010800

08003248 <_ZN10LoRa_classC1Ev>:
LoRa_class::LoRa_class(/* args */) {
 8003248:	b510      	push	{r4, lr}
 800324a:	4604      	mov	r4, r0
 800324c:	303c      	adds	r0, #60	; 0x3c
 800324e:	f000 ff7b 	bl	8004148 <_ZN13LoRa_registerC1Ev>
	init(nullptr);
 8003252:	4620      	mov	r0, r4
 8003254:	2100      	movs	r1, #0
 8003256:	f7ff ffd5 	bl	8003204 <_ZN10LoRa_class4initEP19__SPI_HandleTypeDef>
}
 800325a:	4620      	mov	r0, r4
 800325c:	bd10      	pop	{r4, pc}

0800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>:

uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800325e:	b084      	sub	sp, #16
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003262:	b087      	sub	sp, #28
 8003264:	ac0d      	add	r4, sp, #52	; 0x34
 8003266:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    uint8_t result;
    result = _reg_field.set_field_value(field, value);
 800326a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800326c:	ad10      	add	r5, sp, #64	; 0x40
 800326e:	9304      	str	r3, [sp, #16]
 8003270:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8003274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003278:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
uint8_t LoRa_class::field_set(Address_field field, uint32_t value, bool write) {
 800327c:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
    result = _reg_field.set_field_value(field, value);
 8003280:	4630      	mov	r0, r6
 8003282:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003286:	f001 f97b 	bl	8004580 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
    if(write) {
 800328a:	b15f      	cbz	r7, 80032a4 <_ZN10LoRa_class9field_setE13Address_fieldmb+0x46>
        result = _reg_field.register_write(field, true, true);
 800328c:	2301      	movs	r3, #1
 800328e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003296:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800329a:	4630      	mov	r0, r6
 800329c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80032a0:	f001 f9b6 	bl	8004610 <_ZN13LoRa_register14register_writeE13Address_fieldbb>
    }
    return result;
}
 80032a4:	b007      	add	sp, #28
 80032a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80032aa:	b004      	add	sp, #16
 80032ac:	4770      	bx	lr

080032ae <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80032ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t result;
    result = _reg_field.set_field_value(fields, values, amt);
 80032b2:	f100 043c 	add.w	r4, r0, #60	; 0x3c
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80032b6:	f89d 7018 	ldrb.w	r7, [sp, #24]
    result = _reg_field.set_field_value(fields, values, amt);
 80032ba:	4620      	mov	r0, r4
uint8_t LoRa_class::field_set(Address_field* fields, uint32_t* values, uint8_t amt, bool write) {
 80032bc:	460d      	mov	r5, r1
 80032be:	461e      	mov	r6, r3
    result = _reg_field.set_field_value(fields, values, amt);
 80032c0:	f001 f91a 	bl	80044f8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    if(write) {
 80032c4:	b147      	cbz	r7, 80032d8 <_ZN10LoRa_class9field_setEP13Address_fieldPmhb+0x2a>
        result = _reg_field.register_write(fields, amt, true, true);
 80032c6:	2301      	movs	r3, #1
 80032c8:	4632      	mov	r2, r6
 80032ca:	4629      	mov	r1, r5
 80032cc:	4620      	mov	r0, r4
 80032ce:	9306      	str	r3, [sp, #24]
    }
    return result;
}
 80032d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        result = _reg_field.register_write(fields, amt, true, true);
 80032d4:	f001 b966 	b.w	80045a4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 80032d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>:

uint8_t LoRa_class::field_get(Address_field field, uint32_t* value, bool read) {
 80032dc:	b084      	sub	sp, #16
 80032de:	b530      	push	{r4, r5, lr}
 80032e0:	4605      	mov	r5, r0
 80032e2:	b087      	sub	sp, #28
 80032e4:	ac0b      	add	r4, sp, #44	; 0x2c
 80032e6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return _reg_field.get_field_value(field, value, read);
 80032ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80032ee:	9305      	str	r3, [sp, #20]
 80032f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	ab0e      	add	r3, sp, #56	; 0x38
 80032f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80032fc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003300:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003304:	f001 f8e5 	bl	80044d2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
}
 8003308:	b007      	add	sp, #28
 800330a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800330e:	b004      	add	sp, #16
 8003310:	4770      	bx	lr

08003312 <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>:
uint8_t LoRa_class::field_get(Address_field fields[], uint32_t* values, uint8_t amt, bool read) {
 8003312:	b410      	push	{r4}
 8003314:	f89d 4004 	ldrb.w	r4, [sp, #4]
    return _reg_field.get_field_value(fields, values, amt, read);
 8003318:	303c      	adds	r0, #60	; 0x3c
 800331a:	9401      	str	r4, [sp, #4]
}
 800331c:	bc10      	pop	{r4}
    return _reg_field.get_field_value(fields, values, amt, read);
 800331e:	f001 b8b0 	b.w	8004482 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
	...

08003324 <_ZN10LoRa_class8set_modeEh>:
    // переход в режим сна
    mode_sleep();
}


uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003326:	4d14      	ldr	r5, [pc, #80]	; (8003378 <_ZN10LoRa_class8set_modeEh+0x54>)
uint8_t LoRa_class::set_mode(uint8_t mode) {
 8003328:	b09b      	sub	sp, #108	; 0x6c
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800332a:	ac05      	add	r4, sp, #20
uint8_t LoRa_class::set_mode(uint8_t mode) {
 800332c:	4606      	mov	r6, r0
 800332e:	460f      	mov	r7, r1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003338:	4d10      	ldr	r5, [pc, #64]	; (800337c <_ZN10LoRa_class8set_modeEh+0x58>)
 800333a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800333e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003340:	ac0c      	add	r4, sp, #48	; 0x30
 8003342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003348:	4d0d      	ldr	r5, [pc, #52]	; (8003380 <_ZN10LoRa_class8set_modeEh+0x5c>)
 800334a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800334e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003350:	ac13      	add	r4, sp, #76	; 0x4c
 8003352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 8003358:	2301      	movs	r3, #1
    Address_field fields[3] = {LongRangeMode, LowFrequencyModeOn, Mode};
 800335a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint32_t values[3] = {1, 0, mode};
 800335e:	2200      	movs	r2, #0
    return field_set(fields, values, 3);
 8003360:	9300      	str	r3, [sp, #0]
    uint32_t values[3] = {1, 0, mode};
 8003362:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 3);
 8003366:	4630      	mov	r0, r6
 8003368:	2303      	movs	r3, #3
 800336a:	aa02      	add	r2, sp, #8
 800336c:	a905      	add	r1, sp, #20
    uint32_t values[3] = {1, 0, mode};
 800336e:	9704      	str	r7, [sp, #16]
    return field_set(fields, values, 3);
 8003370:	f7ff ff9d 	bl	80032ae <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 8003374:	b01b      	add	sp, #108	; 0x6c
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003378:	20001d24 	.word	0x20001d24
 800337c:	20001d5c 	.word	0x20001d5c
 8003380:	20001d94 	.word	0x20001d94

08003384 <_ZN10LoRa_class10mode_sleepEv>:
// Режим сна/настройки
uint8_t LoRa_class::mode_sleep() {
    return set_mode(MODE_SLEEP);
 8003384:	2100      	movs	r1, #0
 8003386:	f7ff bfcd 	b.w	8003324 <_ZN10LoRa_class8set_modeEh>

0800338a <_ZN10LoRa_class10mode_STDBYEv>:
}
// Режим ожидания
uint8_t LoRa_class::mode_STDBY() {
    return set_mode(MODE_STDBY);
 800338a:	2101      	movs	r1, #1
 800338c:	f7ff bfca 	b.w	8003324 <_ZN10LoRa_class8set_modeEh>

08003390 <_ZN10LoRa_class7mode_TXEb>:
}
// Режим отправки
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003390:	b530      	push	{r4, r5, lr}
    if (set_dio & (_dio0_pin != 0))
 8003392:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_TX(bool set_dio) {
 8003394:	4604      	mov	r4, r0
 8003396:	b087      	sub	sp, #28
    if (set_dio & (_dio0_pin != 0))
 8003398:	b173      	cbz	r3, 80033b8 <_ZN10LoRa_class7mode_TXEb+0x28>
 800339a:	b169      	cbz	r1, 80033b8 <_ZN10LoRa_class7mode_TXEb+0x28>
        field_set(Dio0Mapping, 1);
 800339c:	2301      	movs	r3, #1
 800339e:	4d0a      	ldr	r5, [pc, #40]	; (80033c8 <_ZN10LoRa_class7mode_TXEb+0x38>)
 80033a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80033a4:	f105 030c 	add.w	r3, r5, #12
 80033a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80033ae:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff ff53 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    return set_mode(MODE_TX);
 80033b8:	2103      	movs	r1, #3
 80033ba:	4620      	mov	r0, r4
}
 80033bc:	b007      	add	sp, #28
 80033be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return set_mode(MODE_TX);
 80033c2:	f7ff bfaf 	b.w	8003324 <_ZN10LoRa_class8set_modeEh>
 80033c6:	bf00      	nop
 80033c8:	20001bf0 	.word	0x20001bf0

080033cc <_ZN10LoRa_class9mode_FSTXEv>:
uint8_t LoRa_class::mode_FSTX() {
    return set_mode(MODE_FSTX);
 80033cc:	2102      	movs	r1, #2
 80033ce:	f7ff bfa9 	b.w	8003324 <_ZN10LoRa_class8set_modeEh>
	...

080033d4 <_ZN10LoRa_class14mode_RX_singleEb>:
        field_set(Dio1Mapping, 0);
    }
    return set_mode(MODE_RX_CONTINUOUS);
}
// Режим единичного приёма
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80033d4:	b570      	push	{r4, r5, r6, lr}
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80033d6:	8a83      	ldrh	r3, [r0, #20]
uint8_t LoRa_class::mode_RX_single(bool set_dio) {
 80033d8:	4606      	mov	r6, r0
 80033da:	b08e      	sub	sp, #56	; 0x38
    if (set_dio & ((_dio0_pin != 0) || (_dio1_pin != 0))) {
 80033dc:	b90b      	cbnz	r3, 80033e2 <_ZN10LoRa_class14mode_RX_singleEb+0xe>
 80033de:	8b83      	ldrh	r3, [r0, #28]
 80033e0:	b31b      	cbz	r3, 800342a <_ZN10LoRa_class14mode_RX_singleEb+0x56>
 80033e2:	b311      	cbz	r1, 800342a <_ZN10LoRa_class14mode_RX_singleEb+0x56>
        field_set(Dio0Mapping, 0, false);
 80033e4:	4d14      	ldr	r5, [pc, #80]	; (8003438 <_ZN10LoRa_class14mode_RX_singleEb+0x64>)
 80033e6:	ac07      	add	r4, sp, #28
 80033e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    result = _reg_field.set_field_value(field, value);
 80033f0:	2500      	movs	r5, #0
 80033f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033f6:	ab0e      	add	r3, sp, #56	; 0x38
 80033f8:	9504      	str	r5, [sp, #16]
 80033fa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80033fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003402:	ab07      	add	r3, sp, #28
 8003404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003406:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 800340a:	f001 f8b9 	bl	8004580 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>
        field_set(Dio1Mapping, 0);
 800340e:	2301      	movs	r3, #1
 8003410:	4c0a      	ldr	r4, [pc, #40]	; (800343c <_ZN10LoRa_class14mode_RX_singleEb+0x68>)
 8003412:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8003416:	f104 030c 	add.w	r3, r4, #12
 800341a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800341c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003420:	4630      	mov	r0, r6
 8003422:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003426:	f7ff ff1a 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    }
    return set_mode(MODE_RX_SINGLE);
 800342a:	2106      	movs	r1, #6
 800342c:	4630      	mov	r0, r6
}
 800342e:	b00e      	add	sp, #56	; 0x38
 8003430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return set_mode(MODE_RX_SINGLE);
 8003434:	f7ff bf76 	b.w	8003324 <_ZN10LoRa_class8set_modeEh>
 8003438:	20001bf0 	.word	0x20001bf0
 800343c:	20001c0c 	.word	0x20001c0c

08003440 <_ZN10LoRa_class12set_TX_powerEhbh>:
    return set_mode(MODE_CAD);
}


// Установка силы отправляемого пакета
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003440:	469c      	mov	ip, r3
 8003442:	f1bc 0f07 	cmp.w	ip, #7
 8003446:	bf28      	it	cs
 8003448:	f04f 0c07 	movcs.w	ip, #7
 800344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003450:	4e2f      	ldr	r6, [pc, #188]	; (8003510 <_ZN10LoRa_class12set_TX_powerEhbh+0xd0>)
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003452:	b0a2      	sub	sp, #136	; 0x88
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 8003454:	ad06      	add	r5, sp, #24
uint8_t LoRa_class::set_TX_power(uint8_t power, bool paboost, uint8_t max_power) {
 8003456:	4607      	mov	r7, r0
 8003458:	4690      	mov	r8, r2
 800345a:	460c      	mov	r4, r1
    Address_field fields[4] = {PaDac, PaSelect, MaxPower, OutputPower};
 800345c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800345e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003460:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003464:	4e2b      	ldr	r6, [pc, #172]	; (8003514 <_ZN10LoRa_class12set_TX_powerEhbh+0xd4>)
 8003466:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800346a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800346c:	ad0d      	add	r5, sp, #52	; 0x34
 800346e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003470:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003474:	4e28      	ldr	r6, [pc, #160]	; (8003518 <_ZN10LoRa_class12set_TX_powerEhbh+0xd8>)
 8003476:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800347a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800347c:	ad14      	add	r5, sp, #80	; 0x50
 800347e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003480:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003484:	4e25      	ldr	r6, [pc, #148]	; (800351c <_ZN10LoRa_class12set_TX_powerEhbh+0xdc>)
 8003486:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800348a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800348c:	ad1b      	add	r5, sp, #108	; 0x6c
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003494:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    uint32_t pa_dac, pa_select;
    int16_t power_adjustment, min_power_value, max_power_value;
    if (max_power < 0x01)
 8003498:	4665      	mov	r5, ip
        max_power = 0x01;
    else if (max_power > 0x07)
        max_power = 0x07;
    _reg_field.register_read(fields, 4);
 800349a:	2301      	movs	r3, #1
 800349c:	2d01      	cmp	r5, #1
 800349e:	f04f 0204 	mov.w	r2, #4
 80034a2:	a906      	add	r1, sp, #24
 80034a4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034a8:	bf38      	it	cc
 80034aa:	2501      	movcc	r5, #1
 80034ac:	f000 ffb9 	bl	8004422 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
    // Изменение бита PABOOST
    if (paboost) {
 80034b0:	f1b8 0f00 	cmp.w	r8, #0
 80034b4:	d025      	beq.n	8003502 <_ZN10LoRa_class12set_TX_powerEhbh+0xc2>
        pa_select = 1;
        min_power_value = 2;
        max_power_value = 20;
 80034b6:	2c11      	cmp	r4, #17
 80034b8:	f04f 0314 	mov.w	r3, #20
 80034bc:	f04f 0002 	mov.w	r0, #2
 80034c0:	bf8c      	ite	hi
 80034c2:	f06f 0104 	mvnhi.w	r1, #4
 80034c6:	f06f 0101 	mvnls.w	r1, #1
 80034ca:	2201      	movs	r2, #1
        min_power_value = -1;
        max_power_value = 14;
        power_adjustment = 1;
    }
    // Проверка выхода силы сигнала за диапазон
    if (power < min_power_value)
 80034cc:	4284      	cmp	r4, r0
        power = min_power_value;
 80034ce:	bfb8      	it	lt
 80034d0:	b2c4      	uxtblt	r4, r0
    if (power > max_power_value)
 80034d2:	429c      	cmp	r4, r3
        power = max_power_value;
 80034d4:	bfc8      	it	gt
 80034d6:	b2dc      	uxtbgt	r4, r3
    // Корректировка параметра
    power += power_adjustment;
 80034d8:	440c      	add	r4, r1
 80034da:	b2e4      	uxtb	r4, r4
    // Настройка флага высокого сигнала
    if (power > 17)
        pa_dac = RF_PADAC_20DBM_ON;
    else
        pa_dac = RF_PADAC_20DBM_OFF;
 80034dc:	2c11      	cmp	r4, #17
 80034de:	bf8c      	ite	hi
 80034e0:	2307      	movhi	r3, #7
 80034e2:	2304      	movls	r3, #4
    // Передача настроек
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 80034e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    return field_set(fields, values, 4);
 80034e8:	2301      	movs	r3, #1
 80034ea:	4638      	mov	r0, r7
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	aa02      	add	r2, sp, #8
 80034f0:	2304      	movs	r3, #4
 80034f2:	a906      	add	r1, sp, #24
    uint32_t values[4] = {pa_dac, pa_select, max_power, power};
 80034f4:	e9cd 5404 	strd	r5, r4, [sp, #16]
    return field_set(fields, values, 4);
 80034f8:	f7ff fed9 	bl	80032ae <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 80034fc:	b022      	add	sp, #136	; 0x88
 80034fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        max_power_value = 14;
 8003502:	230e      	movs	r3, #14
        min_power_value = -1;
 8003504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        power_adjustment = 1;
 8003508:	2101      	movs	r1, #1
        pa_select = 0;
 800350a:	4642      	mov	r2, r8
 800350c:	e7de      	b.n	80034cc <_ZN10LoRa_class12set_TX_powerEhbh+0x8c>
 800350e:	bf00      	nop
 8003510:	20001dcc 	.word	0x20001dcc
 8003514:	20001de8 	.word	0x20001de8
 8003518:	20001d78 	.word	0x20001d78
 800351c:	20001db0 	.word	0x20001db0

08003520 <_ZN10LoRa_class13set_frequencyEy>:

// Установка частоты радиосигнала
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003520:	b570      	push	{r4, r5, r6, lr}
    _frequency = frequency;
 8003522:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 8003526:	4615      	mov	r5, r2
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
    return field_set(Frf, frf);
 8003528:	2201      	movs	r2, #1
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 800352a:	b086      	sub	sp, #24
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 800352c:	04d9      	lsls	r1, r3, #19
uint8_t LoRa_class::set_frequency(uint64_t frequency) {
 800352e:	4604      	mov	r4, r0
    return field_set(Frf, frf);
 8003530:	9205      	str	r2, [sp, #20]
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003532:	2300      	movs	r3, #0
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <_ZN10LoRa_class13set_frequencyEy+0x3c>)
 8003536:	04e8      	lsls	r0, r5, #19
 8003538:	ea41 3155 	orr.w	r1, r1, r5, lsr #13
 800353c:	f7fd f84c 	bl	80005d8 <__aeabi_uldivmod>
    return field_set(Frf, frf);
 8003540:	4e07      	ldr	r6, [pc, #28]	; (8003560 <_ZN10LoRa_class13set_frequencyEy+0x40>)
    uint32_t frf = ((uint64_t)frequency << 19) / 32000000;
 8003542:	9004      	str	r0, [sp, #16]
    return field_set(Frf, frf);
 8003544:	f106 030c 	add.w	r3, r6, #12
 8003548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800354a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800354e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fe83 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003558:	b006      	add	sp, #24
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	01e84800 	.word	0x01e84800
 8003560:	20001cec 	.word	0x20001cec

08003564 <_ZN10LoRa_class20set_spreading_factorEh>:

// Установка силы коэффициента распространения SF
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003564:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t detection_optimize, detection_threshold;
    if (SF < 6)
 8003566:	2905      	cmp	r1, #5
uint8_t LoRa_class::set_spreading_factor(uint8_t SF) {
 8003568:	4607      	mov	r7, r0
 800356a:	460e      	mov	r6, r1
 800356c:	b09b      	sub	sp, #108	; 0x6c
    if (SF < 6)
 800356e:	d930      	bls.n	80035d2 <_ZN10LoRa_class20set_spreading_factorEh+0x6e>
        SF = 6;
    else if (SF > 12)
 8003570:	290c      	cmp	r1, #12
 8003572:	d834      	bhi.n	80035de <_ZN10LoRa_class20set_spreading_factorEh+0x7a>
        SF = 12;
    if (SF == 6) {
 8003574:	2906      	cmp	r1, #6
        detection_optimize = DO_SF6;
        detection_threshold = DT_SF6;
    }
    else {
        detection_optimize = DO_SF7_12;
        detection_threshold = DT_SF7_12;
 8003576:	bf0b      	itete	eq
 8003578:	f04f 0c0c 	moveq.w	ip, #12
 800357c:	f04f 0c0a 	movne.w	ip, #10
 8003580:	f04f 0e05 	moveq.w	lr, #5
 8003584:	f04f 0e03 	movne.w	lr, #3
    }
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 8003588:	4d18      	ldr	r5, [pc, #96]	; (80035ec <_ZN10LoRa_class20set_spreading_factorEh+0x88>)
 800358a:	ac05      	add	r4, sp, #20
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003594:	4d16      	ldr	r5, [pc, #88]	; (80035f0 <_ZN10LoRa_class20set_spreading_factorEh+0x8c>)
 8003596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800359a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359c:	ac0c      	add	r4, sp, #48	; 0x30
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035a4:	4d13      	ldr	r5, [pc, #76]	; (80035f4 <_ZN10LoRa_class20set_spreading_factorEh+0x90>)
 80035a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ac:	ac13      	add	r4, sp, #76	; 0x4c
 80035ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
    return field_set(fields, values, 3);
 80035b4:	2301      	movs	r3, #1
    Address_field fields[3] = {DetectionOptimize, DetectionThreshold, SpreadingFactor};
 80035b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return field_set(fields, values, 3);
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4638      	mov	r0, r7
 80035be:	2303      	movs	r3, #3
 80035c0:	aa02      	add	r2, sp, #8
 80035c2:	a905      	add	r1, sp, #20
    uint32_t values[3] = {detection_optimize, detection_threshold, SF};
 80035c4:	e9cd ec02 	strd	lr, ip, [sp, #8]
 80035c8:	9604      	str	r6, [sp, #16]
    return field_set(fields, values, 3);
 80035ca:	f7ff fe70 	bl	80032ae <_ZN10LoRa_class9field_setEP13Address_fieldPmhb>
}
 80035ce:	b01b      	add	sp, #108	; 0x6c
 80035d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SF = 6;
 80035d2:	2606      	movs	r6, #6
        detection_threshold = DT_SF6;
 80035d4:	f04f 0c0c 	mov.w	ip, #12
        detection_optimize = DO_SF6;
 80035d8:	f04f 0e05 	mov.w	lr, #5
 80035dc:	e7d4      	b.n	8003588 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
        SF = 12;
 80035de:	260c      	movs	r6, #12
        detection_threshold = DT_SF7_12;
 80035e0:	f04f 0c0a 	mov.w	ip, #10
        detection_optimize = DO_SF7_12;
 80035e4:	f04f 0e03 	mov.w	lr, #3
 80035e8:	e7ce      	b.n	8003588 <_ZN10LoRa_class20set_spreading_factorEh+0x24>
 80035ea:	bf00      	nop
 80035ec:	20001bb8 	.word	0x20001bb8
 80035f0:	20001bd4 	.word	0x20001bd4
 80035f4:	20001ee4 	.word	0x20001ee4

080035f8 <_ZN10LoRa_class20set_signal_bandwidthEy>:

// Установка пропускной способности
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80035f8:	b570      	push	{r4, r5, r6, lr}
    uint8_t bw;
    if (sbw <= 7.8E3)        bw = 0;
 80035fa:	4619      	mov	r1, r3
uint8_t LoRa_class::set_signal_bandwidth(uint64_t sbw) {
 80035fc:	b086      	sub	sp, #24
 80035fe:	4606      	mov	r6, r0
    if (sbw <= 7.8E3)        bw = 0;
 8003600:	4610      	mov	r0, r2
 8003602:	f7fc ff2b 	bl	800045c <__aeabi_ul2d>
 8003606:	a338      	add	r3, pc, #224	; (adr r3, 80036e8 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf0>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	4604      	mov	r4, r0
 800360e:	460d      	mov	r5, r1
 8003610:	f7fc ffc4 	bl	800059c <__aeabi_dcmple>
 8003614:	2800      	cmp	r0, #0
 8003616:	d156      	bne.n	80036c6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xce>
    else if (sbw <= 10.4E3)  bw = 1;
 8003618:	a335      	add	r3, pc, #212	; (adr r3, 80036f0 <_ZN10LoRa_class20set_signal_bandwidthEy+0xf8>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	f7fc ffbb 	bl	800059c <__aeabi_dcmple>
 8003626:	2800      	cmp	r0, #0
 8003628:	d14f      	bne.n	80036ca <_ZN10LoRa_class20set_signal_bandwidthEy+0xd2>
    else if (sbw <= 15.6E3)  bw = 2;
 800362a:	a333      	add	r3, pc, #204	; (adr r3, 80036f8 <_ZN10LoRa_class20set_signal_bandwidthEy+0x100>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fc ffb2 	bl	800059c <__aeabi_dcmple>
 8003638:	2800      	cmp	r0, #0
 800363a:	d148      	bne.n	80036ce <_ZN10LoRa_class20set_signal_bandwidthEy+0xd6>
    else if (sbw <= 20.8E3)  bw = 3;
 800363c:	a330      	add	r3, pc, #192	; (adr r3, 8003700 <_ZN10LoRa_class20set_signal_bandwidthEy+0x108>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	4620      	mov	r0, r4
 8003644:	4629      	mov	r1, r5
 8003646:	f7fc ffa9 	bl	800059c <__aeabi_dcmple>
 800364a:	2800      	cmp	r0, #0
 800364c:	d141      	bne.n	80036d2 <_ZN10LoRa_class20set_signal_bandwidthEy+0xda>
    else if (sbw <= 31.25E3) bw = 4;
 800364e:	a32e      	add	r3, pc, #184	; (adr r3, 8003708 <_ZN10LoRa_class20set_signal_bandwidthEy+0x110>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	4620      	mov	r0, r4
 8003656:	4629      	mov	r1, r5
 8003658:	f7fc ffa0 	bl	800059c <__aeabi_dcmple>
 800365c:	2800      	cmp	r0, #0
 800365e:	d13a      	bne.n	80036d6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xde>
    else if (sbw <= 41.7E3)  bw = 5;
 8003660:	a32b      	add	r3, pc, #172	; (adr r3, 8003710 <_ZN10LoRa_class20set_signal_bandwidthEy+0x118>)
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	4620      	mov	r0, r4
 8003668:	4629      	mov	r1, r5
 800366a:	f7fc ff97 	bl	800059c <__aeabi_dcmple>
 800366e:	bba0      	cbnz	r0, 80036da <_ZN10LoRa_class20set_signal_bandwidthEy+0xe2>
    else if (sbw <= 62.5E3)  bw = 6;
 8003670:	a329      	add	r3, pc, #164	; (adr r3, 8003718 <_ZN10LoRa_class20set_signal_bandwidthEy+0x120>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fc ff8f 	bl	800059c <__aeabi_dcmple>
 800367e:	bb70      	cbnz	r0, 80036de <_ZN10LoRa_class20set_signal_bandwidthEy+0xe6>
    else if (sbw <= 125E3)   bw = 7;
 8003680:	a327      	add	r3, pc, #156	; (adr r3, 8003720 <_ZN10LoRa_class20set_signal_bandwidthEy+0x128>)
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f7fc ff87 	bl	800059c <__aeabi_dcmple>
 800368e:	bb40      	cbnz	r0, 80036e2 <_ZN10LoRa_class20set_signal_bandwidthEy+0xea>
    else if (sbw <= 250E3)   bw = 8;
 8003690:	a325      	add	r3, pc, #148	; (adr r3, 8003728 <_ZN10LoRa_class20set_signal_bandwidthEy+0x130>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	4620      	mov	r0, r4
 8003698:	4629      	mov	r1, r5
 800369a:	f7fc ff7f 	bl	800059c <__aeabi_dcmple>
    else                     bw = 9;
 800369e:	2800      	cmp	r0, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2308      	movne	r3, #8
 80036a4:	2309      	moveq	r3, #9
    return field_set(Bw, bw);
 80036a6:	2201      	movs	r2, #1
 80036a8:	4c21      	ldr	r4, [pc, #132]	; (8003730 <_ZN10LoRa_class20set_signal_bandwidthEy+0x138>)
 80036aa:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80036ae:	f104 030c 	add.w	r3, r4, #12
 80036b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80036b8:	4630      	mov	r0, r6
 80036ba:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036be:	f7ff fdce 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 80036c2:	b006      	add	sp, #24
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
    if (sbw <= 7.8E3)        bw = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e7ed      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 10.4E3)  bw = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e7eb      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 15.6E3)  bw = 2;
 80036ce:	2302      	movs	r3, #2
 80036d0:	e7e9      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 20.8E3)  bw = 3;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e7e7      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 31.25E3) bw = 4;
 80036d6:	2304      	movs	r3, #4
 80036d8:	e7e5      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 41.7E3)  bw = 5;
 80036da:	2305      	movs	r3, #5
 80036dc:	e7e3      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 62.5E3)  bw = 6;
 80036de:	2306      	movs	r3, #6
 80036e0:	e7e1      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
    else if (sbw <= 125E3)   bw = 7;
 80036e2:	2307      	movs	r3, #7
 80036e4:	e7df      	b.n	80036a6 <_ZN10LoRa_class20set_signal_bandwidthEy+0xae>
 80036e6:	bf00      	nop
 80036e8:	00000000 	.word	0x00000000
 80036ec:	40be7800 	.word	0x40be7800
 80036f0:	00000000 	.word	0x00000000
 80036f4:	40c45000 	.word	0x40c45000
 80036f8:	00000000 	.word	0x00000000
 80036fc:	40ce7800 	.word	0x40ce7800
 8003700:	00000000 	.word	0x00000000
 8003704:	40d45000 	.word	0x40d45000
 8003708:	00000000 	.word	0x00000000
 800370c:	40de8480 	.word	0x40de8480
 8003710:	00000000 	.word	0x00000000
 8003714:	40e45c80 	.word	0x40e45c80
 8003718:	00000000 	.word	0x00000000
 800371c:	40ee8480 	.word	0x40ee8480
 8003720:	00000000 	.word	0x00000000
 8003724:	40fe8480 	.word	0x40fe8480
 8003728:	00000000 	.word	0x00000000
 800372c:	410e8480 	.word	0x410e8480
 8003730:	20001b64 	.word	0x20001b64

08003734 <_ZN10LoRa_class10crc_enableEv>:
    return field_set(SyncWord, SW);
}

// Включение CRC на LoRa-модуле
uint8_t LoRa_class::crc_enable() {
    return field_set(RxPayloadCrcOn, 1);
 8003734:	2301      	movs	r3, #1
uint8_t LoRa_class::crc_enable() {
 8003736:	b530      	push	{r4, r5, lr}
 8003738:	4605      	mov	r5, r0
 800373a:	b087      	sub	sp, #28
    return field_set(RxPayloadCrcOn, 1);
 800373c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003740:	4c06      	ldr	r4, [pc, #24]	; (800375c <_ZN10LoRa_class10crc_enableEv+0x28>)
 8003742:	f104 030c 	add.w	r3, r4, #12
 8003746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003748:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800374c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003750:	4628      	mov	r0, r5
 8003752:	f7ff fd84 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
}
 8003756:	b007      	add	sp, #28
 8003758:	bd30      	pop	{r4, r5, pc}
 800375a:	bf00      	nop
 800375c:	20001eac 	.word	0x20001eac

08003760 <_ZN10LoRa_class5beginEybhhyh>:
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	4604      	mov	r4, r0
    uint32_t result = 0;
 8003766:	2700      	movs	r7, #0
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003768:	b08e      	sub	sp, #56	; 0x38
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 800376a:	8881      	ldrh	r1, [r0, #4]
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 800376c:	4692      	mov	sl, r2
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 800376e:	6880      	ldr	r0, [r0, #8]
 8003770:	2201      	movs	r2, #1
uint8_t LoRa_class::begin(uint64_t frequency, bool paboost, uint8_t signal_power, uint8_t SF, uint64_t SBW, uint8_t sync_word) {
 8003772:	4699      	mov	r9, r3
    uint32_t result = 0;
 8003774:	9706      	str	r7, [sp, #24]
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 8003776:	f003 fa97 	bl	8006ca8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_RESET);
 800377a:	463a      	mov	r2, r7
 800377c:	88a1      	ldrh	r1, [r4, #4]
 800377e:	68a0      	ldr	r0, [r4, #8]
 8003780:	f003 fa92 	bl	8006ca8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003784:	2014      	movs	r0, #20
 8003786:	f002 ffbd 	bl	8006704 <HAL_Delay>
    HAL_GPIO_WritePin(_reset_port, _reset_pin, GPIO_PIN_SET);
 800378a:	4e6a      	ldr	r6, [pc, #424]	; (8003934 <_ZN10LoRa_class5beginEybhhyh+0x1d4>)
 800378c:	2201      	movs	r2, #1
 800378e:	88a1      	ldrh	r1, [r4, #4]
 8003790:	68a0      	ldr	r0, [r4, #8]
 8003792:	f003 fa89 	bl	8006ca8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003796:	ad07      	add	r5, sp, #28
 8003798:	2032      	movs	r0, #50	; 0x32
 800379a:	f002 ffb3 	bl	8006704 <HAL_Delay>
    amt = field_get(Version, &result);
 800379e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80037a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80037a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    return _reg_field.get_field_value(field, value, read);
 80037aa:	ab06      	add	r3, sp, #24
 80037ac:	9304      	str	r3, [sp, #16]
 80037ae:	9705      	str	r7, [sp, #20]
 80037b0:	ab0e      	add	r3, sp, #56	; 0x38
 80037b2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80037b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80037ba:	ab07      	add	r3, sp, #28
 80037bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037be:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80037c2:	f000 fe86 	bl	80044d2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>
    if ((result != 0x12) || (amt != 1)) return 2;
 80037c6:	9b06      	ldr	r3, [sp, #24]
 80037c8:	2b12      	cmp	r3, #18
 80037ca:	f040 8098 	bne.w	80038fe <_ZN10LoRa_class5beginEybhhyh+0x19e>
 80037ce:	2801      	cmp	r0, #1
 80037d0:	f040 8095 	bne.w	80038fe <_ZN10LoRa_class5beginEybhhyh+0x19e>
    if(mode_sleep() != 1) return 3;
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff fdd5 	bl	8003384 <_ZN10LoRa_class10mode_sleepEv>
 80037da:	2801      	cmp	r0, #1
 80037dc:	4680      	mov	r8, r0
 80037de:	f040 8090 	bne.w	8003902 <_ZN10LoRa_class5beginEybhhyh+0x1a2>
    if(set_frequency(frequency) != 3) return 4;
 80037e2:	4652      	mov	r2, sl
 80037e4:	464b      	mov	r3, r9
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7ff fe9a 	bl	8003520 <_ZN10LoRa_class13set_frequencyEy>
 80037ec:	2803      	cmp	r0, #3
 80037ee:	4606      	mov	r6, r0
 80037f0:	f040 8089 	bne.w	8003906 <_ZN10LoRa_class5beginEybhhyh+0x1a6>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 80037f4:	e9cd 7804 	strd	r7, r8, [sp, #16]
 80037f8:	4d4f      	ldr	r5, [pc, #316]	; (8003938 <_ZN10LoRa_class5beginEybhhyh+0x1d8>)
 80037fa:	f105 030c 	add.w	r3, r5, #12
 80037fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003800:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003804:	4620      	mov	r0, r4
 8003806:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800380a:	f7ff fd28 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800380e:	2801      	cmp	r0, #1
 8003810:	d17b      	bne.n	800390a <_ZN10LoRa_class5beginEybhhyh+0x1aa>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 8003812:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003816:	4d49      	ldr	r5, [pc, #292]	; (800393c <_ZN10LoRa_class5beginEybhhyh+0x1dc>)
 8003818:	9304      	str	r3, [sp, #16]
 800381a:	9005      	str	r0, [sp, #20]
 800381c:	f105 030c 	add.w	r3, r5, #12
 8003820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003822:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003826:	4620      	mov	r0, r4
 8003828:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800382c:	f7ff fd17 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003830:	2801      	cmp	r0, #1
 8003832:	d16c      	bne.n	800390e <_ZN10LoRa_class5beginEybhhyh+0x1ae>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003834:	e9cd 6004 	strd	r6, r0, [sp, #16]
 8003838:	4d41      	ldr	r5, [pc, #260]	; (8003940 <_ZN10LoRa_class5beginEybhhyh+0x1e0>)
 800383a:	f105 030c 	add.w	r3, r5, #12
 800383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003840:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003844:	4620      	mov	r0, r4
 8003846:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800384a:	f7ff fd08 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800384e:	2801      	cmp	r0, #1
 8003850:	d15f      	bne.n	8003912 <_ZN10LoRa_class5beginEybhhyh+0x1b2>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003852:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8003856:	4d3b      	ldr	r5, [pc, #236]	; (8003944 <_ZN10LoRa_class5beginEybhhyh+0x1e4>)
 8003858:	f105 030c 	add.w	r3, r5, #12
 800385c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003862:	4620      	mov	r0, r4
 8003864:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003868:	f7ff fcf9 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800386c:	2801      	cmp	r0, #1
 800386e:	d152      	bne.n	8003916 <_ZN10LoRa_class5beginEybhhyh+0x1b6>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 8003870:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8003874:	4d34      	ldr	r5, [pc, #208]	; (8003948 <_ZN10LoRa_class5beginEybhhyh+0x1e8>)
 8003876:	f105 030c 	add.w	r3, r5, #12
 800387a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003880:	4620      	mov	r0, r4
 8003882:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003886:	f7ff fcea 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 800388a:	2801      	cmp	r0, #1
 800388c:	d145      	bne.n	800391a <_ZN10LoRa_class5beginEybhhyh+0x1ba>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 800388e:	2307      	movs	r3, #7
 8003890:	4620      	mov	r0, r4
 8003892:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003896:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
 800389a:	f7ff fdd1 	bl	8003440 <_ZN10LoRa_class12set_TX_powerEhbh>
 800389e:	2802      	cmp	r0, #2
 80038a0:	d13d      	bne.n	800391e <_ZN10LoRa_class5beginEybhhyh+0x1be>
    if(set_spreading_factor(SF) != 3) return 11;
 80038a2:	4620      	mov	r0, r4
 80038a4:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 80038a8:	f7ff fe5c 	bl	8003564 <_ZN10LoRa_class20set_spreading_factorEh>
 80038ac:	2803      	cmp	r0, #3
 80038ae:	d138      	bne.n	8003922 <_ZN10LoRa_class5beginEybhhyh+0x1c2>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 80038b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7ff fe9f 	bl	80035f8 <_ZN10LoRa_class20set_signal_bandwidthEy>
 80038ba:	2801      	cmp	r0, #1
 80038bc:	d133      	bne.n	8003926 <_ZN10LoRa_class5beginEybhhyh+0x1c6>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 80038be:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80038c2:	4d22      	ldr	r5, [pc, #136]	; (800394c <_ZN10LoRa_class5beginEybhhyh+0x1ec>)
 80038c4:	9304      	str	r3, [sp, #16]
 80038c6:	9005      	str	r0, [sp, #20]
 80038c8:	f105 030c 	add.w	r3, r5, #12
 80038cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80038d2:	4620      	mov	r0, r4
 80038d4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80038d8:	f7ff fcc1 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 80038dc:	2801      	cmp	r0, #1
 80038de:	d124      	bne.n	800392a <_ZN10LoRa_class5beginEybhhyh+0x1ca>
    if(crc_enable() != 1) return 14;
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff27 	bl	8003734 <_ZN10LoRa_class10crc_enableEv>
 80038e6:	2801      	cmp	r0, #1
 80038e8:	d121      	bne.n	800392e <_ZN10LoRa_class5beginEybhhyh+0x1ce>
    if(mode_STDBY() != 1) return 15;
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff fd4d 	bl	800338a <_ZN10LoRa_class10mode_STDBYEv>
 80038f0:	2801      	cmp	r0, #1
 80038f2:	bf0c      	ite	eq
 80038f4:	4638      	moveq	r0, r7
 80038f6:	200f      	movne	r0, #15
}
 80038f8:	b00e      	add	sp, #56	; 0x38
 80038fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((result != 0x12) || (amt != 1)) return 2;
 80038fe:	2002      	movs	r0, #2
 8003900:	e7fa      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(mode_sleep() != 1) return 3;
 8003902:	2003      	movs	r0, #3
 8003904:	e7f8      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_frequency(frequency) != 3) return 4;
 8003906:	2004      	movs	r0, #4
 8003908:	e7f6      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoRxBaseAddr, 0x00) != 1) return 5;
 800390a:	2005      	movs	r0, #5
 800390c:	e7f4      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(FifoTxBaseAddr, _FifoTxBaseAddr) != 1) return 6;
 800390e:	2006      	movs	r0, #6
 8003910:	e7f2      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LnaBoostHf, 0x03) != 1) return 7;
 8003912:	2007      	movs	r0, #7
 8003914:	e7f0      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(LowDataRateOptimize, 0) != 1) return 8;
 8003916:	2008      	movs	r0, #8
 8003918:	e7ee      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(AgcAutoOn, 1) != 1) return 9;
 800391a:	2009      	movs	r0, #9
 800391c:	e7ec      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_TX_power(signal_power, paboost) != 2) return 10;
 800391e:	200a      	movs	r0, #10
 8003920:	e7ea      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_spreading_factor(SF) != 3) return 11;
 8003922:	200b      	movs	r0, #11
 8003924:	e7e8      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(set_signal_bandwidth(SBW) != 1) return 12;
 8003926:	200c      	movs	r0, #12
 8003928:	e7e6      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(field_set(SyncWord, sync_word) != 1) return 13;
 800392a:	200d      	movs	r0, #13
 800392c:	e7e4      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
    if(crc_enable() != 1) return 14;
 800392e:	200e      	movs	r0, #14
 8003930:	e7e2      	b.n	80038f8 <_ZN10LoRa_class5beginEybhhyh+0x198>
 8003932:	bf00      	nop
 8003934:	20001f54 	.word	0x20001f54
 8003938:	20001c7c 	.word	0x20001c7c
 800393c:	20001cd0 	.word	0x20001cd0
 8003940:	20001d08 	.word	0x20001d08
 8003944:	20001d40 	.word	0x20001d40
 8003948:	20001b48 	.word	0x20001b48
 800394c:	20001f00 	.word	0x20001f00

08003950 <_ZN10LoRa_class11packet_rssiEv>:
    return send_packet;
}

// RSSI последнего принятого пакета
uint8_t LoRa_class::packet_rssi() {
    uint32_t rssi = 0;
 8003950:	2300      	movs	r3, #0
uint8_t LoRa_class::packet_rssi() {
 8003952:	b530      	push	{r4, r5, lr}
 8003954:	b089      	sub	sp, #36	; 0x24
    uint32_t rssi = 0;
 8003956:	9307      	str	r3, [sp, #28]
    field_get(PacketRssi, &rssi, true);
 8003958:	2301      	movs	r3, #1
uint8_t LoRa_class::packet_rssi() {
 800395a:	4604      	mov	r4, r0
    field_get(PacketRssi, &rssi, true);
 800395c:	4d12      	ldr	r5, [pc, #72]	; (80039a8 <_ZN10LoRa_class11packet_rssiEv+0x58>)
 800395e:	9305      	str	r3, [sp, #20]
 8003960:	ab07      	add	r3, sp, #28
 8003962:	9304      	str	r3, [sp, #16]
 8003964:	f105 030c 	add.w	r3, r5, #12
 8003968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800396e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff fcb2 	bl	80032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    if (_frequency < 868E6)
 8003978:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 800397c:	f7fc fd6e 	bl	800045c <__aeabi_ul2d>
 8003980:	a307      	add	r3, pc, #28	; (adr r3, 80039a0 <_ZN10LoRa_class11packet_rssiEv+0x50>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fdff 	bl	8000588 <__aeabi_dcmplt>
 800398a:	9b07      	ldr	r3, [sp, #28]
 800398c:	b118      	cbz	r0, 8003996 <_ZN10LoRa_class11packet_rssiEv+0x46>
        rssi -= 164;
 800398e:	3ba4      	subs	r3, #164	; 0xa4
    else
        rssi -= 157;
    return rssi;
}
 8003990:	b2d8      	uxtb	r0, r3
 8003992:	b009      	add	sp, #36	; 0x24
 8003994:	bd30      	pop	{r4, r5, pc}
        rssi -= 157;
 8003996:	3b9d      	subs	r3, #157	; 0x9d
 8003998:	e7fa      	b.n	8003990 <_ZN10LoRa_class11packet_rssiEv+0x40>
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w
 80039a0:	80000000 	.word	0x80000000
 80039a4:	41c9de50 	.word	0x41c9de50
 80039a8:	20001e04 	.word	0x20001e04

080039ac <_ZN10LoRa_class16read_packet_dataEbbb>:
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 80039ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b0:	4607      	mov	r7, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	4690      	mov	r8, r2
    if (f_rssi)
 80039b6:	461c      	mov	r4, r3
class LoRa_packet LoRa_class::read_packet_data(bool crc_err, bool f_rssi, bool f_snr) {
 80039b8:	b08b      	sub	sp, #44	; 0x2c
    if (f_rssi)
 80039ba:	b11b      	cbz	r3, 80039c4 <_ZN10LoRa_class16read_packet_dataEbbb+0x18>
        rssi = packet_rssi();
 80039bc:	4608      	mov	r0, r1
 80039be:	f7ff ffc7 	bl	8003950 <_ZN10LoRa_class11packet_rssiEv>
 80039c2:	4604      	mov	r4, r0
    field_get(FifoRxBytesNb, &length, true);
 80039c4:	2601      	movs	r6, #1
 80039c6:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8003a70 <_ZN10LoRa_class16read_packet_dataEbbb+0xc4>
 80039ca:	ab07      	add	r3, sp, #28
 80039cc:	9304      	str	r3, [sp, #16]
 80039ce:	9605      	str	r6, [sp, #20]
 80039d0:	f10c 030c 	add.w	r3, ip, #12
 80039d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80039da:	4628      	mov	r0, r5
 80039dc:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 80039e0:	f7ff fc7c 	bl	80032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_get(FifoRxCurrentAddr, &adr, true);
 80039e4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8003a74 <_ZN10LoRa_class16read_packet_dataEbbb+0xc8>
 80039e8:	ab08      	add	r3, sp, #32
 80039ea:	9304      	str	r3, [sp, #16]
 80039ec:	9605      	str	r6, [sp, #20]
 80039ee:	f10c 030c 	add.w	r3, ip, #12
 80039f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039f4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80039f8:	4628      	mov	r0, r5
 80039fa:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 80039fe:	f7ff fc6d 	bl	80032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>
    field_set(FifoAddrPtr, adr);
 8003a02:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003a78 <_ZN10LoRa_class16read_packet_dataEbbb+0xcc>
 8003a06:	9b08      	ldr	r3, [sp, #32]
 8003a08:	9605      	str	r6, [sp, #20]
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	f10c 030c 	add.w	r3, ip, #12
 8003a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a12:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003a16:	4628      	mov	r0, r5
 8003a18:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 8003a1c:	f7ff fc1f 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003a20:	2200      	movs	r2, #0
 8003a22:	9400      	str	r4, [sp, #0]
    uint32_t data32 = 0;
 8003a24:	2400      	movs	r4, #0
        field_get(Fifo, &data32, true);
 8003a26:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003a7c <_ZN10LoRa_class16read_packet_dataEbbb+0xd0>
    class LoRa_packet send_packet(nullptr, 0, crc_err, rssi);
 8003a2a:	4643      	mov	r3, r8
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f000 fb03 	bl	800403a <_ZN11LoRa_packetC1EPKhhbh>
        field_get(Fifo, &data32, true);
 8003a34:	f109 080c 	add.w	r8, r9, #12
    uint32_t data32 = 0;
 8003a38:	9409      	str	r4, [sp, #36]	; 0x24
    for(unsigned int i = 0; i < length; ++i) {
 8003a3a:	9b07      	ldr	r3, [sp, #28]
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d912      	bls.n	8003a66 <_ZN10LoRa_class16read_packet_dataEbbb+0xba>
        field_get(Fifo, &data32, true);
 8003a40:	ab09      	add	r3, sp, #36	; 0x24
 8003a42:	9605      	str	r6, [sp, #20]
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8003a4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003a4e:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8003a52:	4628      	mov	r0, r5
 8003a54:	f7ff fc42 	bl	80032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>
        send_packet.add_packet_data(data32);
 8003a58:	4638      	mov	r0, r7
 8003a5a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8003a5e:	f000 fada 	bl	8004016 <_ZN11LoRa_packet15add_packet_dataEh>
    for(unsigned int i = 0; i < length; ++i) {
 8003a62:	3401      	adds	r4, #1
 8003a64:	e7e9      	b.n	8003a3a <_ZN10LoRa_class16read_packet_dataEbbb+0x8e>
}
 8003a66:	4638      	mov	r0, r7
 8003a68:	b00b      	add	sp, #44	; 0x2c
 8003a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a6e:	bf00      	nop
 8003a70:	20001c98 	.word	0x20001c98
 8003a74:	20001cb4 	.word	0x20001cb4
 8003a78:	20001c60 	.word	0x20001c60
 8003a7c:	20001c44 	.word	0x20001c44

08003a80 <_ZN10LoRa_class15receiver_packetEhmbb>:
class LoRa_packet LoRa_class::receiver_packet(uint8_t count, ulong wait, bool rssi, bool snr) {
 8003a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a84:	b0bf      	sub	sp, #252	; 0xfc
 8003a86:	4690      	mov	r8, r2
 8003a88:	460c      	mov	r4, r1
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	4683      	mov	fp, r0
    class LoRa_packet send_packet;
 8003a8e:	f000 fab5 	bl	8003ffc <_ZN11LoRa_packetC1Ev>
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8003a92:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8003d58 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>
 8003a96:	ae14      	add	r6, sp, #80	; 0x50
 8003a98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003a9e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003aa2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8003aa6:	4ea7      	ldr	r6, [pc, #668]	; (8003d44 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c4>)
 8003aa8:	af1b      	add	r7, sp, #108	; 0x6c
 8003aaa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003aac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003aae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003ab2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8003ab6:	4fa4      	ldr	r7, [pc, #656]	; (8003d48 <_ZN10LoRa_class15receiver_packetEhmbb+0x2c8>)
 8003ab8:	f10d 0e88 	add.w	lr, sp, #136	; 0x88
 8003abc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003abe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ac2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003ac6:	f1a6 0910 	sub.w	r9, r6, #16
    Address_field fields[3] = {RxTimeout, RxDone, PayloadCrcError};
 8003aca:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003ace:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003ad2:	f10d 0ea4 	add.w	lr, sp, #164	; 0xa4
 8003ad6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003ada:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003ade:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003d5c <_ZN10LoRa_class15receiver_packetEhmbb+0x2dc>
 8003ae2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003ae6:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003aea:	f10d 0ec0 	add.w	lr, sp, #192	; 0xc0
 8003aee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003af2:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003af6:	f1a7 0910 	sub.w	r9, r7, #16
 8003afa:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8003afe:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8003b02:	f10d 0edc 	add.w	lr, sp, #220	; 0xdc
 8003b06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003b0a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003b0e:	f1ac 0310 	sub.w	r3, ip, #16
 8003b12:	9308      	str	r3, [sp, #32]
    if(count <= 1) {
 8003b14:	f1b8 0f01 	cmp.w	r8, #1
 8003b18:	f1a6 0310 	sub.w	r3, r6, #16
    Address_field flags[3] = {RxDone, ValidHeader, PayloadCrcError};
 8003b1c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    if(count <= 1) {
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	d875      	bhi.n	8003c10 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
        if(count == 1)
 8003b24:	d103      	bne.n	8003b2e <_ZN10LoRa_class15receiver_packetEhmbb+0xae>
            mode_RX_single();
 8003b26:	4641      	mov	r1, r8
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff fc53 	bl	80033d4 <_ZN10LoRa_class14mode_RX_singleEb>
        uint32_t values[3] = {0, 0, 0};
 8003b2e:	2300      	movs	r3, #0
        rx_done = rx_timeout = crc_err = 0;
 8003b30:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        uint32_t values[3] = {0, 0, 0};
 8003b34:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
        rx_done = rx_timeout = crc_err = 0;
 8003b38:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
        uint32_t values[3] = {0, 0, 0};
 8003b3c:	9313      	str	r3, [sp, #76]	; 0x4c
        rx_done = rx_timeout = crc_err = 0;
 8003b3e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        if(wait == 0)
 8003b42:	b325      	cbz	r5, 8003b8e <_ZN10LoRa_class15receiver_packetEhmbb+0x10e>
            time = HAL_GetTick();
 8003b44:	f002 fdd8 	bl	80066f8 <HAL_GetTick>
 8003b48:	4681      	mov	r9, r0
        bool signal = false;
 8003b4a:	2700      	movs	r7, #0
 8003b4c:	4e7f      	ldr	r6, [pc, #508]	; (8003d4c <_ZN10LoRa_class15receiver_packetEhmbb+0x2cc>)
        for(start_time = time, read_time = time; (wait == 0) || (HAL_GetTick() - time < wait);) {
 8003b4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	d066      	beq.n	8003c24 <_ZN10LoRa_class15receiver_packetEhmbb+0x1a4>
 8003b56:	f002 fdcf 	bl	80066f8 <HAL_GetTick>
 8003b5a:	eba0 0009 	sub.w	r0, r0, r9
 8003b5e:	42a8      	cmp	r0, r5
 8003b60:	d35a      	bcc.n	8003c18 <_ZN10LoRa_class15receiver_packetEhmbb+0x198>
        if((rx_done > 0) /*&& (crc_err == 0)*/) {
 8003b62:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8003b66:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8003b6a:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8003b6e:	bb0b      	cbnz	r3, 8003bb4 <_ZN10LoRa_class15receiver_packetEhmbb+0x134>
            field_get(fields, values, 3, true);
 8003b70:	2301      	movs	r3, #1
 8003b72:	aa11      	add	r2, sp, #68	; 0x44
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	a914      	add	r1, sp, #80	; 0x50
 8003b78:	2303      	movs	r3, #3
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f7ff fbc9 	bl	8003312 <_ZN10LoRa_class9field_getEP13Address_fieldPmhb>
            _reg_field.clear_flags(flags, 3);
 8003b80:	463b      	mov	r3, r7
 8003b82:	2203      	movs	r2, #3
 8003b84:	4630      	mov	r0, r6
 8003b86:	a929      	add	r1, sp, #164	; 0xa4
 8003b88:	f000 fd56 	bl	8004638 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
 8003b8c:	e03c      	b.n	8003c08 <_ZN10LoRa_class15receiver_packetEhmbb+0x188>
            time = 0;
 8003b8e:	46a9      	mov	r9, r5
 8003b90:	e7db      	b.n	8003b4a <_ZN10LoRa_class15receiver_packetEhmbb+0xca>
                        pin_crc_err = GPIO_PIN_RESET;
 8003b92:	910e      	str	r1, [sp, #56]	; 0x38
 8003b94:	e05d      	b.n	8003c52 <_ZN10LoRa_class15receiver_packetEhmbb+0x1d2>
                        signal = true;
 8003b96:	461f      	mov	r7, r3
 8003b98:	e065      	b.n	8003c66 <_ZN10LoRa_class15receiver_packetEhmbb+0x1e6>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8003b9a:	42d3      	cmn	r3, r2
                    		work_read_flag[2]++; // -
 8003b9c:	bf15      	itete	ne
 8003b9e:	68b3      	ldrne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8003ba0:	68f3      	ldreq	r3, [r6, #12]
                    		work_read_flag[2]++; // -
 8003ba2:	3301      	addne	r3, #1
                    		work_read_flag[3]++; // +
 8003ba4:	3301      	addeq	r3, #1
                    		work_read_flag[2]++; // -
 8003ba6:	bf14      	ite	ne
 8003ba8:	60b3      	strne	r3, [r6, #8]
                    		work_read_flag[3]++; // +
 8003baa:	60f3      	streq	r3, [r6, #12]
 8003bac:	e095      	b.n	8003cda <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
                if(wait == 0) {
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	d1d1      	bne.n	8003b56 <_ZN10LoRa_class15receiver_packetEhmbb+0xd6>
 8003bb2:	e7d6      	b.n	8003b62 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
            _reg_field.clear_flags(RxDone);
 8003bb4:	2700      	movs	r7, #0
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d0>)
 8003bb8:	9704      	str	r7, [sp, #16]
 8003bba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bbc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc6:	f000 fd8b 	bl	80046e0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            _reg_field.clear_flags(RxTimeout);
 8003bca:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 8003bcc:	9704      	str	r7, [sp, #16]
 8003bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003bd4:	9b08      	ldr	r3, [sp, #32]
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bda:	f000 fd81 	bl	80046e0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
            send_packet = read_packet_data(crc_err, rssi, snr);
 8003bde:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8003be2:	f89d 3124 	ldrb.w	r3, [sp, #292]	; 0x124
 8003be6:	1bd2      	subs	r2, r2, r7
 8003be8:	bf18      	it	ne
 8003bea:	2201      	movne	r2, #1
 8003bec:	4621      	mov	r1, r4
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	a80f      	add	r0, sp, #60	; 0x3c
 8003bf2:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8003bf6:	f7ff fed9 	bl	80039ac <_ZN10LoRa_class16read_packet_dataEbbb>
 8003bfa:	4658      	mov	r0, fp
 8003bfc:	a90f      	add	r1, sp, #60	; 0x3c
 8003bfe:	f000 fa69 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
 8003c02:	a80f      	add	r0, sp, #60	; 0x3c
 8003c04:	f000 fa02 	bl	800400c <_ZN11LoRa_packetD1Ev>
        if(wait != 0)
 8003c08:	b115      	cbz	r5, 8003c10 <_ZN10LoRa_class15receiver_packetEhmbb+0x190>
            mode_sleep();
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff fbba 	bl	8003384 <_ZN10LoRa_class10mode_sleepEv>
}
 8003c10:	4658      	mov	r0, fp
 8003c12:	b03f      	add	sp, #252	; 0xfc
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if((wait == 0) || (HAL_GetTick() - read_time > 10U)) {
 8003c18:	f002 fd6e 	bl	80066f8 <HAL_GetTick>
 8003c1c:	eba0 0009 	sub.w	r0, r0, r9
 8003c20:	280a      	cmp	r0, #10
 8003c22:	d996      	bls.n	8003b52 <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
            	if ((_dio0_pin != 0) && (_dio1_pin != 0)) {
 8003c24:	8aa1      	ldrh	r1, [r4, #20]
 8003c26:	2900      	cmp	r1, #0
 8003c28:	f000 8087 	beq.w	8003d3a <_ZN10LoRa_class15receiver_packetEhmbb+0x2ba>
 8003c2c:	8ba3      	ldrh	r3, [r4, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d07d      	beq.n	8003d2e <_ZN10LoRa_class15receiver_packetEhmbb+0x2ae>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8003c32:	69a0      	ldr	r0, [r4, #24]
 8003c34:	f003 f832 	bl	8006c9c <HAL_GPIO_ReadPin>
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8003c38:	8ba1      	ldrh	r1, [r4, #28]
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8003c3a:	900c      	str	r0, [sp, #48]	; 0x30
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8003c3c:	6a20      	ldr	r0, [r4, #32]
 8003c3e:	f003 f82d 	bl	8006c9c <HAL_GPIO_ReadPin>
                    if (_dio3_pin != 0) {
 8003c42:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
                	pin_timeout = HAL_GPIO_ReadPin(_dio1_port, _dio1_pin);
 8003c44:	900d      	str	r0, [sp, #52]	; 0x34
                    if (_dio3_pin != 0) {
 8003c46:	2900      	cmp	r1, #0
 8003c48:	d0a3      	beq.n	8003b92 <_ZN10LoRa_class15receiver_packetEhmbb+0x112>
                    	pin_crc_err = HAL_GPIO_ReadPin(_dio3_port, _dio3_pin);
 8003c4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c4c:	f003 f826 	bl	8006c9c <HAL_GPIO_ReadPin>
 8003c50:	900e      	str	r0, [sp, #56]	; 0x38
                    if ((pin_done == GPIO_PIN_SET) || (pin_timeout == GPIO_PIN_SET) || (pin_crc_err == GPIO_PIN_SET)) {
 8003c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d09e      	beq.n	8003b96 <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 8003c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d09b      	beq.n	8003b96 <_ZN10LoRa_class15receiver_packetEhmbb+0x116>
 8003c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                        signal = true;
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	bf08      	it	eq
 8003c64:	2701      	moveq	r7, #1
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8003c66:	f1b8 0f00 	cmp.w	r8, #0
 8003c6a:	d100      	bne.n	8003c6e <_ZN10LoRa_class15receiver_packetEhmbb+0x1ee>
 8003c6c:	b15d      	cbz	r5, 8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003c6e:	8aa3      	ldrh	r3, [r4, #20]
 8003c70:	b14b      	cbz	r3, 8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003c72:	8ba3      	ldrh	r3, [r4, #28]
 8003c74:	b13b      	cbz	r3, 8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003c76:	f002 fd3f 	bl	80066f8 <HAL_GetTick>
 8003c7a:	9b07      	ldr	r3, [sp, #28]
 8003c7c:	1ac0      	subs	r0, r0, r3
 8003c7e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003c82:	d800      	bhi.n	8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003c84:	b34f      	cbz	r7, 8003cda <_ZN10LoRa_class15receiver_packetEhmbb+0x25a>
    return _reg_field.get_field_value(fields, values, amt, read);
 8003c86:	2301      	movs	r3, #1
 8003c88:	aa11      	add	r2, sp, #68	; 0x44
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	a914      	add	r1, sp, #80	; 0x50
 8003c8e:	2303      	movs	r3, #3
 8003c90:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003c94:	f000 fbf5 	bl	8004482 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
                    if(amt == 3) {
 8003c98:	2803      	cmp	r0, #3
 8003c9a:	d10b      	bne.n	8003cb4 <_ZN10LoRa_class15receiver_packetEhmbb+0x234>
                        rx_timeout = values[0];
 8003c9c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003ca0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
                        rx_done = values[1];
 8003ca4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8003ca8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                        crc_err = values[2];
 8003cac:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003cb0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8003cb4:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8003cb8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8003cbc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8003cc0:	440b      	add	r3, r1
                    if(signal) {
 8003cc2:	2f00      	cmp	r7, #0
 8003cc4:	f43f af69 	beq.w	8003b9a <_ZN10LoRa_class15receiver_packetEhmbb+0x11a>
                    	if(rx_timeout + rx_done + crc_err != 0) {
 8003cc8:	42d3      	cmn	r3, r2
                    		work_read_flag[0]++; // +
 8003cca:	bf15      	itete	ne
 8003ccc:	6833      	ldrne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 8003cce:	6873      	ldreq	r3, [r6, #4]
                    		work_read_flag[0]++; // +
 8003cd0:	3301      	addne	r3, #1
                    		work_read_flag[1]++; // -
 8003cd2:	3301      	addeq	r3, #1
                    		work_read_flag[0]++; // +
 8003cd4:	bf14      	ite	ne
 8003cd6:	6033      	strne	r3, [r6, #0]
                    		work_read_flag[1]++; // -
 8003cd8:	6073      	streq	r3, [r6, #4]
                if(rx_done != 0) {
 8003cda:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8003cde:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f47f af3d 	bne.w	8003b62 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                if(rx_timeout != 0) {
 8003ce8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f43f af5e 	beq.w	8003bae <_ZN10LoRa_class15receiver_packetEhmbb+0x12e>
                    _reg_field.clear_flags(RxTimeout);
 8003cf2:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d4>)
 8003cf4:	f8cd a010 	str.w	sl, [sp, #16]
 8003cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cfa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <_ZN10LoRa_class15receiver_packetEhmbb+0x2d8>)
 8003d00:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8003d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d06:	f000 fceb 	bl	80046e0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>
                    mode_RX_single(false);
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7ff fb61 	bl	80033d4 <_ZN10LoRa_class14mode_RX_singleEb>
                    rx_done = rx_timeout = crc_err = 0;
 8003d12:	f88d a02f 	strb.w	sl, [sp, #47]	; 0x2f
 8003d16:	f88d a02e 	strb.w	sl, [sp, #46]	; 0x2e
 8003d1a:	f88d a02d 	strb.w	sl, [sp, #45]	; 0x2d
                    if(wait != 0)
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	f43f af1f 	beq.w	8003b62 <_ZN10LoRa_class15receiver_packetEhmbb+0xe2>
                        start_time = HAL_GetTick();
 8003d24:	f002 fce8 	bl	80066f8 <HAL_GetTick>
                    signal = false;
 8003d28:	4657      	mov	r7, sl
                        start_time = HAL_GetTick();
 8003d2a:	9007      	str	r0, [sp, #28]
                if(wait == 0) {
 8003d2c:	e711      	b.n	8003b52 <_ZN10LoRa_class15receiver_packetEhmbb+0xd2>
                if (((count == 0) && (wait == 0)) || (_dio0_pin == 0) || (_dio1_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8003d2e:	f1b8 0f00 	cmp.w	r8, #0
 8003d32:	d1a8      	bne.n	8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003d34:	2d00      	cmp	r5, #0
 8003d36:	d0a6      	beq.n	8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003d38:	e79b      	b.n	8003c72 <_ZN10LoRa_class15receiver_packetEhmbb+0x1f2>
 8003d3a:	f1b8 0f00 	cmp.w	r8, #0
 8003d3e:	d095      	beq.n	8003c6c <_ZN10LoRa_class15receiver_packetEhmbb+0x1ec>
 8003d40:	e7a1      	b.n	8003c86 <_ZN10LoRa_class15receiver_packetEhmbb+0x206>
 8003d42:	bf00      	nop
 8003d44:	20001e90 	.word	0x20001e90
 8003d48:	20001e3c 	.word	0x20001e3c
 8003d4c:	200006b0 	.word	0x200006b0
 8003d50:	20001e9c 	.word	0x20001e9c
 8003d54:	20001ed4 	.word	0x20001ed4
 8003d58:	20001ec8 	.word	0x20001ec8
 8003d5c:	20001f38 	.word	0x20001f38

08003d60 <_ZN10LoRa_class12packet_beginEv>:
    if (packet_end(wait))
        return true;
    return false;
}
// Объявление пакета
bool LoRa_class::packet_begin() {
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	4604      	mov	r4, r0
    mode_STDBY();
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 8003d64:	2601      	movs	r6, #1
bool LoRa_class::packet_begin() {
 8003d66:	b086      	sub	sp, #24
    mode_STDBY();
 8003d68:	f7ff fb0f 	bl	800338a <_ZN10LoRa_class10mode_STDBYEv>
    field_set(FifoAddrPtr, _FifoTxBaseAddr);
 8003d6c:	4d0a      	ldr	r5, [pc, #40]	; (8003d98 <_ZN10LoRa_class12packet_beginEv+0x38>)
 8003d6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003d72:	9605      	str	r6, [sp, #20]
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	f105 030c 	add.w	r3, r5, #12
 8003d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d7c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003d80:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff fa6a 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    _packet_length = 0;
 8003d8a:	2300      	movs	r3, #0
    return true;
}
 8003d8c:	4630      	mov	r0, r6
    _packet_length = 0;
 8003d8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003d92:	b006      	add	sp, #24
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop
 8003d98:	20001c60 	.word	0x20001c60

08003d9c <_ZN10LoRa_class12packet_writeEPhh>:
// Отправка данных в пакет buffer, size=None? (len)
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len + _packet_length > 255)
 8003da0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8003da4:	4604      	mov	r4, r0
    if (len + _packet_length > 255)
 8003da6:	4413      	add	r3, r2
 8003da8:	2bff      	cmp	r3, #255	; 0xff
bool LoRa_class::packet_write(uint8_t* packet, uint8_t len) {
 8003daa:	4689      	mov	r9, r1
 8003dac:	4690      	mov	r8, r2
 8003dae:	b086      	sub	sp, #24
    if (len + _packet_length > 255)
 8003db0:	dc2d      	bgt.n	8003e0e <_ZN10LoRa_class12packet_writeEPhh+0x72>
        return true;
    _packet_length += len;
    for(int i = 0; i < len; ++i)
 8003db2:	2500      	movs	r5, #0
 8003db4:	f04f 0a01 	mov.w	sl, #1
        field_set(Fifo, packet[i]);
 8003db8:	4e16      	ldr	r6, [pc, #88]	; (8003e14 <_ZN10LoRa_class12packet_writeEPhh+0x78>)
    _packet_length += len;
 8003dba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
        field_set(Fifo, packet[i]);
 8003dbe:	f106 070c 	add.w	r7, r6, #12
    for(int i = 0; i < len; ++i)
 8003dc2:	45a8      	cmp	r8, r5
 8003dc4:	dd0f      	ble.n	8003de6 <_ZN10LoRa_class12packet_writeEPhh+0x4a>
        field_set(Fifo, packet[i]);
 8003dc6:	f819 3005 	ldrb.w	r3, [r9, r5]
 8003dca:	f8cd a014 	str.w	sl, [sp, #20]
 8003dce:	9304      	str	r3, [sp, #16]
 8003dd0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003dd4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dd8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff fa3e 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
    for(int i = 0; i < len; ++i)
 8003de2:	3501      	adds	r5, #1
 8003de4:	e7ed      	b.n	8003dc2 <_ZN10LoRa_class12packet_writeEPhh+0x26>
    field_set(PayloadLength, _packet_length);
 8003de6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003dea:	4d0b      	ldr	r5, [pc, #44]	; (8003e18 <_ZN10LoRa_class12packet_writeEPhh+0x7c>)
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	f8cd a014 	str.w	sl, [sp, #20]
 8003df2:	f105 030c 	add.w	r3, r5, #12
 8003df6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003e02:	f7ff fa2c 	bl	800325e <_ZN10LoRa_class9field_setE13Address_fieldmb>
 8003e06:	2000      	movs	r0, #0
    return false;
}
 8003e08:	b006      	add	sp, #24
 8003e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7fa      	b.n	8003e08 <_ZN10LoRa_class12packet_writeEPhh+0x6c>
 8003e12:	bf00      	nop
 8003e14:	20001c44 	.word	0x20001c44
 8003e18:	20001e58 	.word	0x20001e58

08003e1c <_ZN10LoRa_class10packet_endEmb>:
    field_set(PayloadLength, _packet_length);
    return false;
}

// Отправка пакета
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	4688      	mov	r8, r1
 8003e22:	b089      	sub	sp, #36	; 0x24
    mode_TX();
 8003e24:	2101      	movs	r1, #1
bool LoRa_class::packet_end(uint32_t wait, bool sleep) {
 8003e26:	4604      	mov	r4, r0
 8003e28:	4617      	mov	r7, r2
    mode_TX();
 8003e2a:	f7ff fab1 	bl	8003390 <_ZN10LoRa_class7mode_TXEb>
    bool result = false;
    if(wait > 0) {
 8003e2e:	f1b8 0f00 	cmp.w	r8, #0
 8003e32:	d03f      	beq.n	8003eb4 <_ZN10LoRa_class10packet_endEmb+0x98>
        uint32_t tx_done = 0;
 8003e34:	2500      	movs	r5, #0
 8003e36:	9507      	str	r5, [sp, #28]
        bool signal = false;
        uint32_t time, start_time, read_time;
        int pin_done;
        tx_done = 0;
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8003e38:	f002 fc5e 	bl	80066f8 <HAL_GetTick>
                        signal = true;
                    }
                }
                // Если неработают DIO выходы, был signal или превышено время ожидания
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
                    field_get(TxDone, &tx_done, true);
 8003e3c:	f04f 0b01 	mov.w	fp, #1
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8003e40:	4606      	mov	r6, r0
                    field_get(TxDone, &tx_done, true);
 8003e42:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003ebc <_ZN10LoRa_class10packet_endEmb+0xa0>
 8003e46:	f109 0a0c 	add.w	sl, r9, #12
        for(time = HAL_GetTick(), start_time = time, read_time = time; HAL_GetTick() - time < wait;) {
 8003e4a:	f002 fc55 	bl	80066f8 <HAL_GetTick>
 8003e4e:	1b80      	subs	r0, r0, r6
 8003e50:	4580      	cmp	r8, r0
 8003e52:	d929      	bls.n	8003ea8 <_ZN10LoRa_class10packet_endEmb+0x8c>
            if(HAL_GetTick() - read_time > 10) {
 8003e54:	f002 fc50 	bl	80066f8 <HAL_GetTick>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	280a      	cmp	r0, #10
 8003e5c:	d9f5      	bls.n	8003e4a <_ZN10LoRa_class10packet_endEmb+0x2e>
                if (_dio0_pin != 0) {
 8003e5e:	8aa1      	ldrh	r1, [r4, #20]
 8003e60:	b129      	cbz	r1, 8003e6e <_ZN10LoRa_class10packet_endEmb+0x52>
                	pin_done = HAL_GPIO_ReadPin(_dio0_port, _dio0_pin);
 8003e62:	69a0      	ldr	r0, [r4, #24]
 8003e64:	f002 ff1a 	bl	8006c9c <HAL_GPIO_ReadPin>
                        signal = true;
 8003e68:	2801      	cmp	r0, #1
 8003e6a:	bf08      	it	eq
 8003e6c:	2501      	moveq	r5, #1
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8003e6e:	8aa3      	ldrh	r3, [r4, #20]
 8003e70:	b98b      	cbnz	r3, 8003e96 <_ZN10LoRa_class10packet_endEmb+0x7a>
                    field_get(TxDone, &tx_done, true);
 8003e72:	ab07      	add	r3, sp, #28
 8003e74:	f8cd b014 	str.w	fp, [sp, #20]
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8003e7e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8003e82:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8003e86:	4620      	mov	r0, r4
 8003e88:	f7ff fa28 	bl	80032dc <_ZN10LoRa_class9field_getE13Address_fieldPmb>
                }
                if(tx_done != 0) {
 8003e8c:	9b07      	ldr	r3, [sp, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0db      	beq.n	8003e4a <_ZN10LoRa_class10packet_endEmb+0x2e>
                    break;
                }
            }
        }
        if(sleep && (tx_done != 0)) {
 8003e92:	b967      	cbnz	r7, 8003eae <_ZN10LoRa_class10packet_endEmb+0x92>
 8003e94:	e00e      	b.n	8003eb4 <_ZN10LoRa_class10packet_endEmb+0x98>
                if ((_dio0_pin == 0) || (HAL_GetTick() - start_time > 2000) || signal) {
 8003e96:	f002 fc2f 	bl	80066f8 <HAL_GetTick>
 8003e9a:	1b80      	subs	r0, r0, r6
 8003e9c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003ea0:	d8e7      	bhi.n	8003e72 <_ZN10LoRa_class10packet_endEmb+0x56>
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	d1e5      	bne.n	8003e72 <_ZN10LoRa_class10packet_endEmb+0x56>
 8003ea6:	e7f1      	b.n	8003e8c <_ZN10LoRa_class10packet_endEmb+0x70>
        if(sleep && (tx_done != 0)) {
 8003ea8:	b127      	cbz	r7, 8003eb4 <_ZN10LoRa_class10packet_endEmb+0x98>
 8003eaa:	9b07      	ldr	r3, [sp, #28]
 8003eac:	b113      	cbz	r3, 8003eb4 <_ZN10LoRa_class10packet_endEmb+0x98>
            mode_sleep();
 8003eae:	4620      	mov	r0, r4
 8003eb0:	f7ff fa68 	bl	8003384 <_ZN10LoRa_class10mode_sleepEv>
        }
    }
    return result;
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	b009      	add	sp, #36	; 0x24
 8003eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebc:	20001f1c 	.word	0x20001f1c

08003ec0 <_ZN10LoRa_class13sender_packetEPhhm>:
bool LoRa_class::sender_packet(uint8_t* packet, uint8_t len, uint32_t wait) {
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	460e      	mov	r6, r1
 8003ec6:	4617      	mov	r7, r2
 8003ec8:	461d      	mov	r5, r3
    packet_begin();
 8003eca:	f7ff ff49 	bl	8003d60 <_ZN10LoRa_class12packet_beginEv>
    if (packet_write(packet, len))
 8003ece:	463a      	mov	r2, r7
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff ff62 	bl	8003d9c <_ZN10LoRa_class12packet_writeEPhh>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	b928      	cbnz	r0, 8003ee8 <_ZN10LoRa_class13sender_packetEPhhm+0x28>
    if (packet_end(wait))
 8003edc:	4629      	mov	r1, r5
 8003ede:	4620      	mov	r0, r4
}
 8003ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    if (packet_end(wait))
 8003ee4:	f7ff bf9a 	b.w	8003e1c <_ZN10LoRa_class10packet_endEmb>
}
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eec <_GLOBAL__sub_I_LoRa>:
class LoRa_class LoRa;
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <_GLOBAL__sub_I_LoRa+0x8>)
 8003eee:	f7ff b9ab 	b.w	8003248 <_ZN10LoRa_classC1Ev>
 8003ef2:	bf00      	nop
 8003ef4:	20000360 	.word	0x20000360

08003ef8 <_GLOBAL__sub_D_LoRa>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <_GLOBAL__sub_D_LoRa+0x8>)
 8003efa:	f7ff b975 	b.w	80031e8 <_ZN10LoRa_classD1Ev>
 8003efe:	bf00      	nop
 8003f00:	20000360 	.word	0x20000360

08003f04 <_ZN16LoRa_packet_data8add_dataEh>:
LoRa_packet_data lora_packet_data[SIZE_LORA_PACKET_BUFFER];
#endif


bool LoRa_packet_data::add_data(uint8_t data_byte) {
    if(len >= SIZE_LORA_PACKET_MAX_LEN)
 8003f04:	7843      	ldrb	r3, [r0, #1]
 8003f06:	2b31      	cmp	r3, #49	; 0x31
        return true;
    data[len++] = data_byte;
 8003f08:	bf9f      	itttt	ls
 8003f0a:	1c5a      	addls	r2, r3, #1
 8003f0c:	7042      	strbls	r2, [r0, #1]
 8003f0e:	18c0      	addls	r0, r0, r3
 8003f10:	7081      	strbls	r1, [r0, #2]
    return false;
 8003f12:	bf94      	ite	ls
 8003f14:	2000      	movls	r0, #0
        return true;
 8003f16:	2001      	movhi	r0, #1
}
 8003f18:	4770      	bx	lr

08003f1a <_ZN16LoRa_packet_data8add_dataEPKhh>:
bool LoRa_packet_data::add_data(const uint8_t* data_byte, uint8_t amt_byte) {
 8003f1a:	b570      	push	{r4, r5, r6, lr}
    if((len + amt_byte) > SIZE_LORA_PACKET_MAX_LEN)
 8003f1c:	7843      	ldrb	r3, [r0, #1]
 8003f1e:	189d      	adds	r5, r3, r2
 8003f20:	2d32      	cmp	r5, #50	; 0x32
 8003f22:	dc0c      	bgt.n	8003f3e <_ZN16LoRa_packet_data8add_dataEPKhh+0x24>
        return true;
    for(size_t i = 0; i < amt_byte; ++i)
 8003f24:	2400      	movs	r4, #0
 8003f26:	3302      	adds	r3, #2
 8003f28:	4403      	add	r3, r0
 8003f2a:	42a2      	cmp	r2, r4
 8003f2c:	d904      	bls.n	8003f38 <_ZN16LoRa_packet_data8add_dataEPKhh+0x1e>
        data[i+len] = data_byte[i];
 8003f2e:	5d0e      	ldrb	r6, [r1, r4]
    for(size_t i = 0; i < amt_byte; ++i)
 8003f30:	3401      	adds	r4, #1
        data[i+len] = data_byte[i];
 8003f32:	f803 6b01 	strb.w	r6, [r3], #1
    for(size_t i = 0; i < amt_byte; ++i)
 8003f36:	e7f8      	b.n	8003f2a <_ZN16LoRa_packet_data8add_dataEPKhh+0x10>
    len += amt_byte;
 8003f38:	7045      	strb	r5, [r0, #1]
    return false;
 8003f3a:	2000      	movs	r0, #0
}
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
        return true;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e7fc      	b.n	8003f3c <_ZN16LoRa_packet_data8add_dataEPKhh+0x22>

08003f42 <_ZN16LoRa_packet_data8set_dataEPKhh>:

bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 8003f42:	2a32      	cmp	r2, #50	; 0x32
bool LoRa_packet_data::set_data(const uint8_t* set_data, uint8_t set_len) {
 8003f44:	b510      	push	{r4, lr}
    if(set_len > SIZE_LORA_PACKET_MAX_LEN)
 8003f46:	d80f      	bhi.n	8003f68 <_ZN16LoRa_packet_data8set_dataEPKhh+0x26>
        return true;
    if((set_data != nullptr) && (set_len != 0)){
 8003f48:	b159      	cbz	r1, 8003f62 <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
 8003f4a:	b152      	cbz	r2, 8003f62 <_ZN16LoRa_packet_data8set_dataEPKhh+0x20>
        len = set_len;
        for(int i = 0; i < set_len; ++i)
 8003f4c:	2300      	movs	r3, #0
        len = set_len;
 8003f4e:	7042      	strb	r2, [r0, #1]
        for(int i = 0; i < set_len; ++i)
 8003f50:	3002      	adds	r0, #2
            data[i] = set_data[i];
 8003f52:	5ccc      	ldrb	r4, [r1, r3]
        for(int i = 0; i < set_len; ++i)
 8003f54:	3301      	adds	r3, #1
 8003f56:	429a      	cmp	r2, r3
            data[i] = set_data[i];
 8003f58:	f800 4b01 	strb.w	r4, [r0], #1
        for(int i = 0; i < set_len; ++i)
 8003f5c:	dcf9      	bgt.n	8003f52 <_ZN16LoRa_packet_data8set_dataEPKhh+0x10>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e003      	b.n	8003f6a <_ZN16LoRa_packet_data8set_dataEPKhh+0x28>
    }
    else
        len = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	7043      	strb	r3, [r0, #1]
 8003f66:	e7fa      	b.n	8003f5e <_ZN16LoRa_packet_data8set_dataEPKhh+0x1c>
        return true;
 8003f68:	2001      	movs	r0, #1
    return false;
}
 8003f6a:	bd10      	pop	{r4, pc}

08003f6c <_ZN11LoRa_packet11search_dataEv>:
    return *this;
}


// ----- LoRa_packet -----
bool LoRa_packet::search_data() {
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	2014      	movs	r0, #20
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <_ZN11LoRa_packet11search_dataEv+0x88>)
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
	{
	  if (__pred(__first))
 8003f74:	7813      	ldrb	r3, [r2, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d13a      	bne.n	8003ff0 <_ZN11LoRa_packet11search_dataEv+0x84>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003f7a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
 8003f7e:	b16b      	cbz	r3, 8003f9c <_ZN11LoRa_packet11search_dataEv+0x30>
	  ++__first;
 8003f80:	f102 0334 	add.w	r3, r2, #52	; 0x34
 8003f84:	2000      	movs	r0, #0
#if defined( USE_STANDARD_ARRAY )
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
                        [](const LoRa_packet_data &data){return data.free();} );
    if(packet_data == lora_packet_data.end()) {
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
    packet_data = std::find_if(lora_packet_data.begin(), lora_packet_data.end(),
 8003f88:	600b      	str	r3, [r1, #0]
    if(packet_data == lora_packet_data.end()) {
 8003f8a:	4293      	cmp	r3, r2
        Serial.println("!lora_packet_data memory error!");
#endif
        return true;
    }
    packet_data->free_object_ = false;
    packet_data->len = 0;
 8003f8c:	bf15      	itete	ne
 8003f8e:	7058      	strbne	r0, [r3, #1]
        packet_data = nullptr;
 8003f90:	6008      	streq	r0, [r1, #0]
    packet_data->free_object_ = false;
 8003f92:	7018      	strbne	r0, [r3, #0]
        return true;
 8003f94:	2001      	moveq	r0, #1
        }
    }
    packet_data = nullptr;
    return true;
#endif
}
 8003f96:	bd10      	pop	{r4, pc}
 8003f98:	461a      	mov	r2, r3
 8003f9a:	e7eb      	b.n	8003f74 <_ZN11LoRa_packet11search_dataEv+0x8>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003f9c:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8003fa0:	b113      	cbz	r3, 8003fa8 <_ZN11LoRa_packet11search_dataEv+0x3c>
	  ++__first;
 8003fa2:	f102 0368 	add.w	r3, r2, #104	; 0x68
 8003fa6:	e7ed      	b.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8003fa8:	f892 309c 	ldrb.w	r3, [r2, #156]	; 0x9c
 8003fac:	b113      	cbz	r3, 8003fb4 <_ZN11LoRa_packet11search_dataEv+0x48>
	  ++__first;
 8003fae:	f102 039c 	add.w	r3, r2, #156	; 0x9c
 8003fb2:	e7e7      	b.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
      for (; __trip_count > 0; --__trip_count)
 8003fb4:	3801      	subs	r0, #1
 8003fb6:	f102 03d0 	add.w	r3, r2, #208	; 0xd0
 8003fba:	d1ed      	bne.n	8003f98 <_ZN11LoRa_packet11search_dataEv+0x2c>
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
 8003fbc:	4c0e      	ldr	r4, [pc, #56]	; (8003ff8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 8003fbe:	1ae0      	subs	r0, r4, r3
 8003fc0:	2868      	cmp	r0, #104	; 0x68
 8003fc2:	d00b      	beq.n	8003fdc <_ZN11LoRa_packet11search_dataEv+0x70>
 8003fc4:	289c      	cmp	r0, #156	; 0x9c
 8003fc6:	d003      	beq.n	8003fd0 <_ZN11LoRa_packet11search_dataEv+0x64>
 8003fc8:	2834      	cmp	r0, #52	; 0x34
 8003fca:	d00b      	beq.n	8003fe4 <_ZN11LoRa_packet11search_dataEv+0x78>
 8003fcc:	4623      	mov	r3, r4
 8003fce:	e7d9      	b.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
	{
	case 3:
	  if (__pred(__first))
 8003fd0:	f892 00d0 	ldrb.w	r0, [r2, #208]	; 0xd0
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d1d5      	bne.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 8003fd8:	f502 7382 	add.w	r3, r2, #260	; 0x104
	case 2:
	  if (__pred(__first))
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	2a00      	cmp	r2, #0
 8003fe0:	d1d0      	bne.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
	    return __first;
	  ++__first;
 8003fe2:	3334      	adds	r3, #52	; 0x34
	case 1:
	  if (__pred(__first))
 8003fe4:	7818      	ldrb	r0, [r3, #0]
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <_ZN11LoRa_packet11search_dataEv+0x8c>)
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	bf08      	it	eq
 8003fec:	4613      	moveq	r3, r2
 8003fee:	e7c9      	b.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	e7c7      	b.n	8003f84 <_ZN11LoRa_packet11search_dataEv+0x18>
 8003ff4:	200006c0 	.word	0x200006c0
 8003ff8:	20001700 	.word	0x20001700

08003ffc <_ZN11LoRa_packetC1Ev>:


LoRa_packet::LoRa_packet() {
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	b510      	push	{r4, lr}
 8004000:	4604      	mov	r4, r0
 8004002:	8083      	strh	r3, [r0, #4]
    search_data();
 8004004:	f7ff ffb2 	bl	8003f6c <_ZN11LoRa_packet11search_dataEv>
}
 8004008:	4620      	mov	r0, r4
 800400a:	bd10      	pop	{r4, pc}

0800400c <_ZN11LoRa_packetD1Ev>:
    packet_data = nullptr;
    *this = std::move(right);
}

LoRa_packet::~LoRa_packet() {
    if(packet_data != nullptr)
 800400c:	6803      	ldr	r3, [r0, #0]
 800400e:	b10b      	cbz	r3, 8004014 <_ZN11LoRa_packetD1Ev+0x8>
        packet_data->free_object_ = true;
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
}
 8004014:	4770      	bx	lr

08004016 <_ZN11LoRa_packet15add_packet_dataEh>:

bool LoRa_packet::add_packet_data(uint8_t data) {
    return packet_data->add_data(data);
 8004016:	6800      	ldr	r0, [r0, #0]
 8004018:	f7ff bf74 	b.w	8003f04 <_ZN16LoRa_packet_data8add_dataEh>

0800401c <_ZN11LoRa_packet15add_packet_dataEPKhh>:
}
bool LoRa_packet::add_packet_data(const  uint8_t* data, uint8_t len) {
    return packet_data->add_data(data, len);
 800401c:	6800      	ldr	r0, [r0, #0]
 800401e:	f7ff bf7c 	b.w	8003f1a <_ZN16LoRa_packet_data8add_dataEPKhh>

08004022 <_ZN11LoRa_packet10set_packetEPKhhbh>:
}
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 8004022:	b538      	push	{r3, r4, r5, lr}
 8004024:	4604      	mov	r4, r0
    if(packet_data->set_data(data, len))
 8004026:	6800      	ldr	r0, [r0, #0]
bool LoRa_packet::set_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 8004028:	461d      	mov	r5, r3
    if(packet_data->set_data(data, len))
 800402a:	f7ff ff8a 	bl	8003f42 <_ZN16LoRa_packet_data8set_dataEPKhh>
 800402e:	b918      	cbnz	r0, 8004038 <_ZN11LoRa_packet10set_packetEPKhhbh+0x16>
        return true;
    crc_error_ = crc_error;
    rssi_ = rssi;
 8004030:	f89d 3010 	ldrb.w	r3, [sp, #16]
    crc_error_ = crc_error;
 8004034:	7165      	strb	r5, [r4, #5]
    rssi_ = rssi;
 8004036:	7123      	strb	r3, [r4, #4]
    return false;
}
 8004038:	bd38      	pop	{r3, r4, r5, pc}

0800403a <_ZN11LoRa_packetC1EPKhhbh>:
LoRa_packet::LoRa_packet(const uint8_t* data, uint8_t len, bool crc_error, uint8_t rssi) {
 800403a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800403c:	461f      	mov	r7, r3
 800403e:	2300      	movs	r3, #0
 8004040:	4604      	mov	r4, r0
 8004042:	460d      	mov	r5, r1
 8004044:	4616      	mov	r6, r2
 8004046:	8083      	strh	r3, [r0, #4]
    search_data();
 8004048:	f7ff ff90 	bl	8003f6c <_ZN11LoRa_packet11search_dataEv>
    set_packet(data, len, crc_error, rssi);
 800404c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004050:	4632      	mov	r2, r6
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	4629      	mov	r1, r5
 8004056:	463b      	mov	r3, r7
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff ffe2 	bl	8004022 <_ZN11LoRa_packet10set_packetEPKhhbh>
}
 800405e:	4620      	mov	r0, r4
 8004060:	b003      	add	sp, #12
 8004062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004064 <_ZN11LoRa_packet12clear_packetEv>:
    crc_error_ = crc_error;
    rssi_ = rssi;
    return false;
}

void LoRa_packet::clear_packet() {
 8004064:	b538      	push	{r3, r4, r5, lr}
    if(packet_data == nullptr)
 8004066:	6803      	ldr	r3, [r0, #0]
void LoRa_packet::clear_packet() {
 8004068:	4604      	mov	r4, r0
 800406a:	2500      	movs	r5, #0
    if(packet_data == nullptr)
 800406c:	b91b      	cbnz	r3, 8004076 <_ZN11LoRa_packet12clear_packetEv+0x12>
        search_data();
 800406e:	f7ff ff7d 	bl	8003f6c <_ZN11LoRa_packet11search_dataEv>
    else
        packet_data->len = 0;
    rssi_ = 0;
 8004072:	80a5      	strh	r5, [r4, #4]
    crc_error_  = false;
}
 8004074:	bd38      	pop	{r3, r4, r5, pc}
        packet_data->len = 0;
 8004076:	705d      	strb	r5, [r3, #1]
 8004078:	e7fb      	b.n	8004072 <_ZN11LoRa_packet12clear_packetEv+0xe>

0800407a <_ZNK11LoRa_packet7get_lenEv>:
}
uint8_t LoRa_packet::get_data(int num) const {
    return packet_data->data[num];
}
uint8_t LoRa_packet::get_len() const {
    if(packet_data == nullptr)
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	b100      	cbz	r0, 8004080 <_ZNK11LoRa_packet7get_lenEv+0x6>
        return 0;
    return packet_data->len;
 800407e:	7840      	ldrb	r0, [r0, #1]
}
 8004080:	4770      	bx	lr

08004082 <_ZNK11LoRa_packet13get_crc_errorEv>:
bool LoRa_packet::get_crc_error() const {
    return crc_error_;
}
 8004082:	7940      	ldrb	r0, [r0, #5]
 8004084:	4770      	bx	lr

08004086 <_ZN11LoRa_packetixEi>:
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	3302      	adds	r3, #2
uint8_t LoRa_packet::get_rssi() const {
    return rssi_;
}
uint8_t& LoRa_packet::operator[] (const int index) {
    return packet_data->data[index];
}
 800408a:	1858      	adds	r0, r3, r1
 800408c:	4770      	bx	lr

0800408e <_ZNK11LoRa_packetixEi>:
 800408e:	6803      	ldr	r3, [r0, #0]
 8004090:	3302      	adds	r3, #2
 8004092:	1858      	adds	r0, r3, r1
 8004094:	4770      	bx	lr

08004096 <_ZN11LoRa_packetaSERKS_>:
const uint8_t& LoRa_packet::operator[](const int index) const {
    return packet_data->data[index];
}
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 8004096:	4288      	cmp	r0, r1
class LoRa_packet& LoRa_packet::operator=(const class LoRa_packet& right) {
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4604      	mov	r4, r0
 800409c:	460d      	mov	r5, r1
    if (this == &right)
 800409e:	d017      	beq.n	80040d0 <_ZN11LoRa_packetaSERKS_+0x3a>
        return *this;
    // Проверка на пустой объект
    if(packet_data == nullptr)
 80040a0:	6803      	ldr	r3, [r0, #0]
 80040a2:	b90b      	cbnz	r3, 80040a8 <_ZN11LoRa_packetaSERKS_+0x12>
        search_data();
 80040a4:	f7ff ff62 	bl	8003f6c <_ZN11LoRa_packet11search_dataEv>
    // Перенос значений
    packet_data->len = right.packet_data->len;
 80040a8:	682a      	ldr	r2, [r5, #0]
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	7852      	ldrb	r2, [r2, #1]
 80040ae:	705a      	strb	r2, [r3, #1]
    crc_error_ = right.crc_error_;
 80040b0:	796b      	ldrb	r3, [r5, #5]
 80040b2:	7163      	strb	r3, [r4, #5]
    rssi_ = right.rssi_;
 80040b4:	792b      	ldrb	r3, [r5, #4]
 80040b6:	7123      	strb	r3, [r4, #4]
    for(int i = 0; i < packet_data->len; ++i)
 80040b8:	2300      	movs	r3, #0
 80040ba:	6822      	ldr	r2, [r4, #0]
 80040bc:	7851      	ldrb	r1, [r2, #1]
 80040be:	4299      	cmp	r1, r3
 80040c0:	dd06      	ble.n	80040d0 <_ZN11LoRa_packetaSERKS_+0x3a>
        packet_data->data[i] = right.packet_data->data[i];
 80040c2:	6829      	ldr	r1, [r5, #0]
 80040c4:	441a      	add	r2, r3
 80040c6:	4419      	add	r1, r3
 80040c8:	7889      	ldrb	r1, [r1, #2]
    for(int i = 0; i < packet_data->len; ++i)
 80040ca:	3301      	adds	r3, #1
        packet_data->data[i] = right.packet_data->data[i];
 80040cc:	7091      	strb	r1, [r2, #2]
    for(int i = 0; i < packet_data->len; ++i)
 80040ce:	e7f4      	b.n	80040ba <_ZN11LoRa_packetaSERKS_+0x24>
    return *this;
}
 80040d0:	4620      	mov	r0, r4
 80040d2:	bd38      	pop	{r3, r4, r5, pc}

080040d4 <_ZN11LoRa_packetaSEOS_>:

class LoRa_packet& LoRa_packet::operator=(class LoRa_packet&& right) {
    // Проверка на самоприсваивание
    if (this == &right)
 80040d4:	4288      	cmp	r0, r1
 80040d6:	d00b      	beq.n	80040f0 <_ZN11LoRa_packetaSEOS_+0x1c>
        return *this;
    // Перенос значений
    if(packet_data != nullptr) {
 80040d8:	6803      	ldr	r3, [r0, #0]
 80040da:	b10b      	cbz	r3, 80040e0 <_ZN11LoRa_packetaSEOS_+0xc>
        packet_data->free_object_=true;
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
    }
    packet_data = right.packet_data;
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	6003      	str	r3, [r0, #0]
    crc_error_ = right.crc_error_;
 80040e4:	794b      	ldrb	r3, [r1, #5]
 80040e6:	7143      	strb	r3, [r0, #5]
    rssi_ = right.rssi_;
 80040e8:	790b      	ldrb	r3, [r1, #4]
 80040ea:	7103      	strb	r3, [r0, #4]
    right.packet_data = nullptr;
 80040ec:	2300      	movs	r3, #0
 80040ee:	600b      	str	r3, [r1, #0]
    return *this;
}
 80040f0:	4770      	bx	lr

080040f2 <_ZN11LoRa_packetC1EOS_>:
    packet_data = nullptr;
 80040f2:	2300      	movs	r3, #0
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80040f4:	b510      	push	{r4, lr}
 80040f6:	4604      	mov	r4, r0
    packet_data = nullptr;
 80040f8:	6003      	str	r3, [r0, #0]
LoRa_packet::LoRa_packet(LoRa_packet&& right) {
 80040fa:	8083      	strh	r3, [r0, #4]
    *this = std::move(right);
 80040fc:	f7ff ffea 	bl	80040d4 <_ZN11LoRa_packetaSEOS_>
}
 8004100:	4620      	mov	r0, r4
 8004102:	bd10      	pop	{r4, pc}

08004104 <_GLOBAL__sub_I_lora_packet_data>:
}
 8004104:	2250      	movs	r2, #80	; 0x50
    std::array<uint8_t, SIZE_LORA_PACKET_MAX_LEN> data;
#else
    uint8_t data[SIZE_LORA_PACKET_MAX_LEN]; // Байты
#endif

    LoRa_packet_data() = default;
 8004106:	2001      	movs	r0, #1
 8004108:	2100      	movs	r1, #0
    struct array
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <_GLOBAL__sub_I_lora_packet_data+0x18>)
 800410c:	3a01      	subs	r2, #1
 800410e:	7018      	strb	r0, [r3, #0]
 8004110:	7059      	strb	r1, [r3, #1]
 8004112:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004116:	d1f9      	bne.n	800410c <_GLOBAL__sub_I_lora_packet_data+0x8>
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	200006c0 	.word	0x200006c0

08004120 <_ZN13LoRa_registerD1Ev>:
    init(spi, nss_port, nss_pin);
}
#endif

LoRa_register::~LoRa_register() {
}
 8004120:	4770      	bx	lr

08004122 <_ZN13LoRa_register4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    pinMode(_nss, OUTPUT);
    digitalWrite(_nss, HIGH);
}
#else
void LoRa_register::init(SPI_HandleTypeDef* spi, GPIO_TypeDef* nss_port, uint16_t nss_pin) {
    _spi = spi;
 8004122:	6001      	str	r1, [r0, #0]
    _nss_port = nss_port;
 8004124:	6082      	str	r2, [r0, #8]
	_nss_pin = nss_pin;
 8004126:	8083      	strh	r3, [r0, #4]
}
 8004128:	4770      	bx	lr

0800412a <_ZN13LoRa_register5clearEv>:



void LoRa_register::clear() {
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        _registers_data[i] = 0;
 800412a:	2200      	movs	r2, #0
 800412c:	f100 030c 	add.w	r3, r0, #12
 8004130:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8004134:	f803 2b01 	strb.w	r2, [r3], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004138:	428b      	cmp	r3, r1
        _registers_state[i] = false;
 800413a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800413e:	d1f9      	bne.n	8004134 <_ZN13LoRa_register5clearEv+0xa>
    }
    _send = false;
 8004140:	f880 20ec 	strb.w	r2, [r0, #236]	; 0xec
}
 8004144:	4770      	bx	lr
	...

08004148 <_ZN13LoRa_registerC1Ev>:
LoRa_register::LoRa_register() {
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4604      	mov	r4, r0
 800414c:	4e27      	ldr	r6, [pc, #156]	; (80041ec <_ZN13LoRa_registerC1Ev+0xa4>)
 800414e:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
 8004152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004156:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800415a:	4e25      	ldr	r6, [pc, #148]	; (80041f0 <_ZN13LoRa_registerC1Ev+0xa8>)
 800415c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004162:	f504 7586 	add.w	r5, r4, #268	; 0x10c
 8004166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004168:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800416c:	4e21      	ldr	r6, [pc, #132]	; (80041f4 <_ZN13LoRa_registerC1Ev+0xac>)
 800416e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004172:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004174:	f504 7594 	add.w	r5, r4, #296	; 0x128
 8004178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800417e:	4e1e      	ldr	r6, [pc, #120]	; (80041f8 <_ZN13LoRa_registerC1Ev+0xb0>)
 8004180:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004186:	f504 75a2 	add.w	r5, r4, #324	; 0x144
 800418a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004190:	4e1a      	ldr	r6, [pc, #104]	; (80041fc <_ZN13LoRa_registerC1Ev+0xb4>)
 8004192:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004196:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004198:	f504 75b0 	add.w	r5, r4, #352	; 0x160
 800419c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80041a2:	4e17      	ldr	r6, [pc, #92]	; (8004200 <_ZN13LoRa_registerC1Ev+0xb8>)
 80041a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80041a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041aa:	f504 75be 	add.w	r5, r4, #380	; 0x17c
 80041ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80041b4:	4e13      	ldr	r6, [pc, #76]	; (8004204 <_ZN13LoRa_registerC1Ev+0xbc>)
 80041b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80041ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041bc:	f504 75cc 	add.w	r5, r4, #408	; 0x198
 80041c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80041c6:	4e10      	ldr	r6, [pc, #64]	; (8004208 <_ZN13LoRa_registerC1Ev+0xc0>)
 80041c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80041cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041ce:	f504 75da 	add.w	r5, r4, #436	; 0x1b4
 80041d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    _send = false;
 80041d8:	2300      	movs	r3, #0
LoRa_register::LoRa_register() {
 80041da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    clear();
 80041de:	4620      	mov	r0, r4
    _send = false;
 80041e0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    clear();
 80041e4:	f7ff ffa1 	bl	800412a <_ZN13LoRa_register5clearEv>
}
 80041e8:	bd70      	pop	{r4, r5, r6, pc}
 80041ea:	bf00      	nop
 80041ec:	20001ec8 	.word	0x20001ec8
 80041f0:	20001e90 	.word	0x20001e90
 80041f4:	20001e3c 	.word	0x20001e3c
 80041f8:	20001f38 	.word	0x20001f38
 80041fc:	20001f1c 	.word	0x20001f1c
 8004200:	20001b9c 	.word	0x20001b9c
 8004204:	20001c28 	.word	0x20001c28
 8004208:	20001b80 	.word	0x20001b80

0800420c <_ZN13LoRa_register15field_registersEP13Address_fieldh>:
        result_field_registers_data[result_field_registers_len++] = ((uint8_t)(field.get_registers()[i].address() & 0xFF));
    }
    return result_field_registers_len;
}
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
    result_field_registers_len = 0;
 800420c:	2300      	movs	r3, #0
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 800420e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004212:	4605      	mov	r5, r0
 8004214:	4614      	mov	r4, r2
    bool reg_add[LORA_DATA_SIZE];
    uint8_t adr;
    if((fields == nullptr) || (amt_fields == 0))
 8004216:	460e      	mov	r6, r1
uint8_t LoRa_register::field_registers(Address_field* fields, uint8_t amt_fields) {
 8004218:	b09d      	sub	sp, #116	; 0x74
    result_field_registers_len = 0;
 800421a:	f880 3220 	strb.w	r3, [r0, #544]	; 0x220
    if((fields == nullptr) || (amt_fields == 0))
 800421e:	b3d1      	cbz	r1, 8004296 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x8a>
 8004220:	b3aa      	cbz	r2, 800428e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>
 8004222:	466a      	mov	r2, sp
        return result_field_registers_len;
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
        reg_add[i] = false;
 8004224:	4619      	mov	r1, r3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004226:	3301      	adds	r3, #1
 8004228:	2b70      	cmp	r3, #112	; 0x70
        reg_add[i] = false;
 800422a:	f802 1b01 	strb.w	r1, [r2], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 800422e:	d1fa      	bne.n	8004226 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x1a>
    }
    for(int i = 0; i < amt_fields; ++i) {
 8004230:	2700      	movs	r7, #0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004232:	f04f 091c 	mov.w	r9, #28
 8004236:	46b8      	mov	r8, r7
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
            if(reg_add[adr] == false) {
                result_field_registers_data[result_field_registers_len++] = adr;
                reg_add[adr] = true;
 8004238:	f04f 0a01 	mov.w	sl, #1
 800423c:	e001      	b.n	8004242 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800423e:	f04f 0800 	mov.w	r8, #0
 8004242:	fb09 6b07 	mla	fp, r9, r7, r6
 8004246:	4658      	mov	r0, fp
 8004248:	f7fe ff8f 	bl	800316a <_ZNK13Address_field13get_reg_countEv>
 800424c:	4540      	cmp	r0, r8
 800424e:	dd19      	ble.n	8004284 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x78>
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004250:	4658      	mov	r0, fp
 8004252:	f7fe ff88 	bl	8003166 <_ZNK13Address_field13get_registersEv>
 8004256:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800425a:	f7fe fd8c 	bl	8002d76 <_ZNK8Register7addressEv>
            if(reg_add[adr] == false) {
 800425e:	ab1c      	add	r3, sp, #112	; 0x70
            adr = (uint8_t)(fields[i].get_registers()[j].address() & 0xFF);
 8004260:	b2c0      	uxtb	r0, r0
            if(reg_add[adr] == false) {
 8004262:	181a      	adds	r2, r3, r0
 8004264:	f812 3c70 	ldrb.w	r3, [r2, #-112]
 8004268:	b94b      	cbnz	r3, 800427e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x72>
                result_field_registers_data[result_field_registers_len++] = adr;
 800426a:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
                reg_add[adr] = true;
 800426e:	f802 ac70 	strb.w	sl, [r2, #-112]
                result_field_registers_data[result_field_registers_len++] = adr;
 8004272:	1c59      	adds	r1, r3, #1
 8004274:	442b      	add	r3, r5
 8004276:	f885 1220 	strb.w	r1, [r5, #544]	; 0x220
 800427a:	f883 01d0 	strb.w	r0, [r3, #464]	; 0x1d0
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800427e:	f108 0801 	add.w	r8, r8, #1
 8004282:	e7de      	b.n	8004242 <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x36>
 8004284:	3701      	adds	r7, #1
    for(int i = 0; i < amt_fields; ++i) {
 8004286:	42bc      	cmp	r4, r7
 8004288:	dcd9      	bgt.n	800423e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x32>
            }
        }
    }
    return result_field_registers_len;
 800428a:	f895 4220 	ldrb.w	r4, [r5, #544]	; 0x220
}
 800428e:	4620      	mov	r0, r4
 8004290:	b01d      	add	sp, #116	; 0x74
 8004292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return result_field_registers_len;
 8004296:	460c      	mov	r4, r1
 8004298:	e7f9      	b.n	800428e <_ZN13LoRa_register15field_registersEP13Address_fieldh+0x82>

0800429a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>:
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
        }
    }
    return result_check_missing_register_len;
}
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800429a:	b538      	push	{r3, r4, r5, lr}
    result_check_missing_register_len = 0;
 800429c:	2500      	movs	r5, #0
uint8_t LoRa_register::check_missing_register(Address_field* fields, uint8_t amt_fields) {
 800429e:	4604      	mov	r4, r0
 80042a0:	4613      	mov	r3, r2
    result_check_missing_register_len = 0;
 80042a2:	f880 5271 	strb.w	r5, [r0, #625]	; 0x271
    if((fields == nullptr) || (amt_fields == 0))
 80042a6:	b1c9      	cbz	r1, 80042dc <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x42>
 80042a8:	b1ca      	cbz	r2, 80042de <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        return result_check_missing_register_len;
    field_registers(fields, amt_fields);
 80042aa:	f7ff ffaf 	bl	800420c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 80042ae:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 80042b2:	4422      	add	r2, r4
 80042b4:	42a2      	cmp	r2, r4
 80042b6:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 80042ba:	d010      	beq.n	80042de <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x44>
        if(_registers_state[result_field_registers_data[i]] == false) {
 80042bc:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 80042c0:	4421      	add	r1, r4
 80042c2:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
 80042c6:	b939      	cbnz	r1, 80042d8 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x3e>
            result_check_missing_register_data[result_check_missing_register_len++] = result_field_registers_data[i];
 80042c8:	1c59      	adds	r1, r3, #1
 80042ca:	f884 1271 	strb.w	r1, [r4, #625]	; 0x271
 80042ce:	f892 11cf 	ldrb.w	r1, [r2, #463]	; 0x1cf
 80042d2:	4423      	add	r3, r4
 80042d4:	f883 1221 	strb.w	r1, [r3, #545]	; 0x221
    for(int i = result_field_registers_len - 1; i >= 0; --i) {
 80042d8:	3a01      	subs	r2, #1
 80042da:	e7eb      	b.n	80042b4 <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh+0x1a>
        return result_check_missing_register_len;
 80042dc:	460b      	mov	r3, r1
        }
    }
    return result_check_missing_register_len;
}
 80042de:	4618      	mov	r0, r3
 80042e0:	bd38      	pop	{r3, r4, r5, pc}

080042e2 <_ZN13LoRa_register10check_readEP13Address_fieldh>:
    return false;
}
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
    bool check_reg_read = false;
    uint8_t reg_bit[LORA_DATA_SIZE];
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80042e2:	2300      	movs	r3, #0
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 80042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e8:	b0a1      	sub	sp, #132	; 0x84
 80042ea:	f10d 0810 	add.w	r8, sp, #16
 80042ee:	4604      	mov	r4, r0
 80042f0:	e9cd 1202 	strd	r1, r2, [sp, #8]
        reg_bit[i] = 0;
 80042f4:	4618      	mov	r0, r3
bool LoRa_register::check_read(Address_field* fields, uint8_t amt_fields) {
 80042f6:	4641      	mov	r1, r8
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 80042f8:	3301      	adds	r3, #1
 80042fa:	2b70      	cmp	r3, #112	; 0x70
        reg_bit[i] = 0;
 80042fc:	f801 0b01 	strb.w	r0, [r1], #1
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004300:	d1fa      	bne.n	80042f8 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x16>
    }
    // Достаём из полей значения битов регистров
    uint8_t adr;
    for(int i = 0; i < amt_fields; ++i) {
 8004302:	2600      	movs	r6, #0
 8004304:	f04f 0a1c 	mov.w	sl, #28
 8004308:	46b1      	mov	r9, r6
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	42b3      	cmp	r3, r6
 800430e:	dd28      	ble.n	8004362 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x80>
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004310:	f04f 0b00 	mov.w	fp, #0
 8004314:	9b02      	ldr	r3, [sp, #8]
 8004316:	fb0a 3706 	mla	r7, sl, r6, r3
 800431a:	4638      	mov	r0, r7
 800431c:	f7fe ff25 	bl	800316a <_ZNK13Address_field13get_reg_countEv>
 8004320:	4558      	cmp	r0, fp
 8004322:	dd1c      	ble.n	800435e <_ZN13LoRa_register10check_readEP13Address_fieldh+0x7c>
            adr = fields[i].get_registers()[j].address();
 8004324:	4638      	mov	r0, r7
 8004326:	f7fe ff1e 	bl	8003166 <_ZNK13Address_field13get_registersEv>
 800432a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800432e:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	f7fe fd1f 	bl	8002d76 <_ZNK8Register7addressEv>
 8004338:	4605      	mov	r5, r0
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 800433a:	4638      	mov	r0, r7
 800433c:	f7fe ff13 	bl	8003166 <_ZNK13Address_field13get_registersEv>
 8004340:	9b01      	ldr	r3, [sp, #4]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 8004342:	f10b 0b01 	add.w	fp, fp, #1
            reg_bit[adr] |= fields[i].get_registers()[j].mask();
 8004346:	4418      	add	r0, r3
 8004348:	f7fe fd17 	bl	8002d7a <_ZNK8Register4maskEv>
 800434c:	b2eb      	uxtb	r3, r5
 800434e:	aa20      	add	r2, sp, #128	; 0x80
 8004350:	4413      	add	r3, r2
 8004352:	f813 5c70 	ldrb.w	r5, [r3, #-112]
 8004356:	4305      	orrs	r5, r0
 8004358:	f803 5c70 	strb.w	r5, [r3, #-112]
        for(int j = 0; j < fields[i].get_reg_count(); ++j) {
 800435c:	e7dd      	b.n	800431a <_ZN13LoRa_register10check_readEP13Address_fieldh+0x38>
    for(int i = 0; i < amt_fields; ++i) {
 800435e:	3601      	adds	r6, #1
 8004360:	e7d3      	b.n	800430a <_ZN13LoRa_register10check_readEP13Address_fieldh+0x28>
    }

    reg_read_len = 0;
    reg_not_read_len = 0;

    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004362:	2300      	movs	r3, #0
    bool check_reg_read = false;
 8004364:	4618      	mov	r0, r3
    reg_read_len = 0;
 8004366:	f884 92c2 	strb.w	r9, [r4, #706]	; 0x2c2
    reg_not_read_len = 0;
 800436a:	f884 9313 	strb.w	r9, [r4, #787]	; 0x313
        if (reg_bit[i] != 0x00) {
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 800436e:	f104 067c 	add.w	r6, r4, #124	; 0x7c
        if (reg_bit[i] != 0x00) {
 8004372:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004376:	b161      	cbz	r1, 8004392 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>
            if ((reg_bit[i] == 0xFF) || (_registers_state[i] == true)) {
 8004378:	29ff      	cmp	r1, #255	; 0xff
 800437a:	b2dd      	uxtb	r5, r3
 800437c:	d001      	beq.n	8004382 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xa0>
 800437e:	5cf1      	ldrb	r1, [r6, r3]
 8004380:	b169      	cbz	r1, 800439e <_ZN13LoRa_register10check_readEP13Address_fieldh+0xbc>
                // Если биты занимают всё пространство регистра, то можно не считывать, или если он был считан ранее
                reg_not_read[reg_not_read_len++] = i;
 8004382:	f894 1313 	ldrb.w	r1, [r4, #787]	; 0x313
 8004386:	1c4f      	adds	r7, r1, #1
 8004388:	4421      	add	r1, r4
 800438a:	f884 7313 	strb.w	r7, [r4, #787]	; 0x313
 800438e:	f881 52c3 	strb.w	r5, [r1, #707]	; 0x2c3
    for(int i = 0; i < LORA_DATA_SIZE; ++i) {
 8004392:	3301      	adds	r3, #1
 8004394:	2b70      	cmp	r3, #112	; 0x70
 8004396:	d1ec      	bne.n	8004372 <_ZN13LoRa_register10check_readEP13Address_fieldh+0x90>
            }
        }
    }
    return check_reg_read; // Наличие хоть одного регистра, который нужно будет считать

}
 8004398:	b021      	add	sp, #132	; 0x84
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_read[reg_read_len++] = i;
 800439e:	f894 12c2 	ldrb.w	r1, [r4, #706]	; 0x2c2
 80043a2:	1c48      	adds	r0, r1, #1
 80043a4:	4421      	add	r1, r4
 80043a6:	f884 02c2 	strb.w	r0, [r4, #706]	; 0x2c2
                check_reg_read = true;
 80043aa:	2001      	movs	r0, #1
                reg_read[reg_read_len++] = i;
 80043ac:	f881 5272 	strb.w	r5, [r1, #626]	; 0x272
                check_reg_read = true;
 80043b0:	e7ef      	b.n	8004392 <_ZN13LoRa_register10check_readEP13Address_fieldh+0xb0>

080043b2 <_ZN13LoRa_register16_single_transferEhh>:
    return _single_transfer(address & 0x7f, 0x00);
}
void LoRa_register::_write_register(uint8_t address, uint8_t value) {
    _single_transfer(address | 0x80, value);
}
uint8_t LoRa_register::_single_transfer(uint8_t address, uint8_t value) {
 80043b2:	b510      	push	{r4, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	4604      	mov	r4, r0
 80043b8:	f88d 100f 	strb.w	r1, [sp, #15]
 80043bc:	f88d 200e 	strb.w	r2, [sp, #14]
    _spi->endTransaction();
    // Прекращение NSS сигнала
    digitalWrite(_nss, HIGH);
#else
    // Подача NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_RESET);
 80043c0:	8881      	ldrh	r1, [r0, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	6880      	ldr	r0, [r0, #8]
 80043c6:	f002 fc6f 	bl	8006ca8 <HAL_GPIO_WritePin>
    // Отправка бита действия и 7 бит адреса
    HAL_SPI_TransmitReceive(_spi, &address, &response, 1, 1000);
 80043ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	f10d 0217 	add.w	r2, sp, #23
 80043d6:	2301      	movs	r3, #1
 80043d8:	f10d 010f 	add.w	r1, sp, #15
 80043dc:	f003 fb5e 	bl	8007a9c <HAL_SPI_TransmitReceive>
 80043e0:	2332      	movs	r3, #50	; 0x32
    for(int i = 0; i < 50; i++) __NOP();
 80043e2:	bf00      	nop
 80043e4:	3b01      	subs	r3, #1
 80043e6:	d1fc      	bne.n	80043e2 <_ZN13LoRa_register16_single_transferEhh+0x30>
    // Отправка/приём байта значения
    HAL_SPI_TransmitReceive(_spi, &value, &response, 1, 1000);
 80043e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	f10d 0217 	add.w	r2, sp, #23
 80043f4:	2301      	movs	r3, #1
 80043f6:	f10d 010e 	add.w	r1, sp, #14
 80043fa:	f003 fb4f 	bl	8007a9c <HAL_SPI_TransmitReceive>
 80043fe:	2314      	movs	r3, #20
    for(int i = 0; i < 20; i++) __NOP();
 8004400:	bf00      	nop
 8004402:	3b01      	subs	r3, #1
 8004404:	d1fc      	bne.n	8004400 <_ZN13LoRa_register16_single_transferEhh+0x4e>
    // Прекращение NSS сигнала
    HAL_GPIO_WritePin(_nss_port, _nss_pin, GPIO_PIN_SET);
 8004406:	68a0      	ldr	r0, [r4, #8]
 8004408:	2201      	movs	r2, #1
 800440a:	88a1      	ldrh	r1, [r4, #4]
 800440c:	f002 fc4c 	bl	8006ca8 <HAL_GPIO_WritePin>
#endif
    return response;
}
 8004410:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004414:	b006      	add	sp, #24
 8004416:	bd10      	pop	{r4, pc}

08004418 <_ZN13LoRa_register14_read_registerEh>:
    return _single_transfer(address & 0x7f, 0x00);
 8004418:	2200      	movs	r2, #0
 800441a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800441e:	f7ff bfc8 	b.w	80043b2 <_ZN13LoRa_register16_single_transferEhh>

08004422 <_ZN13LoRa_register13register_readEP13Address_fieldhb>:
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 8004422:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004426:	461f      	mov	r7, r3
    if (_send)
 8004428:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
uint8_t LoRa_register::register_read(Address_field* fields, uint8_t amt_fields, bool update) {
 800442c:	4604      	mov	r4, r0
 800442e:	460d      	mov	r5, r1
 8004430:	4616      	mov	r6, r2
    if (_send)
 8004432:	b10b      	cbz	r3, 8004438 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x16>
        clear();
 8004434:	f7ff fe79 	bl	800412a <_ZN13LoRa_register5clearEv>
        field_registers(fields, amt_fields);
 8004438:	4632      	mov	r2, r6
 800443a:	4629      	mov	r1, r5
 800443c:	4620      	mov	r0, r4
    if (update) {
 800443e:	b1b7      	cbz	r7, 800446e <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x4c>
        field_registers(fields, amt_fields);
 8004440:	f7ff fee4 	bl	800420c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
        len = result_field_registers_len;
 8004444:	f894 7220 	ldrb.w	r7, [r4, #544]	; 0x220
        registers = &result_field_registers_data;
 8004448:	f504 78e8 	add.w	r8, r4, #464	; 0x1d0
    for(int i = 0; i < amt_read; ++i) {
 800444c:	2600      	movs	r6, #0
        _registers_state[adr] = true;
 800444e:	f04f 0901 	mov.w	r9, #1
    for(int i = 0; i < amt_read; ++i) {
 8004452:	42b7      	cmp	r7, r6
 8004454:	dd12      	ble.n	800447c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x5a>
        adr = (*registers)[i];
 8004456:	f818 5006 	ldrb.w	r5, [r8, r6]
        _registers_data[adr] = _read_register(adr);
 800445a:	4620      	mov	r0, r4
 800445c:	4629      	mov	r1, r5
 800445e:	f7ff ffdb 	bl	8004418 <_ZN13LoRa_register14_read_registerEh>
 8004462:	4425      	add	r5, r4
 8004464:	7328      	strb	r0, [r5, #12]
        _registers_state[adr] = true;
 8004466:	f885 907c 	strb.w	r9, [r5, #124]	; 0x7c
    for(int i = 0; i < amt_read; ++i) {
 800446a:	3601      	adds	r6, #1
 800446c:	e7f1      	b.n	8004452 <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x30>
        check_missing_register(fields, amt_fields);
 800446e:	f7ff ff14 	bl	800429a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
        registers = &result_check_missing_register_data;
 8004472:	f204 2821 	addw	r8, r4, #545	; 0x221
        len = result_check_missing_register_len;
 8004476:	f894 7271 	ldrb.w	r7, [r4, #625]	; 0x271
 800447a:	e7e7      	b.n	800444c <_ZN13LoRa_register13register_readEP13Address_fieldhb+0x2a>
}
 800447c:	4638      	mov	r0, r7
 800447e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004482 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>:
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 8004482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 800448a:	461a      	mov	r2, r3
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 800448c:	461e      	mov	r6, r3
 800448e:	460f      	mov	r7, r1
 8004490:	f89d 5020 	ldrb.w	r5, [sp, #32]
    check_missing_register(fields, amt);
 8004494:	f7ff ff01 	bl	800429a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if((result_check_missing_register_len != 0) || read) {
 8004498:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800449c:	b903      	cbnz	r3, 80044a0 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x1e>
 800449e:	b12d      	cbz	r5, 80044ac <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x2a>
        register_read(fields, amt, read);
 80044a0:	462b      	mov	r3, r5
 80044a2:	4632      	mov	r2, r6
 80044a4:	4639      	mov	r1, r7
 80044a6:	4620      	mov	r0, r4
 80044a8:	f7ff ffbb 	bl	8004422 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::get_field_value(Address_field* fields, uint32_t* values, uint8_t amt, bool read) {
 80044ac:	2500      	movs	r5, #0
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 80044ae:	f04f 091c 	mov.w	r9, #28
 80044b2:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i)
 80044b4:	42ae      	cmp	r6, r5
 80044b6:	dd09      	ble.n	80044cc <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x4a>
        values[i] = fields[i].get_value(_registers_data, LORA_DATA_SIZE);
 80044b8:	fb09 7005 	mla	r0, r9, r5, r7
 80044bc:	2270      	movs	r2, #112	; 0x70
 80044be:	4621      	mov	r1, r4
 80044c0:	f7fe fcd5 	bl	8002e6e <_ZNK13Address_field9get_valueEPKhi>
 80044c4:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
    for(int i = 0; i < amt; ++i)
 80044c8:	3501      	adds	r5, #1
 80044ca:	e7f3      	b.n	80044b4 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb+0x32>
}
 80044cc:	4630      	mov	r0, r6
 80044ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080044d2 <_ZN13LoRa_register15get_field_valueE13Address_fieldPmb>:
uint8_t LoRa_register::get_field_value(Address_field field, uint32_t* value, bool read) {
 80044d2:	b084      	sub	sp, #16
 80044d4:	b513      	push	{r0, r1, r4, lr}
 80044d6:	ac05      	add	r4, sp, #20
 80044d8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return get_field_value(&field, value, 1, read);
 80044dc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80044e0:	4621      	mov	r1, r4
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044e6:	2301      	movs	r3, #1
 80044e8:	f7ff ffcb 	bl	8004482 <_ZN13LoRa_register15get_field_valueEP13Address_fieldPmhb>
}
 80044ec:	b002      	add	sp, #8
 80044ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f2:	b004      	add	sp, #16
 80044f4:	4770      	bx	lr
	...

080044f8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>:
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4604      	mov	r4, r0
 80044fe:	4690      	mov	r8, r2
    check_missing_register(fields, amt);
 8004500:	461a      	mov	r2, r3
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 8004502:	461e      	mov	r6, r3
 8004504:	460f      	mov	r7, r1
    check_missing_register(fields, amt);
 8004506:	f7ff fec8 	bl	800429a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
    if(result_check_missing_register_len > 0) {
 800450a:	f894 3271 	ldrb.w	r3, [r4, #625]	; 0x271
 800450e:	b1f3      	cbz	r3, 800454e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
        read_fields = check_read(fields, amt);
 8004510:	4632      	mov	r2, r6
 8004512:	4639      	mov	r1, r7
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff fee4 	bl	80042e2 <_ZN13LoRa_register10check_readEP13Address_fieldh>
            _registers_state[reg_not_read[i]] = true;
 800451a:	2101      	movs	r1, #1
        for(int i = 0; i < reg_not_read_len; ++i) {
 800451c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800457c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x84>
 8004520:	f894 5313 	ldrb.w	r5, [r4, #787]	; 0x313
 8004524:	f204 22c3 	addw	r2, r4, #707	; 0x2c3
 8004528:	ebac 0c04 	sub.w	ip, ip, r4
 800452c:	eb0c 0302 	add.w	r3, ip, r2
 8004530:	429d      	cmp	r5, r3
 8004532:	dd05      	ble.n	8004540 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x48>
            _registers_state[reg_not_read[i]] = true;
 8004534:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004538:	4423      	add	r3, r4
 800453a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
        for(int i = 0; i < reg_not_read_len; ++i) {
 800453e:	e7f5      	b.n	800452c <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x34>
        if(read_fields) {
 8004540:	b128      	cbz	r0, 800454e <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x56>
            register_read(fields, amt, false);
 8004542:	2300      	movs	r3, #0
 8004544:	4632      	mov	r2, r6
 8004546:	4639      	mov	r1, r7
 8004548:	4620      	mov	r0, r4
 800454a:	f7ff ff6a 	bl	8004422 <_ZN13LoRa_register13register_readEP13Address_fieldhb>
uint8_t LoRa_register::set_field_value(Address_field* fields, uint32_t* values, uint8_t amt) {
 800454e:	2500      	movs	r5, #0
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 8004550:	f04f 0a1c 	mov.w	sl, #28
 8004554:	340c      	adds	r4, #12
    for(int i = 0; i < amt; ++i) {
 8004556:	42ae      	cmp	r6, r5
 8004558:	fa5f f985 	uxtb.w	r9, r5
 800455c:	dd0a      	ble.n	8004574 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
        result = fields[i].set_value(values[i], _registers_data, LORA_DATA_SIZE);
 800455e:	2370      	movs	r3, #112	; 0x70
 8004560:	4622      	mov	r2, r4
 8004562:	fb0a 7005 	mla	r0, sl, r5, r7
 8004566:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 800456a:	f7fe fcb0 	bl	8002ece <_ZNK13Address_field9set_valueEmPhi>
        if(result)
 800456e:	b908      	cbnz	r0, 8004574 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x7c>
    for(int i = 0; i < amt; ++i) {
 8004570:	3501      	adds	r5, #1
 8004572:	e7f0      	b.n	8004556 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh+0x5e>
}
 8004574:	4648      	mov	r0, r9
 8004576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457a:	bf00      	nop
 800457c:	fffffd3d 	.word	0xfffffd3d

08004580 <_ZN13LoRa_register15set_field_valueE13Address_fieldm>:
uint8_t LoRa_register::set_field_value(Address_field field, uint32_t value) {
 8004580:	b084      	sub	sp, #16
 8004582:	b510      	push	{r4, lr}
 8004584:	ac03      	add	r4, sp, #12
 8004586:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return set_field_value(&field, &value, 1);
 800458a:	4621      	mov	r1, r4
 800458c:	aa0a      	add	r2, sp, #40	; 0x28
 800458e:	2301      	movs	r3, #1
 8004590:	f7ff ffb2 	bl	80044f8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
}
 8004594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004598:	b004      	add	sp, #16
 800459a:	4770      	bx	lr

0800459c <_ZN13LoRa_register15_write_registerEhh>:
    _single_transfer(address | 0x80, value);
 800459c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80045a0:	f7ff bf07 	b.w	80043b2 <_ZN13LoRa_register16_single_transferEhh>

080045a4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>:
uint8_t LoRa_register::register_write(Address_field* fields, uint8_t amt_fields, bool fl_clear, bool error_clear) {
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	4604      	mov	r4, r0
 80045aa:	460f      	mov	r7, r1
 80045ac:	4690      	mov	r8, r2
 80045ae:	461e      	mov	r6, r3
 80045b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    if(check_missing_register(fields, amt_fields) != 0) {
 80045b4:	f7ff fe71 	bl	800429a <_ZN13LoRa_register22check_missing_registerEP13Address_fieldh>
 80045b8:	b130      	cbz	r0, 80045c8 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x24>
        if(error_clear)
 80045ba:	b32d      	cbz	r5, 8004608 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x64>
            clear();
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff fdb4 	bl	800412a <_ZN13LoRa_register5clearEv>
        return 0;
 80045c2:	2000      	movs	r0, #0
}
 80045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    field_registers(fields, amt_fields);
 80045c8:	4639      	mov	r1, r7
 80045ca:	4642      	mov	r2, r8
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff fe1d 	bl	800420c <_ZN13LoRa_register15field_registersEP13Address_fieldh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 80045d2:	4f0e      	ldr	r7, [pc, #56]	; (800460c <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x68>)
 80045d4:	f504 75e8 	add.w	r5, r4, #464	; 0x1d0
 80045d8:	1b3f      	subs	r7, r7, r4
 80045da:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
 80045de:	197b      	adds	r3, r7, r5
 80045e0:	4293      	cmp	r3, r2
 80045e2:	da07      	bge.n	80045f4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x50>
        _write_register(result_field_registers_data[i], _registers_data[result_field_registers_data[i]]);
 80045e4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80045e8:	4620      	mov	r0, r4
 80045ea:	1863      	adds	r3, r4, r1
 80045ec:	7b1a      	ldrb	r2, [r3, #12]
 80045ee:	f7ff ffd5 	bl	800459c <_ZN13LoRa_register15_write_registerEhh>
    for(int i = 0; i < result_field_registers_len; ++i) {
 80045f2:	e7f2      	b.n	80045da <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x36>
    _send = true;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    if (fl_clear) {
 80045fa:	b116      	cbz	r6, 8004602 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x5e>
        clear();
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7ff fd94 	bl	800412a <_ZN13LoRa_register5clearEv>
    return result_field_registers_len;
 8004602:	f894 0220 	ldrb.w	r0, [r4, #544]	; 0x220
 8004606:	e7dd      	b.n	80045c4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
        return 0;
 8004608:	4628      	mov	r0, r5
 800460a:	e7db      	b.n	80045c4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb+0x20>
 800460c:	fffffe30 	.word	0xfffffe30

08004610 <_ZN13LoRa_register14register_writeE13Address_fieldbb>:
uint8_t LoRa_register::register_write(Address_field field, bool fl_clear, bool error_clear) {
 8004610:	b084      	sub	sp, #16
 8004612:	b513      	push	{r0, r1, r4, lr}
 8004614:	ac05      	add	r4, sp, #20
 8004616:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return register_write(&field, 1, fl_clear, error_clear);
 800461a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800461e:	2201      	movs	r2, #1
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4621      	mov	r1, r4
 8004624:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004628:	f7ff ffbc 	bl	80045a4 <_ZN13LoRa_register14register_writeEP13Address_fieldhbb>
}
 800462c:	b002      	add	sp, #8
 800462e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004632:	b004      	add	sp, #16
 8004634:	4770      	bx	lr
	...

08004638 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>:
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	b085      	sub	sp, #20
 800463e:	9301      	str	r3, [sp, #4]
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa0>)
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004642:	4605      	mov	r5, r0
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004644:	f893 a000 	ldrb.w	sl, [r3]
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004648:	460f      	mov	r7, r1
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 800464a:	eb00 060a 	add.w	r6, r0, sl
 800464e:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
uint8_t LoRa_register::clear_flags(Address_field* flags, uint8_t amt_flags, bool back_value) {
 8004652:	4614      	mov	r4, r2
    if(_registers_state[REG_IRQ_FLAGS] == false) {
 8004654:	b923      	cbnz	r3, 8004660 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x28>
        return 0; // флаги не считаны
 8004656:	2400      	movs	r4, #0
}
 8004658:	4620      	mov	r0, r4
 800465a:	b005      	add	sp, #20
 800465c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(int i = 0; i < amt_flags; ++i) {
 8004660:	f04f 0800 	mov.w	r8, #0
 8004664:	f04f 0b1c 	mov.w	fp, #28
 8004668:	f500 79e8 	add.w	r9, r0, #464	; 0x1d0
 800466c:	4544      	cmp	r4, r8
 800466e:	dd0f      	ble.n	8004690 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x58>
 8004670:	fb0b 7208 	mla	r2, fp, r8, r7
 8004674:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
            if(flags[i] == _flags[j]) {
 8004678:	4610      	mov	r0, r2
 800467a:	9103      	str	r1, [sp, #12]
 800467c:	9202      	str	r2, [sp, #8]
 800467e:	f7fe fd76 	bl	800316e <_ZeqRK13Address_fieldS1_>
 8004682:	bb28      	cbnz	r0, 80046d0 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x98>
        for(int j = 0; j < AMT_FLAGS; ++j) {
 8004684:	9903      	ldr	r1, [sp, #12]
 8004686:	9a02      	ldr	r2, [sp, #8]
 8004688:	311c      	adds	r1, #28
 800468a:	4549      	cmp	r1, r9
 800468c:	d1f4      	bne.n	8004678 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x40>
 800468e:	e7e2      	b.n	8004656 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x1e>
    _registers_data[REG_IRQ_FLAGS] = 0;
 8004690:	2200      	movs	r2, #0
        _values_clear_flags_[i] = 1;
 8004692:	2101      	movs	r1, #1
 8004694:	4b11      	ldr	r3, [pc, #68]	; (80046dc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
    uint8_t data = _registers_data[REG_IRQ_FLAGS];
 8004696:	f896 800c 	ldrb.w	r8, [r6, #12]
    _registers_data[REG_IRQ_FLAGS] = 0;
 800469a:	7332      	strb	r2, [r6, #12]
    for(int i = 0; i < amt_flags; ++i)
 800469c:	4294      	cmp	r4, r2
 800469e:	d003      	beq.n	80046a8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x70>
        _values_clear_flags_[i] = 1;
 80046a0:	f843 1b04 	str.w	r1, [r3], #4
    for(int i = 0; i < amt_flags; ++i)
 80046a4:	3201      	adds	r2, #1
 80046a6:	e7f9      	b.n	800469c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x64>
    set_field_value(flags, _values_clear_flags_, amt_flags);
 80046a8:	4623      	mov	r3, r4
 80046aa:	4639      	mov	r1, r7
 80046ac:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0xa4>)
 80046ae:	4628      	mov	r0, r5
 80046b0:	f7ff ff22 	bl	80044f8 <_ZN13LoRa_register15set_field_valueEP13Address_fieldPmh>
    _write_register(REG_IRQ_FLAGS, _registers_data[REG_IRQ_FLAGS]);
 80046b4:	4651      	mov	r1, sl
 80046b6:	4628      	mov	r0, r5
 80046b8:	7b32      	ldrb	r2, [r6, #12]
 80046ba:	f7ff ff6f 	bl	800459c <_ZN13LoRa_register15_write_registerEhh>
    if(back_value) {
 80046be:	9b01      	ldr	r3, [sp, #4]
 80046c0:	b113      	cbz	r3, 80046c8 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x90>
        _registers_data[REG_IRQ_FLAGS] = data | ~_registers_data[REG_IRQ_FLAGS];
 80046c2:	f886 800c 	strb.w	r8, [r6, #12]
 80046c6:	e7c7      	b.n	8004658 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x20>
 80046c8:	7b33      	ldrb	r3, [r6, #12]
 80046ca:	ea68 0803 	orn	r8, r8, r3
 80046ce:	e7f8      	b.n	80046c2 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x8a>
    for(int i = 0; i < amt_flags; ++i) {
 80046d0:	f108 0801 	add.w	r8, r8, #1
 80046d4:	e7ca      	b.n	800466c <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb+0x34>
 80046d6:	bf00      	nop
 80046d8:	0800832b 	.word	0x0800832b
 80046dc:	20001700 	.word	0x20001700

080046e0 <_ZN13LoRa_register11clear_flagsE13Address_fieldb>:
uint8_t LoRa_register::clear_flags(Address_field flag, bool back_value) {
 80046e0:	b084      	sub	sp, #16
 80046e2:	b510      	push	{r4, lr}
 80046e4:	ac03      	add	r4, sp, #12
 80046e6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    return clear_flags(&flag, 1, back_value);
 80046ea:	4621      	mov	r1, r4
 80046ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80046f0:	2201      	movs	r2, #1
 80046f2:	f7ff ffa1 	bl	8004638 <_ZN13LoRa_register11clear_flagsEP13Address_fieldhb>
}
 80046f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fa:	b004      	add	sp, #16
 80046fc:	4770      	bx	lr
	...

08004700 <_GLOBAL__sub_I_REG_FIFO>:
// ----- ----- ----- Регистры ----- ----- -----
//   ----- ----- ----- - - - - - - ----- ----- -----
const Register
// --- --- --- Регистр очереди --- --- ---
// - REG_FIFO -
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004700:	2300      	movs	r3, #0
    // Dio2Mapping, Dio3Mapping, Dio4Mapping, Dio5Mapping,
    Version,
    // FastHopOn, TcxoInputOn,
    PaDac
    // FormerTemp, BitRateFrac, AgcReferenceLevel, AgcStep1, AgcStep2, AgcStep3, AgcStep4, AgcStep5, PllBandwidth
};
 8004702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 8004706:	4cda      	ldr	r4, [pc, #872]	; (8004a70 <_GLOBAL__sub_I_REG_FIFO+0x370>)
};
 8004708:	b087      	sub	sp, #28
reg_fifo[1] = {Register(REG_FIFO, 8, 0)},
 800470a:	4619      	mov	r1, r3
 800470c:	2208      	movs	r2, #8
 800470e:	4620      	mov	r0, r4
 8004710:	f7fe fb10 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_long_range_mode[1] = {Register(REG_OP_MODE, 1, 7)},
 8004714:	2201      	movs	r2, #1
 8004716:	f8df b41c 	ldr.w	fp, [pc, #1052]	; 8004b34 <_GLOBAL__sub_I_REG_FIFO+0x434>
 800471a:	4611      	mov	r1, r2
 800471c:	2307      	movs	r3, #7
 800471e:	4658      	mov	r0, fp
 8004720:	f7fe fb08 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 8004724:	2201      	movs	r2, #1
 8004726:	f8df a410 	ldr.w	sl, [pc, #1040]	; 8004b38 <_GLOBAL__sub_I_REG_FIFO+0x438>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 800472a:	f8df 9410 	ldr.w	r9, [pc, #1040]	; 8004b3c <_GLOBAL__sub_I_REG_FIFO+0x43c>
reg_low_frequency_mode_on[1] = {Register(REG_OP_MODE, 1, 3)},
 800472e:	4611      	mov	r1, r2
 8004730:	2303      	movs	r3, #3
 8004732:	4650      	mov	r0, sl
 8004734:	f7fe fafe 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_mode[1] = {Register(REG_OP_MODE, 3, 0)},
 8004738:	2300      	movs	r3, #0
 800473a:	2203      	movs	r2, #3
 800473c:	2101      	movs	r1, #1
 800473e:	4648      	mov	r0, r9
 8004740:	f7fe faf8 	bl	8002d34 <_ZN8RegisterC1Ethh>
              Register(REG_FRF_MSB, 8, 0)},
 8004744:	2208      	movs	r2, #8
 8004746:	f8df 83f8 	ldr.w	r8, [pc, #1016]	; 8004b40 <_GLOBAL__sub_I_REG_FIFO+0x440>
 800474a:	4611      	mov	r1, r2
 800474c:	2300      	movs	r3, #0
 800474e:	4640      	mov	r0, r8
 8004750:	f7fe faf0 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8004754:	2208      	movs	r2, #8
 8004756:	2300      	movs	r3, #0
 8004758:	eb08 0002 	add.w	r0, r8, r2
 800475c:	2107      	movs	r1, #7
 800475e:	f7fe fae9 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8004762:	2300      	movs	r3, #0
 8004764:	2208      	movs	r2, #8
 8004766:	2106      	movs	r1, #6
 8004768:	f108 0010 	add.w	r0, r8, #16
 800476c:	f7fe fae2 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_pa_select[1] = {Register(REG_PA_CONFIG, 1, 7)},
 8004770:	2307      	movs	r3, #7
 8004772:	2201      	movs	r2, #1
 8004774:	2109      	movs	r1, #9
 8004776:	48bf      	ldr	r0, [pc, #764]	; (8004a74 <_GLOBAL__sub_I_REG_FIFO+0x374>)
 8004778:	f7fe fadc 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_max_power[1] = {Register(REG_PA_CONFIG, 3, 4)},
 800477c:	2304      	movs	r3, #4
 800477e:	2203      	movs	r2, #3
 8004780:	2109      	movs	r1, #9
 8004782:	48bd      	ldr	r0, [pc, #756]	; (8004a78 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 8004784:	f7fe fad6 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_output_power[1] = {Register(REG_PA_CONFIG, 4, 0)},
 8004788:	2300      	movs	r3, #0
 800478a:	2204      	movs	r2, #4
 800478c:	2109      	movs	r1, #9
 800478e:	48bb      	ldr	r0, [pc, #748]	; (8004a7c <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 8004790:	f7fe fad0 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_lna_boost_hf[1] = {Register(REG_LNA, 2, 0)},
 8004794:	2300      	movs	r3, #0
 8004796:	2202      	movs	r2, #2
 8004798:	210c      	movs	r1, #12
 800479a:	48b9      	ldr	r0, [pc, #740]	; (8004a80 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 800479c:	f7fe faca 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fifo_addr_ptr[1] = {Register(REG_FIFO_ADDR_PTR, 8, 0)},
 80047a0:	2300      	movs	r3, #0
 80047a2:	2208      	movs	r2, #8
 80047a4:	210d      	movs	r1, #13
 80047a6:	48b7      	ldr	r0, [pc, #732]	; (8004a84 <_GLOBAL__sub_I_REG_FIFO+0x384>)
 80047a8:	f7fe fac4 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fifo_tx_base_addr[1] = {Register(REG_FIFO_TX_BASE_ADDR, 8, 0)},
 80047ac:	2300      	movs	r3, #0
 80047ae:	2208      	movs	r2, #8
 80047b0:	210e      	movs	r1, #14
 80047b2:	48b5      	ldr	r0, [pc, #724]	; (8004a88 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 80047b4:	f7fe fabe 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fifo_rx_base_addr[1] = {Register(REG_FIFO_RX_BASE_ADDR, 8, 0)},
 80047b8:	2300      	movs	r3, #0
 80047ba:	2208      	movs	r2, #8
 80047bc:	210f      	movs	r1, #15
 80047be:	48b3      	ldr	r0, [pc, #716]	; (8004a8c <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 80047c0:	f7fe fab8 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fifo_rx_current_addr[1] = {Register(REG_FIFO_RX_CURRENT_ADDR, 8, 0)},
 80047c4:	2300      	movs	r3, #0
 80047c6:	2208      	movs	r2, #8
 80047c8:	2110      	movs	r1, #16
 80047ca:	48b1      	ldr	r0, [pc, #708]	; (8004a90 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 80047cc:	f7fe fab2 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_rx_timeout[1] = {Register(REG_IRQ_FLAGS, 1, 7)},
 80047d0:	2307      	movs	r3, #7
 80047d2:	2201      	movs	r2, #1
 80047d4:	2112      	movs	r1, #18
 80047d6:	48af      	ldr	r0, [pc, #700]	; (8004a94 <_GLOBAL__sub_I_REG_FIFO+0x394>)
 80047d8:	f7fe faac 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_rx_done[1] = {Register(REG_IRQ_FLAGS, 1, 6)},
 80047dc:	2306      	movs	r3, #6
 80047de:	2201      	movs	r2, #1
 80047e0:	2112      	movs	r1, #18
 80047e2:	48ad      	ldr	r0, [pc, #692]	; (8004a98 <_GLOBAL__sub_I_REG_FIFO+0x398>)
 80047e4:	f7fe faa6 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_payload_crc_error[1] = {Register(REG_IRQ_FLAGS, 1, 5)},
 80047e8:	2305      	movs	r3, #5
 80047ea:	2201      	movs	r2, #1
 80047ec:	2112      	movs	r1, #18
 80047ee:	48ab      	ldr	r0, [pc, #684]	; (8004a9c <_GLOBAL__sub_I_REG_FIFO+0x39c>)
 80047f0:	f7fe faa0 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_valid_header[1] = {Register(REG_IRQ_FLAGS, 1, 4)},
 80047f4:	2304      	movs	r3, #4
 80047f6:	2201      	movs	r2, #1
 80047f8:	2112      	movs	r1, #18
 80047fa:	48a9      	ldr	r0, [pc, #676]	; (8004aa0 <_GLOBAL__sub_I_REG_FIFO+0x3a0>)
 80047fc:	f7fe fa9a 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_tx_done[1] = {Register(REG_IRQ_FLAGS, 1, 3)},
 8004800:	2303      	movs	r3, #3
 8004802:	2201      	movs	r2, #1
 8004804:	2112      	movs	r1, #18
 8004806:	48a7      	ldr	r0, [pc, #668]	; (8004aa4 <_GLOBAL__sub_I_REG_FIFO+0x3a4>)
 8004808:	f7fe fa94 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_cad_done[1] = {Register(REG_IRQ_FLAGS, 1, 2)},
 800480c:	2302      	movs	r3, #2
 800480e:	2201      	movs	r2, #1
 8004810:	2112      	movs	r1, #18
 8004812:	48a5      	ldr	r0, [pc, #660]	; (8004aa8 <_GLOBAL__sub_I_REG_FIFO+0x3a8>)
 8004814:	f7fe fa8e 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fhss_change_channel[1] = {Register(REG_IRQ_FLAGS, 1, 1)},
 8004818:	2301      	movs	r3, #1
 800481a:	2112      	movs	r1, #18
 800481c:	461a      	mov	r2, r3
 800481e:	48a3      	ldr	r0, [pc, #652]	; (8004aac <_GLOBAL__sub_I_REG_FIFO+0x3ac>)
 8004820:	f7fe fa88 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_cad_detected[1] = {Register(REG_IRQ_FLAGS, 1, 0)},
 8004824:	2300      	movs	r3, #0
 8004826:	2201      	movs	r2, #1
 8004828:	2112      	movs	r1, #18
 800482a:	48a1      	ldr	r0, [pc, #644]	; (8004ab0 <_GLOBAL__sub_I_REG_FIFO+0x3b0>)
 800482c:	f7fe fa82 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_fifo_rx_bytes_nb[1] = {Register(REG_RX_NB_BYTES, 8, 0)},
 8004830:	2300      	movs	r3, #0
 8004832:	2208      	movs	r2, #8
 8004834:	2113      	movs	r1, #19
 8004836:	489f      	ldr	r0, [pc, #636]	; (8004ab4 <_GLOBAL__sub_I_REG_FIFO+0x3b4>)
 8004838:	f7fe fa7c 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_packet_snr[1] = {Register(REG_PKT_SNR_VALUE, 8, 0)},
 800483c:	2300      	movs	r3, #0
 800483e:	2208      	movs	r2, #8
 8004840:	2119      	movs	r1, #25
 8004842:	489d      	ldr	r0, [pc, #628]	; (8004ab8 <_GLOBAL__sub_I_REG_FIFO+0x3b8>)
 8004844:	f7fe fa76 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_packet_rssi[1] = {Register(REG_PKT_RSSI_VALUE, 8, 0)},
 8004848:	2300      	movs	r3, #0
 800484a:	2208      	movs	r2, #8
 800484c:	211a      	movs	r1, #26
 800484e:	489b      	ldr	r0, [pc, #620]	; (8004abc <_GLOBAL__sub_I_REG_FIFO+0x3bc>)
 8004850:	f7fe fa70 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_bw[1] = {Register(REG_MODEM_CONFIG_1, 4, 4)},
 8004854:	2304      	movs	r3, #4
 8004856:	211d      	movs	r1, #29
 8004858:	461a      	mov	r2, r3
 800485a:	4899      	ldr	r0, [pc, #612]	; (8004ac0 <_GLOBAL__sub_I_REG_FIFO+0x3c0>)
 800485c:	f7fe fa6a 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_spreading_factor[1] = {Register(REG_MODEM_CONFIG_2, 4, 4)},
 8004860:	2304      	movs	r3, #4
 8004862:	211e      	movs	r1, #30
 8004864:	461a      	mov	r2, r3
 8004866:	4897      	ldr	r0, [pc, #604]	; (8004ac4 <_GLOBAL__sub_I_REG_FIFO+0x3c4>)
 8004868:	f7fe fa64 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_rx_payload_crc_on[1] = {Register(REG_MODEM_CONFIG_2, 1, 2)},
 800486c:	2302      	movs	r3, #2
 800486e:	2201      	movs	r2, #1
 8004870:	211e      	movs	r1, #30
 8004872:	4895      	ldr	r0, [pc, #596]	; (8004ac8 <_GLOBAL__sub_I_REG_FIFO+0x3c8>)
 8004874:	f7fe fa5e 	bl	8002d34 <_ZN8RegisterC1Ethh>
                          Register(REG_PREAMBLE_MSB, 8, 0)},
 8004878:	2300      	movs	r3, #0
 800487a:	2208      	movs	r2, #8
 800487c:	2121      	movs	r1, #33	; 0x21
 800487e:	4893      	ldr	r0, [pc, #588]	; (8004acc <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004880:	f7fe fa58 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8004884:	2208      	movs	r2, #8
 8004886:	4891      	ldr	r0, [pc, #580]	; (8004acc <_GLOBAL__sub_I_REG_FIFO+0x3cc>)
 8004888:	2300      	movs	r3, #0
 800488a:	2120      	movs	r1, #32
 800488c:	4410      	add	r0, r2
 800488e:	f7fe fa51 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_payload_length[1] = {Register(REG_PAYLOAD_LENGTH, 8, 0)},
 8004892:	2300      	movs	r3, #0
 8004894:	2208      	movs	r2, #8
 8004896:	2122      	movs	r1, #34	; 0x22
 8004898:	488d      	ldr	r0, [pc, #564]	; (8004ad0 <_GLOBAL__sub_I_REG_FIFO+0x3d0>)
 800489a:	f7fe fa4b 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_low_data_rate_optimize[1] = {Register(REG_MODEM_CONFIG_3, 1, 3)},
 800489e:	2303      	movs	r3, #3
 80048a0:	2201      	movs	r2, #1
 80048a2:	2126      	movs	r1, #38	; 0x26
 80048a4:	488b      	ldr	r0, [pc, #556]	; (8004ad4 <_GLOBAL__sub_I_REG_FIFO+0x3d4>)
 80048a6:	f7fe fa45 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_agc_auto_on[1] = {Register(REG_MODEM_CONFIG_3, 1, 2)},
 80048aa:	2302      	movs	r3, #2
 80048ac:	2201      	movs	r2, #1
 80048ae:	2126      	movs	r1, #38	; 0x26
 80048b0:	4889      	ldr	r0, [pc, #548]	; (8004ad8 <_GLOBAL__sub_I_REG_FIFO+0x3d8>)
 80048b2:	f7fe fa3f 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_detection_optimize[1] = {Register(REG_DETECTION_OPTIMIZE, 3, 0)},
 80048b6:	2300      	movs	r3, #0
 80048b8:	2203      	movs	r2, #3
 80048ba:	2131      	movs	r1, #49	; 0x31
 80048bc:	4887      	ldr	r0, [pc, #540]	; (8004adc <_GLOBAL__sub_I_REG_FIFO+0x3dc>)
 80048be:	f7fe fa39 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_detection_threshold[1] = {Register(REG_DETECTION_THRESHOLD, 8, 0)},
 80048c2:	2300      	movs	r3, #0
 80048c4:	2208      	movs	r2, #8
 80048c6:	2137      	movs	r1, #55	; 0x37
 80048c8:	4885      	ldr	r0, [pc, #532]	; (8004ae0 <_GLOBAL__sub_I_REG_FIFO+0x3e0>)
 80048ca:	f7fe fa33 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_sync_word[1] = {Register(REG_SYNC_WORD, 8, 0)},  // , reserved_value=[0x34])
 80048ce:	2300      	movs	r3, #0
 80048d0:	2208      	movs	r2, #8
 80048d2:	2139      	movs	r1, #57	; 0x39
 80048d4:	4883      	ldr	r0, [pc, #524]	; (8004ae4 <_GLOBAL__sub_I_REG_FIFO+0x3e4>)
 80048d6:	f7fe fa2d 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_dio0_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 6)},
 80048da:	2306      	movs	r3, #6
 80048dc:	2202      	movs	r2, #2
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	4881      	ldr	r0, [pc, #516]	; (8004ae8 <_GLOBAL__sub_I_REG_FIFO+0x3e8>)
 80048e2:	f7fe fa27 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_dio1_mapping[1] = {Register(REG_DIO_MAPPING_1, 2, 4)},
 80048e6:	2304      	movs	r3, #4
 80048e8:	2202      	movs	r2, #2
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	487f      	ldr	r0, [pc, #508]	; (8004aec <_GLOBAL__sub_I_REG_FIFO+0x3ec>)
 80048ee:	f7fe fa21 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_map_preamble_detect[1] = {Register(REG_DIO_MAPPING_2, 1, 0)},
 80048f2:	2300      	movs	r3, #0
 80048f4:	2201      	movs	r2, #1
 80048f6:	2141      	movs	r1, #65	; 0x41
 80048f8:	487d      	ldr	r0, [pc, #500]	; (8004af0 <_GLOBAL__sub_I_REG_FIFO+0x3f0>)
 80048fa:	f7fe fa1b 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 80048fe:	2300      	movs	r3, #0
 8004900:	2208      	movs	r2, #8
 8004902:	2142      	movs	r1, #66	; 0x42
 8004904:	487b      	ldr	r0, [pc, #492]	; (8004af4 <_GLOBAL__sub_I_REG_FIFO+0x3f4>)
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004906:	2700      	movs	r7, #0
 8004908:	2577      	movs	r5, #119	; 0x77
 800490a:	26ff      	movs	r6, #255	; 0xff
reg_version[1] = {Register(REG_VERSION, 8, 0)},
 800490c:	f7fe fa12 	bl	8002d34 <_ZN8RegisterC1Ethh>
reg_pa_dac[1] = {Register(REG_PA_DAC, 3, 0)}//,
 8004910:	2300      	movs	r3, #0
 8004912:	2203      	movs	r2, #3
 8004914:	214d      	movs	r1, #77	; 0x4d
 8004916:	4878      	ldr	r0, [pc, #480]	; (8004af8 <_GLOBAL__sub_I_REG_FIFO+0x3f8>)
 8004918:	f7fe fa0c 	bl	8002d34 <_ZN8RegisterC1Ethh>
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 800491c:	4621      	mov	r1, r4
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 800491e:	2401      	movs	r4, #1
Fifo(reg_fifo, 1, false, 'w', 0x00, 0xFF),
 8004920:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004924:	463b      	mov	r3, r7
 8004926:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800492a:	9500      	str	r5, [sp, #0]
 800492c:	2201      	movs	r2, #1
 800492e:	4873      	ldr	r0, [pc, #460]	; (8004afc <_GLOBAL__sub_I_REG_FIFO+0x3fc>)
 8004930:	f7fe fa8a 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LongRangeMode(reg_long_range_mode, 1, false, 'w', 0x00, 0x01),
 8004934:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004938:	463b      	mov	r3, r7
 800493a:	4622      	mov	r2, r4
 800493c:	4659      	mov	r1, fp
 800493e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004942:	9500      	str	r5, [sp, #0]
 8004944:	486e      	ldr	r0, [pc, #440]	; (8004b00 <_GLOBAL__sub_I_REG_FIFO+0x400>)
 8004946:	f7fe fa7f 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowFrequencyModeOn(reg_low_frequency_mode_on, 1, false, 'w', 0x00, 0x01),
 800494a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800494e:	463b      	mov	r3, r7
 8004950:	4622      	mov	r2, r4
 8004952:	4651      	mov	r1, sl
 8004954:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004958:	9500      	str	r5, [sp, #0]
 800495a:	486a      	ldr	r0, [pc, #424]	; (8004b04 <_GLOBAL__sub_I_REG_FIFO+0x404>)
 800495c:	f7fe fa74 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Mode(reg_mode, 1, false, 'w', 0x00, 0x07),
 8004960:	2307      	movs	r3, #7
 8004962:	4622      	mov	r2, r4
 8004964:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8004968:	4649      	mov	r1, r9
 800496a:	463b      	mov	r3, r7
 800496c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004970:	9500      	str	r5, [sp, #0]
 8004972:	4865      	ldr	r0, [pc, #404]	; (8004b08 <_GLOBAL__sub_I_REG_FIFO+0x408>)
 8004974:	f7fe fa68 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Frf(reg_frf, 3, false, 'w', 0x000000, 0xFFFFFF),
 8004978:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800497c:	463b      	mov	r3, r7
 800497e:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004982:	4641      	mov	r1, r8
 8004984:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004988:	9500      	str	r5, [sp, #0]
 800498a:	2203      	movs	r2, #3
 800498c:	485f      	ldr	r0, [pc, #380]	; (8004b0c <_GLOBAL__sub_I_REG_FIFO+0x40c>)
 800498e:	f7fe fa5b 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaSelect(reg_pa_select, 1, false, 'w', 0x00, 0x01),
 8004992:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004996:	463b      	mov	r3, r7
 8004998:	4622      	mov	r2, r4
 800499a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800499e:	9500      	str	r5, [sp, #0]
 80049a0:	4934      	ldr	r1, [pc, #208]	; (8004a74 <_GLOBAL__sub_I_REG_FIFO+0x374>)
 80049a2:	485b      	ldr	r0, [pc, #364]	; (8004b10 <_GLOBAL__sub_I_REG_FIFO+0x410>)
 80049a4:	f7fe fa50 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MaxPower(reg_max_power, 1, false, 'w', 0x00, 0x07),
 80049a8:	2307      	movs	r3, #7
 80049aa:	4622      	mov	r2, r4
 80049ac:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80049b0:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80049b4:	463b      	mov	r3, r7
 80049b6:	9500      	str	r5, [sp, #0]
 80049b8:	492f      	ldr	r1, [pc, #188]	; (8004a78 <_GLOBAL__sub_I_REG_FIFO+0x378>)
 80049ba:	4856      	ldr	r0, [pc, #344]	; (8004b14 <_GLOBAL__sub_I_REG_FIFO+0x414>)
 80049bc:	f7fe fa44 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 80049c0:	220f      	movs	r2, #15
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 80049c2:	f04f 0b03 	mov.w	fp, #3
 80049c6:	f04f 0902 	mov.w	r9, #2
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 80049ca:	f04f 0a72 	mov.w	sl, #114	; 0x72
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 80049ce:	f04f 0863 	mov.w	r8, #99	; 0x63
OutputPower(reg_output_power, 1, false, 'w', 0x00, 0x0F),
 80049d2:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80049d6:	463b      	mov	r3, r7
 80049d8:	4622      	mov	r2, r4
 80049da:	e9cd 7703 	strd	r7, r7, [sp, #12]
 80049de:	9500      	str	r5, [sp, #0]
 80049e0:	4926      	ldr	r1, [pc, #152]	; (8004a7c <_GLOBAL__sub_I_REG_FIFO+0x37c>)
 80049e2:	484d      	ldr	r0, [pc, #308]	; (8004b18 <_GLOBAL__sub_I_REG_FIFO+0x418>)
 80049e4:	f7fe fa30 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LnaBoostHf(reg_lna_boost_hf, 1, false, 'w', 0x00, 0x03, reserv_lna_boost_hf, 2),
 80049e8:	4a4c      	ldr	r2, [pc, #304]	; (8004b1c <_GLOBAL__sub_I_REG_FIFO+0x41c>)
 80049ea:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 80049ee:	463b      	mov	r3, r7
 80049f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80049f4:	9203      	str	r2, [sp, #12]
 80049f6:	9500      	str	r5, [sp, #0]
 80049f8:	4622      	mov	r2, r4
 80049fa:	4921      	ldr	r1, [pc, #132]	; (8004a80 <_GLOBAL__sub_I_REG_FIFO+0x380>)
 80049fc:	4848      	ldr	r0, [pc, #288]	; (8004b20 <_GLOBAL__sub_I_REG_FIFO+0x420>)
 80049fe:	f7fe fa23 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoAddrPtr(reg_fifo_addr_ptr, 1, false, 'w', 0x00, 0xFF),
 8004a02:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004a06:	463b      	mov	r3, r7
 8004a08:	4622      	mov	r2, r4
 8004a0a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004a0e:	9500      	str	r5, [sp, #0]
 8004a10:	491c      	ldr	r1, [pc, #112]	; (8004a84 <_GLOBAL__sub_I_REG_FIFO+0x384>)
 8004a12:	4844      	ldr	r0, [pc, #272]	; (8004b24 <_GLOBAL__sub_I_REG_FIFO+0x424>)
 8004a14:	f7fe fa18 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoTxBaseAddr(reg_fifo_tx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004a18:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004a1c:	463b      	mov	r3, r7
 8004a1e:	4622      	mov	r2, r4
 8004a20:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004a24:	9500      	str	r5, [sp, #0]
 8004a26:	4918      	ldr	r1, [pc, #96]	; (8004a88 <_GLOBAL__sub_I_REG_FIFO+0x388>)
 8004a28:	483f      	ldr	r0, [pc, #252]	; (8004b28 <_GLOBAL__sub_I_REG_FIFO+0x428>)
 8004a2a:	f7fe fa0d 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBaseAddr(reg_fifo_rx_base_addr, 1, false, 'w', 0x00, 0xFF),
 8004a2e:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004a32:	463b      	mov	r3, r7
 8004a34:	4622      	mov	r2, r4
 8004a36:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004a3a:	9500      	str	r5, [sp, #0]
 8004a3c:	4913      	ldr	r1, [pc, #76]	; (8004a8c <_GLOBAL__sub_I_REG_FIFO+0x38c>)
 8004a3e:	483b      	ldr	r0, [pc, #236]	; (8004b2c <_GLOBAL__sub_I_REG_FIFO+0x42c>)
 8004a40:	f7fe fa02 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxCurrentAddr(reg_fifo_rx_current_addr, 1, false, 'r', 0x00, 0xFF),
 8004a44:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004a48:	463b      	mov	r3, r7
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004a50:	490f      	ldr	r1, [pc, #60]	; (8004a90 <_GLOBAL__sub_I_REG_FIFO+0x390>)
 8004a52:	f8cd a000 	str.w	sl, [sp]
 8004a56:	4836      	ldr	r0, [pc, #216]	; (8004b30 <_GLOBAL__sub_I_REG_FIFO+0x430>)
 8004a58:	f7fe f9f6 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxTimeout(reg_rx_timeout, 1, false, 'c', 0x00, 0x01),
 8004a5c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004a60:	463b      	mov	r3, r7
 8004a62:	4622      	mov	r2, r4
 8004a64:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004a68:	f8cd 8000 	str.w	r8, [sp]
 8004a6c:	e06a      	b.n	8004b44 <_GLOBAL__sub_I_REG_FIFO+0x444>
 8004a6e:	bf00      	nop
 8004a70:	200020cc 	.word	0x200020cc
 8004a74:	20001fa0 	.word	0x20001fa0
 8004a78:	20001f98 	.word	0x20001f98
 8004a7c:	20001ff0 	.word	0x20001ff0
 8004a80:	20001fe8 	.word	0x20001fe8
 8004a84:	2000201c 	.word	0x2000201c
 8004a88:	2000205c 	.word	0x2000205c
 8004a8c:	20002054 	.word	0x20002054
 8004a90:	20002094 	.word	0x20002094
 8004a94:	20001fb8 	.word	0x20001fb8
 8004a98:	20001f78 	.word	0x20001f78
 8004a9c:	20002064 	.word	0x20002064
 8004aa0:	20001ff8 	.word	0x20001ff8
 8004aa4:	20001f80 	.word	0x20001f80
 8004aa8:	20001f90 	.word	0x20001f90
 8004aac:	20002084 	.word	0x20002084
 8004ab0:	20001fd0 	.word	0x20001fd0
 8004ab4:	20002044 	.word	0x20002044
 8004ab8:	20001fb0 	.word	0x20001fb0
 8004abc:	20001fc8 	.word	0x20001fc8
 8004ac0:	200020ac 	.word	0x200020ac
 8004ac4:	2000204c 	.word	0x2000204c
 8004ac8:	2000206c 	.word	0x2000206c
 8004acc:	20002034 	.word	0x20002034
 8004ad0:	20002024 	.word	0x20002024
 8004ad4:	200020a4 	.word	0x200020a4
 8004ad8:	20001fc0 	.word	0x20001fc0
 8004adc:	20002074 	.word	0x20002074
 8004ae0:	2000207c 	.word	0x2000207c
 8004ae4:	20001fa8 	.word	0x20001fa8
 8004ae8:	20001fd8 	.word	0x20001fd8
 8004aec:	20001fe0 	.word	0x20001fe0
 8004af0:	2000208c 	.word	0x2000208c
 8004af4:	20001f88 	.word	0x20001f88
 8004af8:	20001f70 	.word	0x20001f70
 8004afc:	20001c44 	.word	0x20001c44
 8004b00:	20001d24 	.word	0x20001d24
 8004b04:	20001d5c 	.word	0x20001d5c
 8004b08:	20001d94 	.word	0x20001d94
 8004b0c:	20001cec 	.word	0x20001cec
 8004b10:	20001de8 	.word	0x20001de8
 8004b14:	20001d78 	.word	0x20001d78
 8004b18:	20001db0 	.word	0x20001db0
 8004b1c:	08008334 	.word	0x08008334
 8004b20:	20001d08 	.word	0x20001d08
 8004b24:	20001c60 	.word	0x20001c60
 8004b28:	20001cd0 	.word	0x20001cd0
 8004b2c:	20001c7c 	.word	0x20001c7c
 8004b30:	20001cb4 	.word	0x20001cb4
 8004b34:	2000202c 	.word	0x2000202c
 8004b38:	2000209c 	.word	0x2000209c
 8004b3c:	200020d4 	.word	0x200020d4
 8004b40:	200020b4 	.word	0x200020b4
 8004b44:	49ce      	ldr	r1, [pc, #824]	; (8004e80 <_GLOBAL__sub_I_REG_FIFO+0x780>)
 8004b46:	48cf      	ldr	r0, [pc, #828]	; (8004e84 <_GLOBAL__sub_I_REG_FIFO+0x784>)
 8004b48:	f7fe f97e 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxDone(reg_rx_done, 1, false, 'c', 0x00, 0x01),
 8004b4c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004b50:	463b      	mov	r3, r7
 8004b52:	4622      	mov	r2, r4
 8004b54:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004b58:	f8cd 8000 	str.w	r8, [sp]
 8004b5c:	49ca      	ldr	r1, [pc, #808]	; (8004e88 <_GLOBAL__sub_I_REG_FIFO+0x788>)
 8004b5e:	48cb      	ldr	r0, [pc, #812]	; (8004e8c <_GLOBAL__sub_I_REG_FIFO+0x78c>)
 8004b60:	f7fe f972 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadCrcError(reg_payload_crc_error, 1, false, 'c', 0x00, 0x01),
 8004b64:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004b70:	f8cd 8000 	str.w	r8, [sp]
 8004b74:	49c6      	ldr	r1, [pc, #792]	; (8004e90 <_GLOBAL__sub_I_REG_FIFO+0x790>)
 8004b76:	48c7      	ldr	r0, [pc, #796]	; (8004e94 <_GLOBAL__sub_I_REG_FIFO+0x794>)
 8004b78:	f7fe f966 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
ValidHeader(reg_valid_header, 1, false, 'c', 0x00, 0x01),
 8004b7c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004b80:	463b      	mov	r3, r7
 8004b82:	4622      	mov	r2, r4
 8004b84:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004b88:	f8cd 8000 	str.w	r8, [sp]
 8004b8c:	49c2      	ldr	r1, [pc, #776]	; (8004e98 <_GLOBAL__sub_I_REG_FIFO+0x798>)
 8004b8e:	48c3      	ldr	r0, [pc, #780]	; (8004e9c <_GLOBAL__sub_I_REG_FIFO+0x79c>)
 8004b90:	f7fe f95a 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
TxDone(reg_tx_done, 1, false, 'c', 0x00, 0x01),
 8004b94:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004b98:	463b      	mov	r3, r7
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004ba0:	f8cd 8000 	str.w	r8, [sp]
 8004ba4:	49be      	ldr	r1, [pc, #760]	; (8004ea0 <_GLOBAL__sub_I_REG_FIFO+0x7a0>)
 8004ba6:	48bf      	ldr	r0, [pc, #764]	; (8004ea4 <_GLOBAL__sub_I_REG_FIFO+0x7a4>)
 8004ba8:	f7fe f94e 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDone(reg_cad_done, 1, false, 'c', 0x00, 0x01),
 8004bac:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004bb8:	f8cd 8000 	str.w	r8, [sp]
 8004bbc:	49ba      	ldr	r1, [pc, #744]	; (8004ea8 <_GLOBAL__sub_I_REG_FIFO+0x7a8>)
 8004bbe:	48bb      	ldr	r0, [pc, #748]	; (8004eac <_GLOBAL__sub_I_REG_FIFO+0x7ac>)
 8004bc0:	f7fe f942 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FhssChangeChannel(reg_fhss_change_channel, 1, false, 'c', 0x00, 0x01),
 8004bc4:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4622      	mov	r2, r4
 8004bcc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004bd0:	f8cd 8000 	str.w	r8, [sp]
 8004bd4:	49b6      	ldr	r1, [pc, #728]	; (8004eb0 <_GLOBAL__sub_I_REG_FIFO+0x7b0>)
 8004bd6:	48b7      	ldr	r0, [pc, #732]	; (8004eb4 <_GLOBAL__sub_I_REG_FIFO+0x7b4>)
 8004bd8:	f7fe f936 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
CadDetected(reg_cad_detected, 1, false, 'c', 0x00, 0x01),
 8004bdc:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004be0:	463b      	mov	r3, r7
 8004be2:	4622      	mov	r2, r4
 8004be4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004be8:	f8cd 8000 	str.w	r8, [sp]
 8004bec:	49b2      	ldr	r1, [pc, #712]	; (8004eb8 <_GLOBAL__sub_I_REG_FIFO+0x7b8>)
 8004bee:	48b3      	ldr	r0, [pc, #716]	; (8004ebc <_GLOBAL__sub_I_REG_FIFO+0x7bc>)
 8004bf0:	f7fe f92a 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
FifoRxBytesNb(reg_fifo_rx_bytes_nb, 1, false, 'r', 0x00, 0xFF),
 8004bf4:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c00:	49af      	ldr	r1, [pc, #700]	; (8004ec0 <_GLOBAL__sub_I_REG_FIFO+0x7c0>)
 8004c02:	f8cd a000 	str.w	sl, [sp]
 8004c06:	48af      	ldr	r0, [pc, #700]	; (8004ec4 <_GLOBAL__sub_I_REG_FIFO+0x7c4>)
 8004c08:	f7fe f91e 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketSnr(reg_packet_snr, 1, false, 'r', 0x00, 0xFF),
 8004c0c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004c10:	463b      	mov	r3, r7
 8004c12:	4622      	mov	r2, r4
 8004c14:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c18:	49ab      	ldr	r1, [pc, #684]	; (8004ec8 <_GLOBAL__sub_I_REG_FIFO+0x7c8>)
 8004c1a:	f8cd a000 	str.w	sl, [sp]
 8004c1e:	48ab      	ldr	r0, [pc, #684]	; (8004ecc <_GLOBAL__sub_I_REG_FIFO+0x7cc>)
 8004c20:	f7fe f912 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PacketRssi(reg_packet_rssi, 1, false, 'r', 0x00, 0xFF),
 8004c24:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004c28:	463b      	mov	r3, r7
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c30:	49a7      	ldr	r1, [pc, #668]	; (8004ed0 <_GLOBAL__sub_I_REG_FIFO+0x7d0>)
 8004c32:	f8cd a000 	str.w	sl, [sp]
 8004c36:	48a7      	ldr	r0, [pc, #668]	; (8004ed4 <_GLOBAL__sub_I_REG_FIFO+0x7d4>)
 8004c38:	f7fe f906 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Bw(reg_bw, 1, false, 'w', 0x00, 0x09),
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	463b      	mov	r3, r7
 8004c40:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004c44:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c48:	4622      	mov	r2, r4
 8004c4a:	9500      	str	r5, [sp, #0]
 8004c4c:	49a2      	ldr	r1, [pc, #648]	; (8004ed8 <_GLOBAL__sub_I_REG_FIFO+0x7d8>)
 8004c4e:	48a3      	ldr	r0, [pc, #652]	; (8004edc <_GLOBAL__sub_I_REG_FIFO+0x7dc>)
 8004c50:	f7fe f8fa 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
SpreadingFactor(reg_spreading_factor, 1, false, 'w', 0x06, 0x0C),
 8004c54:	f04f 080c 	mov.w	r8, #12
 8004c58:	2206      	movs	r2, #6
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	e9cd 2801 	strd	r2, r8, [sp, #4]
 8004c60:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c64:	4622      	mov	r2, r4
 8004c66:	9500      	str	r5, [sp, #0]
 8004c68:	499d      	ldr	r1, [pc, #628]	; (8004ee0 <_GLOBAL__sub_I_REG_FIFO+0x7e0>)
 8004c6a:	489e      	ldr	r0, [pc, #632]	; (8004ee4 <_GLOBAL__sub_I_REG_FIFO+0x7e4>)
 8004c6c:	f7fe f8ec 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
RxPayloadCrcOn(reg_rx_payload_crc_on, 1, false, 'w', 0x00, 0x01),
 8004c70:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004c74:	463b      	mov	r3, r7
 8004c76:	4622      	mov	r2, r4
 8004c78:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c7c:	9500      	str	r5, [sp, #0]
 8004c7e:	499a      	ldr	r1, [pc, #616]	; (8004ee8 <_GLOBAL__sub_I_REG_FIFO+0x7e8>)
 8004c80:	489a      	ldr	r0, [pc, #616]	; (8004eec <_GLOBAL__sub_I_REG_FIFO+0x7ec>)
 8004c82:	f7fe f8e1 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PreambleLength(reg_preamble_length, 2, false, 'w', 0x0000, 0xFFFF),
 8004c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004c90:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004c94:	464a      	mov	r2, r9
 8004c96:	9500      	str	r5, [sp, #0]
 8004c98:	4995      	ldr	r1, [pc, #596]	; (8004ef0 <_GLOBAL__sub_I_REG_FIFO+0x7f0>)
 8004c9a:	4896      	ldr	r0, [pc, #600]	; (8004ef4 <_GLOBAL__sub_I_REG_FIFO+0x7f4>)
 8004c9c:	f7fe f8d4 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PayloadLength(reg_payload_length, 1, false, 'w', 0x01, 0xFF),
 8004ca0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004cac:	9500      	str	r5, [sp, #0]
 8004cae:	4992      	ldr	r1, [pc, #584]	; (8004ef8 <_GLOBAL__sub_I_REG_FIFO+0x7f8>)
 8004cb0:	4892      	ldr	r0, [pc, #584]	; (8004efc <_GLOBAL__sub_I_REG_FIFO+0x7fc>)
 8004cb2:	f7fe f8c9 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
LowDataRateOptimize(reg_low_data_rate_optimize, 1, false, 'w', 0x00, 0x01),
 8004cb6:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004cba:	463b      	mov	r3, r7
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004cc2:	9500      	str	r5, [sp, #0]
 8004cc4:	498e      	ldr	r1, [pc, #568]	; (8004f00 <_GLOBAL__sub_I_REG_FIFO+0x800>)
 8004cc6:	488f      	ldr	r0, [pc, #572]	; (8004f04 <_GLOBAL__sub_I_REG_FIFO+0x804>)
 8004cc8:	f7fe f8be 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
AgcAutoOn(reg_agc_auto_on, 1, false, 'w', 0x00, 0x01),
 8004ccc:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004cd8:	9500      	str	r5, [sp, #0]
 8004cda:	498b      	ldr	r1, [pc, #556]	; (8004f08 <_GLOBAL__sub_I_REG_FIFO+0x808>)
 8004cdc:	488b      	ldr	r0, [pc, #556]	; (8004f0c <_GLOBAL__sub_I_REG_FIFO+0x80c>)
 8004cde:	f7fe f8b3 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionOptimize(reg_detection_optimize, 1, false, 'w', 0x03, 0x05, reserv_detection_optimize, 1),
 8004ce2:	4a8b      	ldr	r2, [pc, #556]	; (8004f10 <_GLOBAL__sub_I_REG_FIFO+0x810>)
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	9203      	str	r2, [sp, #12]
 8004ce8:	2205      	movs	r2, #5
 8004cea:	9404      	str	r4, [sp, #16]
 8004cec:	e9cd b201 	strd	fp, r2, [sp, #4]
 8004cf0:	9500      	str	r5, [sp, #0]
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4987      	ldr	r1, [pc, #540]	; (8004f14 <_GLOBAL__sub_I_REG_FIFO+0x814>)
 8004cf6:	4888      	ldr	r0, [pc, #544]	; (8004f18 <_GLOBAL__sub_I_REG_FIFO+0x818>)
 8004cf8:	f7fe f8a6 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
DetectionThreshold(reg_detection_threshold, 1, false, 'w', 0x0A, 0x0C, reserv_detection_threshold, 1),
 8004cfc:	4a87      	ldr	r2, [pc, #540]	; (8004f1c <_GLOBAL__sub_I_REG_FIFO+0x81c>)
 8004cfe:	463b      	mov	r3, r7
 8004d00:	e9cd 8202 	strd	r8, r2, [sp, #8]
 8004d04:	220a      	movs	r2, #10
 8004d06:	9404      	str	r4, [sp, #16]
 8004d08:	e9cd 5200 	strd	r5, r2, [sp]
 8004d0c:	4984      	ldr	r1, [pc, #528]	; (8004f20 <_GLOBAL__sub_I_REG_FIFO+0x820>)
 8004d0e:	4622      	mov	r2, r4
 8004d10:	4884      	ldr	r0, [pc, #528]	; (8004f24 <_GLOBAL__sub_I_REG_FIFO+0x824>)
 8004d12:	f7fe f899 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8004d16:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8004f88 <_GLOBAL__sub_I_REG_FIFO+0x888>
SyncWord(reg_sync_word, 1, false, 'w', 0x00, 0xFF),  // , reserv_sync_word, 1),
 8004d1a:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004d1e:	463b      	mov	r3, r7
 8004d20:	4622      	mov	r2, r4
 8004d22:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d26:	9500      	str	r5, [sp, #0]
 8004d28:	497f      	ldr	r1, [pc, #508]	; (8004f28 <_GLOBAL__sub_I_REG_FIFO+0x828>)
 8004d2a:	4880      	ldr	r0, [pc, #512]	; (8004f2c <_GLOBAL__sub_I_REG_FIFO+0x82c>)
 8004d2c:	f7fe f88c 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio0Mapping(reg_dio0_mapping, 1, false, 'w', 0x00, 0x03),
 8004d30:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8004d34:	463b      	mov	r3, r7
 8004d36:	4622      	mov	r2, r4
 8004d38:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d3c:	9500      	str	r5, [sp, #0]
 8004d3e:	497c      	ldr	r1, [pc, #496]	; (8004f30 <_GLOBAL__sub_I_REG_FIFO+0x830>)
 8004d40:	487c      	ldr	r0, [pc, #496]	; (8004f34 <_GLOBAL__sub_I_REG_FIFO+0x834>)
 8004d42:	f7fe f881 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Dio1Mapping(reg_dio1_mapping, 1, false, 'w', 0x00, 0x03),
 8004d46:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d52:	9500      	str	r5, [sp, #0]
 8004d54:	4640      	mov	r0, r8
 8004d56:	4978      	ldr	r1, [pc, #480]	; (8004f38 <_GLOBAL__sub_I_REG_FIFO+0x838>)
 8004d58:	f7fe f876 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
MapPreambleDetect(reg_map_preamble_detect, 1, false, 'w', 0x00, 0x01),
 8004d5c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8004d60:	463b      	mov	r3, r7
 8004d62:	4622      	mov	r2, r4
 8004d64:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d68:	9500      	str	r5, [sp, #0]
 8004d6a:	4974      	ldr	r1, [pc, #464]	; (8004f3c <_GLOBAL__sub_I_REG_FIFO+0x83c>)
 8004d6c:	4874      	ldr	r0, [pc, #464]	; (8004f40 <_GLOBAL__sub_I_REG_FIFO+0x840>)
 8004d6e:	f7fe f86b 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Version(reg_version, 1, false, 'r', 0x00, 0xFF),
 8004d72:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8004d76:	463b      	mov	r3, r7
 8004d78:	4622      	mov	r2, r4
 8004d7a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8004d7e:	4971      	ldr	r1, [pc, #452]	; (8004f44 <_GLOBAL__sub_I_REG_FIFO+0x844>)
 8004d80:	f8cd a000 	str.w	sl, [sp]
 8004d84:	4870      	ldr	r0, [pc, #448]	; (8004f48 <_GLOBAL__sub_I_REG_FIFO+0x848>)
 8004d86:	f7fe f85f 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 8004d8a:	4a70      	ldr	r2, [pc, #448]	; (8004f4c <_GLOBAL__sub_I_REG_FIFO+0x84c>)
 8004d8c:	2307      	movs	r3, #7
 8004d8e:	9203      	str	r2, [sp, #12]
 8004d90:	2204      	movs	r2, #4
 8004d92:	4e6f      	ldr	r6, [pc, #444]	; (8004f50 <_GLOBAL__sub_I_REG_FIFO+0x850>)
 8004d94:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004d98:	4622      	mov	r2, r4
};
 8004d9a:	4c6e      	ldr	r4, [pc, #440]	; (8004f54 <_GLOBAL__sub_I_REG_FIFO+0x854>)
PaDac(reg_pa_dac, 1, false, 'w', 0x04, 0x07, reserv_pa_dac, 2) //,
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	f8cd 9010 	str.w	r9, [sp, #16]
 8004da2:	9500      	str	r5, [sp, #0]
 8004da4:	4630      	mov	r0, r6
 8004da6:	496c      	ldr	r1, [pc, #432]	; (8004f58 <_GLOBAL__sub_I_REG_FIFO+0x858>)
 8004da8:	f7fe f84e 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
};
 8004dac:	46a4      	mov	ip, r4
 8004dae:	4d6b      	ldr	r5, [pc, #428]	; (8004f5c <_GLOBAL__sub_I_REG_FIFO+0x85c>)
 8004db0:	f8df b178 	ldr.w	fp, [pc, #376]	; 8004f2c <_GLOBAL__sub_I_REG_FIFO+0x82c>
 8004db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004dba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dbe:	4d68      	ldr	r5, [pc, #416]	; (8004f60 <_GLOBAL__sub_I_REG_FIFO+0x860>)
 8004dc0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dc6:	f104 0c1c 	add.w	ip, r4, #28
 8004dca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004dce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dd2:	4d64      	ldr	r5, [pc, #400]	; (8004f64 <_GLOBAL__sub_I_REG_FIFO+0x864>)
 8004dd4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dda:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 8004dde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004de2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004de6:	4d60      	ldr	r5, [pc, #384]	; (8004f68 <_GLOBAL__sub_I_REG_FIFO+0x868>)
 8004de8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dee:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8004df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004df6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dfa:	4d5c      	ldr	r5, [pc, #368]	; (8004f6c <_GLOBAL__sub_I_REG_FIFO+0x86c>)
 8004dfc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e02:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8004e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e0e:	4d58      	ldr	r5, [pc, #352]	; (8004f70 <_GLOBAL__sub_I_REG_FIFO+0x870>)
 8004e10:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e16:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
 8004e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e22:	4d54      	ldr	r5, [pc, #336]	; (8004f74 <_GLOBAL__sub_I_REG_FIFO+0x874>)
 8004e24:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e2a:	f104 0ca8 	add.w	ip, r4, #168	; 0xa8
 8004e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e36:	4d50      	ldr	r5, [pc, #320]	; (8004f78 <_GLOBAL__sub_I_REG_FIFO+0x878>)
 8004e38:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e3e:	f104 0cc4 	add.w	ip, r4, #196	; 0xc4
 8004e42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e4a:	4d4c      	ldr	r5, [pc, #304]	; (8004f7c <_GLOBAL__sub_I_REG_FIFO+0x87c>)
 8004e4c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e52:	f104 0ce0 	add.w	ip, r4, #224	; 0xe0
 8004e56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e5e:	4d48      	ldr	r5, [pc, #288]	; (8004f80 <_GLOBAL__sub_I_REG_FIFO+0x880>)
 8004e60:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e66:	f104 0cfc 	add.w	ip, r4, #252	; 0xfc
 8004e6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e72:	4d44      	ldr	r5, [pc, #272]	; (8004f84 <_GLOBAL__sub_I_REG_FIFO+0x884>)
 8004e74:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e7a:	f504 7c8c 	add.w	ip, r4, #280	; 0x118
 8004e7e:	e085      	b.n	8004f8c <_GLOBAL__sub_I_REG_FIFO+0x88c>
 8004e80:	20001fb8 	.word	0x20001fb8
 8004e84:	20001ec8 	.word	0x20001ec8
 8004e88:	20001f78 	.word	0x20001f78
 8004e8c:	20001e90 	.word	0x20001e90
 8004e90:	20002064 	.word	0x20002064
 8004e94:	20001e3c 	.word	0x20001e3c
 8004e98:	20001ff8 	.word	0x20001ff8
 8004e9c:	20001f38 	.word	0x20001f38
 8004ea0:	20001f80 	.word	0x20001f80
 8004ea4:	20001f1c 	.word	0x20001f1c
 8004ea8:	20001f90 	.word	0x20001f90
 8004eac:	20001b9c 	.word	0x20001b9c
 8004eb0:	20002084 	.word	0x20002084
 8004eb4:	20001c28 	.word	0x20001c28
 8004eb8:	20001fd0 	.word	0x20001fd0
 8004ebc:	20001b80 	.word	0x20001b80
 8004ec0:	20002044 	.word	0x20002044
 8004ec4:	20001c98 	.word	0x20001c98
 8004ec8:	20001fb0 	.word	0x20001fb0
 8004ecc:	20001e20 	.word	0x20001e20
 8004ed0:	20001fc8 	.word	0x20001fc8
 8004ed4:	20001e04 	.word	0x20001e04
 8004ed8:	200020ac 	.word	0x200020ac
 8004edc:	20001b64 	.word	0x20001b64
 8004ee0:	2000204c 	.word	0x2000204c
 8004ee4:	20001ee4 	.word	0x20001ee4
 8004ee8:	2000206c 	.word	0x2000206c
 8004eec:	20001eac 	.word	0x20001eac
 8004ef0:	20002034 	.word	0x20002034
 8004ef4:	20001e74 	.word	0x20001e74
 8004ef8:	20002024 	.word	0x20002024
 8004efc:	20001e58 	.word	0x20001e58
 8004f00:	200020a4 	.word	0x200020a4
 8004f04:	20001d40 	.word	0x20001d40
 8004f08:	20001fc0 	.word	0x20001fc0
 8004f0c:	20001b48 	.word	0x20001b48
 8004f10:	0800833c 	.word	0x0800833c
 8004f14:	20002074 	.word	0x20002074
 8004f18:	20001bb8 	.word	0x20001bb8
 8004f1c:	08008340 	.word	0x08008340
 8004f20:	2000207c 	.word	0x2000207c
 8004f24:	20001bd4 	.word	0x20001bd4
 8004f28:	20001fa8 	.word	0x20001fa8
 8004f2c:	20001f00 	.word	0x20001f00
 8004f30:	20001fd8 	.word	0x20001fd8
 8004f34:	20001bf0 	.word	0x20001bf0
 8004f38:	20001fe0 	.word	0x20001fe0
 8004f3c:	2000208c 	.word	0x2000208c
 8004f40:	20002000 	.word	0x20002000
 8004f44:	20001f88 	.word	0x20001f88
 8004f48:	20001f54 	.word	0x20001f54
 8004f4c:	0800832c 	.word	0x0800832c
 8004f50:	20001dcc 	.word	0x20001dcc
 8004f54:	20001720 	.word	0x20001720
 8004f58:	20001f70 	.word	0x20001f70
 8004f5c:	20001c44 	.word	0x20001c44
 8004f60:	20001d24 	.word	0x20001d24
 8004f64:	20001d5c 	.word	0x20001d5c
 8004f68:	20001d94 	.word	0x20001d94
 8004f6c:	20001cec 	.word	0x20001cec
 8004f70:	20001de8 	.word	0x20001de8
 8004f74:	20001d78 	.word	0x20001d78
 8004f78:	20001db0 	.word	0x20001db0
 8004f7c:	20001d08 	.word	0x20001d08
 8004f80:	20001c60 	.word	0x20001c60
 8004f84:	20001cd0 	.word	0x20001cd0
 8004f88:	20001c0c 	.word	0x20001c0c
 8004f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f94:	4d87      	ldr	r5, [pc, #540]	; (80051b4 <_GLOBAL__sub_I_REG_FIFO+0xab4>)
 8004f96:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f9c:	f504 7c9a 	add.w	ip, r4, #308	; 0x134
 8004fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fa8:	4d83      	ldr	r5, [pc, #524]	; (80051b8 <_GLOBAL__sub_I_REG_FIFO+0xab8>)
 8004faa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb0:	f504 7ca8 	add.w	ip, r4, #336	; 0x150
 8004fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fbc:	4d7f      	ldr	r5, [pc, #508]	; (80051bc <_GLOBAL__sub_I_REG_FIFO+0xabc>)
 8004fbe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fc4:	f504 7cb6 	add.w	ip, r4, #364	; 0x16c
 8004fc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fd0:	4d7b      	ldr	r5, [pc, #492]	; (80051c0 <_GLOBAL__sub_I_REG_FIFO+0xac0>)
 8004fd2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd8:	f504 7cc4 	add.w	ip, r4, #392	; 0x188
 8004fdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004fe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fe4:	4d77      	ldr	r5, [pc, #476]	; (80051c4 <_GLOBAL__sub_I_REG_FIFO+0xac4>)
 8004fe6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fec:	f504 7cd2 	add.w	ip, r4, #420	; 0x1a4
 8004ff0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ff8:	4d73      	ldr	r5, [pc, #460]	; (80051c8 <_GLOBAL__sub_I_REG_FIFO+0xac8>)
 8004ffa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005000:	f504 7ce0 	add.w	ip, r4, #448	; 0x1c0
 8005004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005008:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800500c:	4d6f      	ldr	r5, [pc, #444]	; (80051cc <_GLOBAL__sub_I_REG_FIFO+0xacc>)
 800500e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005014:	f504 7cee 	add.w	ip, r4, #476	; 0x1dc
 8005018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800501c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005020:	4d6b      	ldr	r5, [pc, #428]	; (80051d0 <_GLOBAL__sub_I_REG_FIFO+0xad0>)
 8005022:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005028:	f504 7cfc 	add.w	ip, r4, #504	; 0x1f8
 800502c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005030:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005034:	4d67      	ldr	r5, [pc, #412]	; (80051d4 <_GLOBAL__sub_I_REG_FIFO+0xad4>)
 8005036:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800503a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800503c:	f504 7c05 	add.w	ip, r4, #532	; 0x214
 8005040:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005048:	4d63      	ldr	r5, [pc, #396]	; (80051d8 <_GLOBAL__sub_I_REG_FIFO+0xad8>)
 800504a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800504e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005050:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
 8005054:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800505c:	4d5f      	ldr	r5, [pc, #380]	; (80051dc <_GLOBAL__sub_I_REG_FIFO+0xadc>)
 800505e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005064:	f504 7c13 	add.w	ip, r4, #588	; 0x24c
 8005068:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800506c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005070:	4d5b      	ldr	r5, [pc, #364]	; (80051e0 <_GLOBAL__sub_I_REG_FIFO+0xae0>)
 8005072:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005078:	f504 7c1a 	add.w	ip, r4, #616	; 0x268
 800507c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005084:	4d57      	ldr	r5, [pc, #348]	; (80051e4 <_GLOBAL__sub_I_REG_FIFO+0xae4>)
 8005086:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800508a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800508c:	f504 7c21 	add.w	ip, r4, #644	; 0x284
 8005090:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005098:	4d53      	ldr	r5, [pc, #332]	; (80051e8 <_GLOBAL__sub_I_REG_FIFO+0xae8>)
 800509a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800509e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050a0:	f504 7c28 	add.w	ip, r4, #672	; 0x2a0
 80050a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050ac:	4d4f      	ldr	r5, [pc, #316]	; (80051ec <_GLOBAL__sub_I_REG_FIFO+0xaec>)
 80050ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80050b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b4:	f504 7c2f 	add.w	ip, r4, #700	; 0x2bc
 80050b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050c0:	4d4b      	ldr	r5, [pc, #300]	; (80051f0 <_GLOBAL__sub_I_REG_FIFO+0xaf0>)
 80050c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80050c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050c8:	f504 7c36 	add.w	ip, r4, #728	; 0x2d8
 80050cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050d4:	4d47      	ldr	r5, [pc, #284]	; (80051f4 <_GLOBAL__sub_I_REG_FIFO+0xaf4>)
 80050d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80050da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050dc:	f504 7c3d 	add.w	ip, r4, #756	; 0x2f4
 80050e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050e8:	4d43      	ldr	r5, [pc, #268]	; (80051f8 <_GLOBAL__sub_I_REG_FIFO+0xaf8>)
 80050ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80050ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050f0:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 80050f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80050f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050fc:	4d3f      	ldr	r5, [pc, #252]	; (80051fc <_GLOBAL__sub_I_REG_FIFO+0xafc>)
 80050fe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005104:	f504 7c4b 	add.w	ip, r4, #812	; 0x32c
 8005108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800510c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005110:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005114:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800520c <_GLOBAL__sub_I_REG_FIFO+0xb0c>
 8005118:	f504 7552 	add.w	r5, r4, #840	; 0x348
 800511c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005122:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005126:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800512a:	4d35      	ldr	r5, [pc, #212]	; (8005200 <_GLOBAL__sub_I_REG_FIFO+0xb00>)
 800512c:	f504 7c59 	add.w	ip, r4, #868	; 0x364
 8005130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800513a:	4d32      	ldr	r5, [pc, #200]	; (8005204 <_GLOBAL__sub_I_REG_FIFO+0xb04>)
 800513c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005142:	f504 7c60 	add.w	ip, r4, #896	; 0x380
 8005146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800514a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800514e:	f504 7567 	add.w	r5, r4, #924	; 0x39c
 8005152:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005156:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800515a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800515c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8005160:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005210 <_GLOBAL__sub_I_REG_FIFO+0xb10>
 8005164:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005168:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800516c:	f504 756e 	add.w	r5, r4, #952	; 0x3b8
 8005170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005172:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8005176:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800517a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800517e:	f504 7575 	add.w	r5, r4, #980	; 0x3d4
 8005182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005184:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8005188:	4f1f      	ldr	r7, [pc, #124]	; (8005208 <_GLOBAL__sub_I_REG_FIFO+0xb08>)
 800518a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800518e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005190:	f504 757c 	add.w	r5, r4, #1008	; 0x3f0
 8005194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005196:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800519a:	f204 440c 	addw	r4, r4, #1036	; 0x40c
 800519e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80051a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80051a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051a6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80051aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80051ae:	b007      	add	sp, #28
 80051b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b4:	20001c7c 	.word	0x20001c7c
 80051b8:	20001cb4 	.word	0x20001cb4
 80051bc:	20001ec8 	.word	0x20001ec8
 80051c0:	20001e90 	.word	0x20001e90
 80051c4:	20001e3c 	.word	0x20001e3c
 80051c8:	20001f38 	.word	0x20001f38
 80051cc:	20001f1c 	.word	0x20001f1c
 80051d0:	20001b9c 	.word	0x20001b9c
 80051d4:	20001c28 	.word	0x20001c28
 80051d8:	20001b80 	.word	0x20001b80
 80051dc:	20001c98 	.word	0x20001c98
 80051e0:	20001e20 	.word	0x20001e20
 80051e4:	20001e04 	.word	0x20001e04
 80051e8:	20001b64 	.word	0x20001b64
 80051ec:	20001ee4 	.word	0x20001ee4
 80051f0:	20001eac 	.word	0x20001eac
 80051f4:	20001e74 	.word	0x20001e74
 80051f8:	20001e58 	.word	0x20001e58
 80051fc:	20001d40 	.word	0x20001d40
 8005200:	20001bb8 	.word	0x20001bb8
 8005204:	20001bd4 	.word	0x20001bd4
 8005208:	20001f54 	.word	0x20001f54
 800520c:	20001b48 	.word	0x20001b48
 8005210:	20001bf0 	.word	0x20001bf0

08005214 <_ZN15Packet_analyzer11set_settingEh>:
    // return field_header_[num_number]->set_value(num, &(packet[0]));
}

bool Packet_analyzer::set_setting(uint8_t setting) {
    return false; // настройки индивидуальны, у общего класса их нет
}
 8005214:	2000      	movs	r0, #0
 8005216:	4770      	bx	lr

08005218 <_ZN13Packet_Sensor11set_settingEh>:
// ----- ----- ----- ----- -----  Packet_Sensor  ----- ----- ----- ----- -----
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

bool Packet_Sensor::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 8005218:	7401      	strb	r1, [r0, #16]
    return false;
}
 800521a:	2000      	movs	r0, #0
 800521c:	4770      	bx	lr

0800521e <_ZN13Packet_Device11set_settingEh>:
//   ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----


bool Packet_Device::set_setting(uint8_t setting) {
    // if по типам
    setting_ = setting;
 800521e:	7401      	strb	r1, [r0, #16]
    return false;
}
 8005220:	2000      	movs	r0, #0
 8005222:	4770      	bx	lr

08005224 <_ZN13Packet_System11set_settingEh>:


bool Packet_System::set_setting(uint8_t setting) {
    // if по типам
    return true; // не реализованы
}
 8005224:	2001      	movs	r0, #1
 8005226:	4770      	bx	lr

08005228 <_ZN12LoRa_addressC1EPKhh>:
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	8003      	strh	r3, [r0, #0]
 8005232:	8043      	strh	r3, [r0, #2]
	group = field_dest_adr_group.get_value(bytes, len);
 8005234:	4806      	ldr	r0, [pc, #24]	; (8005250 <_ZN12LoRa_addressC1EPKhh+0x28>)
LoRa_address::LoRa_address(const uint8_t* bytes, const uint8_t len) {
 8005236:	460d      	mov	r5, r1
 8005238:	4616      	mov	r6, r2
	group = field_dest_adr_group.get_value(bytes, len);
 800523a:	f7fd fe18 	bl	8002e6e <_ZNK13Address_field9get_valueEPKhi>
	branch = field_dest_adr_branch.get_value(bytes, len);
 800523e:	4632      	mov	r2, r6
	group = field_dest_adr_group.get_value(bytes, len);
 8005240:	8020      	strh	r0, [r4, #0]
	branch = field_dest_adr_branch.get_value(bytes, len);
 8005242:	4629      	mov	r1, r5
 8005244:	4803      	ldr	r0, [pc, #12]	; (8005254 <_ZN12LoRa_addressC1EPKhh+0x2c>)
 8005246:	f7fd fe12 	bl	8002e6e <_ZNK13Address_field9get_valueEPKhi>
 800524a:	8060      	strh	r0, [r4, #2]
}
 800524c:	4620      	mov	r0, r4
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	200021c4 	.word	0x200021c4
 8005254:	200021fc 	.word	0x200021fc

08005258 <_ZN12LoRa_addressC1Ett>:
LoRa_address::LoRa_address(const uint16_t group, const uint16_t branch):group(group),branch(branch){}
 8005258:	8001      	strh	r1, [r0, #0]
 800525a:	8042      	strh	r2, [r0, #2]
 800525c:	4770      	bx	lr

0800525e <_ZN12LoRa_addressC1Em>:
LoRa_address::LoRa_address(const uint32_t adr):group((uint16_t)(adr >> 16)),branch((uint16_t)(adr)){}
 800525e:	0c0a      	lsrs	r2, r1, #16
 8005260:	8002      	strh	r2, [r0, #0]
 8005262:	8041      	strh	r1, [r0, #2]
 8005264:	4770      	bx	lr

08005266 <_ZN12LoRa_address6globalEv>:
    return ((group == LORA_GLOBAL_ADR_GROUP) && (branch == LORA_GLOBAL_ADR_BRANCH));
 8005266:	f240 13ff 	movw	r3, #511	; 0x1ff
 800526a:	8802      	ldrh	r2, [r0, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d106      	bne.n	800527e <_ZN12LoRa_address6globalEv+0x18>
 8005270:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005274:	8840      	ldrh	r0, [r0, #2]
 8005276:	1ac3      	subs	r3, r0, r3
 8005278:	4258      	negs	r0, r3
 800527a:	4158      	adcs	r0, r3
 800527c:	4770      	bx	lr
 800527e:	2000      	movs	r0, #0
}
 8005280:	4770      	bx	lr

08005282 <_ZneRK12LoRa_addressS1_>:
    return ((left.group != right.group) || (left.branch != right.branch));
 8005282:	8802      	ldrh	r2, [r0, #0]
 8005284:	880b      	ldrh	r3, [r1, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d105      	bne.n	8005296 <_ZneRK12LoRa_addressS1_+0x14>
 800528a:	8840      	ldrh	r0, [r0, #2]
 800528c:	884b      	ldrh	r3, [r1, #2]
 800528e:	1ac0      	subs	r0, r0, r3
 8005290:	bf18      	it	ne
 8005292:	2001      	movne	r0, #1
 8005294:	4770      	bx	lr
 8005296:	2001      	movs	r0, #1
}
 8005298:	4770      	bx	lr
	...

0800529c <_ZN15Packet_analyzerC1Ev>:
Packet_analyzer::Packet_analyzer() {
 800529c:	4a05      	ldr	r2, [pc, #20]	; (80052b4 <_ZN15Packet_analyzerC1Ev+0x18>)
    field_header_ = field_packet_header;
 800529e:	4906      	ldr	r1, [pc, #24]	; (80052b8 <_ZN15Packet_analyzerC1Ev+0x1c>)
Packet_analyzer::Packet_analyzer() {
 80052a0:	6002      	str	r2, [r0, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	e9c0 2205 	strd	r2, r2, [r0, #20]
    field_packet_ = nullptr;
 80052a8:	e9c0 1201 	strd	r1, r2, [r0, #4]
    amt_field_header_ = count_field_packet_header;
 80052ac:	2206      	movs	r2, #6
 80052ae:	60c2      	str	r2, [r0, #12]
}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	080083a4 	.word	0x080083a4
 80052b8:	20000028 	.word	0x20000028

080052bc <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_group(const LoRa_packet& packet) {
 80052bc:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_group]->get_value(packet);
 80052be:	6843      	ldr	r3, [r0, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	f7fd fe62 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80052c8:	b280      	uxth	r0, r0
 80052ca:	bd08      	pop	{r3, pc}

080052cc <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_dest_adr_branch(const LoRa_packet& packet) {
 80052cc:	b508      	push	{r3, lr}
    return field_header_[num_dest_adr_branch]->get_value(packet);
 80052ce:	6843      	ldr	r3, [r0, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	6858      	ldr	r0, [r3, #4]
 80052d4:	f7fd fe5a 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 80052d8:	b280      	uxth	r0, r0
 80052da:	bd08      	pop	{r3, pc}

080052dc <_ZN15Packet_analyzer12get_dest_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_dest_adr(const LoRa_packet& packet) {
 80052dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052de:	4605      	mov	r5, r0
 80052e0:	460e      	mov	r6, r1
    return {get_dest_adr_group(packet), get_dest_adr_branch(packet)};
 80052e2:	f7ff ffeb 	bl	80052bc <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
 80052e6:	4631      	mov	r1, r6
 80052e8:	4604      	mov	r4, r0
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7ff ffee 	bl	80052cc <_ZN15Packet_analyzer19get_dest_adr_branchERK11LoRa_packet>
}
 80052f0:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 80052f4:	b002      	add	sp, #8
 80052f6:	bd70      	pop	{r4, r5, r6, pc}

080052f8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_group(const LoRa_packet& packet) {
 80052f8:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_group]->get_value(packet);
 80052fa:	6843      	ldr	r3, [r0, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	6898      	ldr	r0, [r3, #8]
 8005300:	f7fd fe44 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005304:	b280      	uxth	r0, r0
 8005306:	bd08      	pop	{r3, pc}

08005308 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>:
uint16_t Packet_analyzer::get_sour_adr_branch(const LoRa_packet& packet) {
 8005308:	b508      	push	{r3, lr}
    return field_header_[num_sour_adr_branch]->get_value(packet);
 800530a:	6843      	ldr	r3, [r0, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	68d8      	ldr	r0, [r3, #12]
 8005310:	f7fd fe3c 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 8005314:	b280      	uxth	r0, r0
 8005316:	bd08      	pop	{r3, pc}

08005318 <_ZN15Packet_analyzer12get_sour_adrERK11LoRa_packet>:
LoRa_address Packet_analyzer::get_sour_adr(const LoRa_packet& packet) {
 8005318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800531a:	4605      	mov	r5, r0
 800531c:	460e      	mov	r6, r1
    return {get_sour_adr_group(packet), get_sour_adr_branch(packet)};
 800531e:	f7ff ffeb 	bl	80052f8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
 8005322:	4631      	mov	r1, r6
 8005324:	4604      	mov	r4, r0
 8005326:	4628      	mov	r0, r5
 8005328:	f7ff ffee 	bl	8005308 <_ZN15Packet_analyzer19get_sour_adr_branchERK11LoRa_packet>
}
 800532c:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
 8005330:	b002      	add	sp, #8
 8005332:	bd70      	pop	{r4, r5, r6, pc}

08005334 <_ZN15Packet_analyzer15get_packet_typeERK11LoRa_packet>:
    return (Packet_Type)field_header_[num_type]->get_value(packet);
 8005334:	6843      	ldr	r3, [r0, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	6918      	ldr	r0, [r3, #16]
 800533a:	f7fd be27 	b.w	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>

0800533e <_ZN15Packet_analyzer17get_packet_numberERK11LoRa_packet>:
uint16_t Packet_analyzer::get_packet_number(const LoRa_packet& packet) {
 800533e:	b508      	push	{r3, lr}
    return field_header_[num_number]->get_value(packet);
 8005340:	6843      	ldr	r3, [r0, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	6958      	ldr	r0, [r3, #20]
 8005346:	f7fd fe21 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
}
 800534a:	b280      	uxth	r0, r0
 800534c:	bd08      	pop	{r3, pc}

0800534e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 800534e:	b410      	push	{r4}
 8005350:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005352:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_group(LoRa_packet& packet, uint16_t adr) {
 8005354:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 8005356:	2300      	movs	r3, #0
 8005358:	4622      	mov	r2, r4
 800535a:	6800      	ldr	r0, [r0, #0]
}
 800535c:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_group]->set_value(adr, packet);
 800535e:	f7fd be61 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005362 <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005362:	b410      	push	{r4}
 8005364:	460c      	mov	r4, r1
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005366:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_dest_adr_branch(LoRa_packet& packet, uint16_t adr) {
 8005368:	4611      	mov	r1, r2
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 800536a:	2300      	movs	r3, #0
 800536c:	4622      	mov	r2, r4
 800536e:	6840      	ldr	r0, [r0, #4]
}
 8005370:	bc10      	pop	{r4}
    return field_header_[num_dest_adr_branch]->set_value(adr, packet);
 8005372:	f7fd be57 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

08005376 <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_dest_adr(LoRa_packet& packet, LoRa_address adr) {
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005378:	4605      	mov	r5, r0
 800537a:	460e      	mov	r6, r1
 800537c:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_dest_adr_group(packet);
 800537e:	f7ff ff9d 	bl	80052bc <_ZN15Packet_analyzer18get_dest_adr_groupERK11LoRa_packet>
    if(set_dest_adr_group(packet, adr.group))
 8005382:	4631      	mov	r1, r6
    uint16_t buffer = get_dest_adr_group(packet);
 8005384:	4607      	mov	r7, r0
    if(set_dest_adr_group(packet, adr.group))
 8005386:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800538a:	4628      	mov	r0, r5
 800538c:	f7ff ffdf 	bl	800534e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
 8005390:	4604      	mov	r4, r0
 8005392:	b960      	cbnz	r0, 80053ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_dest_adr_branch(packet, adr.branch)) {
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800539c:	f7ff ffe1 	bl	8005362 <_ZN15Packet_analyzer19set_dest_adr_branchER11LoRa_packett>
 80053a0:	4604      	mov	r4, r0
 80053a2:	b120      	cbz	r0, 80053ae <_ZN15Packet_analyzer12set_dest_adrER11LoRa_packet12LoRa_address+0x38>
        set_dest_adr_group(packet, buffer);
 80053a4:	463a      	mov	r2, r7
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff ffd0 	bl	800534e <_ZN15Packet_analyzer18set_dest_adr_groupER11LoRa_packett>
}
 80053ae:	4620      	mov	r0, r4
 80053b0:	b003      	add	sp, #12
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053b4 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 80053b4:	b410      	push	{r4}
 80053b6:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 80053b8:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_group(LoRa_packet& packet, uint16_t adr) {
 80053ba:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 80053bc:	2300      	movs	r3, #0
 80053be:	4622      	mov	r2, r4
 80053c0:	6880      	ldr	r0, [r0, #8]
}
 80053c2:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_group]->set_value(adr, packet);
 80053c4:	f7fd be2e 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

080053c8 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>:
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 80053c8:	b410      	push	{r4}
 80053ca:	460c      	mov	r4, r1
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80053cc:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_sour_adr_branch(LoRa_packet& packet, uint16_t adr) {
 80053ce:	4611      	mov	r1, r2
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80053d0:	2300      	movs	r3, #0
 80053d2:	4622      	mov	r2, r4
 80053d4:	68c0      	ldr	r0, [r0, #12]
}
 80053d6:	bc10      	pop	{r4}
    return field_header_[num_sour_adr_branch]->set_value(adr, packet);
 80053d8:	f7fd be24 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

080053dc <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address>:
bool Packet_analyzer::set_sour_adr(LoRa_packet& packet, LoRa_address adr) {
 80053dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053de:	4605      	mov	r5, r0
 80053e0:	460e      	mov	r6, r1
 80053e2:	9201      	str	r2, [sp, #4]
    uint16_t buffer = get_sour_adr_group(packet);
 80053e4:	f7ff ff88 	bl	80052f8 <_ZN15Packet_analyzer18get_sour_adr_groupERK11LoRa_packet>
    if(set_sour_adr_group(packet, adr.group))
 80053e8:	4631      	mov	r1, r6
    uint16_t buffer = get_sour_adr_group(packet);
 80053ea:	4607      	mov	r7, r0
    if(set_sour_adr_group(packet, adr.group))
 80053ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80053f0:	4628      	mov	r0, r5
 80053f2:	f7ff ffdf 	bl	80053b4 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
 80053f6:	4604      	mov	r4, r0
 80053f8:	b960      	cbnz	r0, 8005414 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
    if(set_sour_adr_branch(packet, adr.branch)) {
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005402:	f7ff ffe1 	bl	80053c8 <_ZN15Packet_analyzer19set_sour_adr_branchER11LoRa_packett>
 8005406:	4604      	mov	r4, r0
 8005408:	b120      	cbz	r0, 8005414 <_ZN15Packet_analyzer12set_sour_adrER11LoRa_packet12LoRa_address+0x38>
        set_sour_adr_group(packet, buffer);
 800540a:	463a      	mov	r2, r7
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	f7ff ffd0 	bl	80053b4 <_ZN15Packet_analyzer18set_sour_adr_groupER11LoRa_packett>
}
 8005414:	4620      	mov	r0, r4
 8005416:	b003      	add	sp, #12
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800541a <_ZN15Packet_analyzer15set_packet_typeER11LoRa_packet11Packet_Type>:
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 800541a:	b410      	push	{r4}
 800541c:	460c      	mov	r4, r1
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 800541e:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_type(LoRa_packet& packet, Packet_Type pac_type) {
 8005420:	4611      	mov	r1, r2
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 8005422:	2300      	movs	r3, #0
 8005424:	4622      	mov	r2, r4
 8005426:	6900      	ldr	r0, [r0, #16]
}
 8005428:	bc10      	pop	{r4}
    return  field_header_[num_type]->set_value((uint32_t)pac_type, packet);
 800542a:	f7fd bdfb 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>

0800542e <_ZN15Packet_analyzer17set_packet_numberER11LoRa_packett>:
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 800542e:	b410      	push	{r4}
 8005430:	460c      	mov	r4, r1
    return field_header_[num_number]->set_value(num, packet);
 8005432:	6840      	ldr	r0, [r0, #4]
bool Packet_analyzer::set_packet_number(LoRa_packet& packet, uint16_t num) {
 8005434:	4611      	mov	r1, r2
    return field_header_[num_number]->set_value(num, packet);
 8005436:	2300      	movs	r3, #0
 8005438:	4622      	mov	r2, r4
 800543a:	6940      	ldr	r0, [r0, #20]
}
 800543c:	bc10      	pop	{r4}
    return field_header_[num_number]->set_value(num, packet);
 800543e:	f7fd bdf1 	b.w	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
	...

08005444 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>:
    if (!(com < CONNECT_COMMAND_DATA))
 8005444:	2a0c      	cmp	r2, #12
uint8_t Packet_Connection::set_command(LoRa_packet& packet, uint8_t com) {
 8005446:	b510      	push	{r4, lr}
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
    if (!(com < CONNECT_COMMAND_DATA))
 800544e:	d80b      	bhi.n	8005468 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x24>
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005450:	2309      	movs	r3, #9
    command_ = com;
 8005452:	7722      	strb	r2, [r4, #28]
    last_filled_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005454:	6163      	str	r3, [r4, #20]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005456:	4602      	mov	r2, r0
 8005458:	4805      	ldr	r0, [pc, #20]	; (8005470 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x2c>)
 800545a:	f7fd fde3 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    if (error)
 800545e:	b928      	cbnz	r0, 800546c <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x28>
    ++last_filled_byte;
 8005460:	6963      	ldr	r3, [r4, #20]
 8005462:	3301      	adds	r3, #1
 8005464:	6163      	str	r3, [r4, #20]
}
 8005466:	bd10      	pop	{r4, pc}
        return 1;
 8005468:	2001      	movs	r0, #1
 800546a:	e7fc      	b.n	8005466 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
        return 2;
 800546c:	2002      	movs	r0, #2
 800546e:	e7fa      	b.n	8005466 <_ZN17Packet_Connection11set_commandER11LoRa_packeth+0x22>
 8005470:	200020dc 	.word	0x200020dc

08005474 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>:
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 8005478:	2209      	movs	r2, #9
uint8_t Packet_Connection::get_command(const LoRa_packet& packet, uint8_t *com) {
 800547a:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE; // Команда всегда находится сразу после шапки
 800547c:	6182      	str	r2, [r0, #24]
    if(com == nullptr)
 800547e:	b18d      	cbz	r5, 80054a4 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x30>
    command_ = field_byte.get_value(packet, last_read_byte);
 8005480:	4809      	ldr	r0, [pc, #36]	; (80054a8 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x34>)
 8005482:	f7fd fd83 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005486:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005488:	b2c0      	uxtb	r0, r0
    if (!(command_ < CONNECT_COMMAND_DATA)) {
 800548a:	280c      	cmp	r0, #12
    ++last_read_byte;
 800548c:	f103 0301 	add.w	r3, r3, #1
 8005490:	61a3      	str	r3, [r4, #24]
        command_ = 0xFF;
 8005492:	bf88      	it	hi
 8005494:	23ff      	movhi	r3, #255	; 0xff
    command_ = field_byte.get_value(packet, last_read_byte);
 8005496:	7720      	strb	r0, [r4, #28]
    *com = command_;
 8005498:	bf95      	itete	ls
 800549a:	7028      	strbls	r0, [r5, #0]
        return 2;
 800549c:	2002      	movhi	r0, #2
    return 0;
 800549e:	2000      	movls	r0, #0
        command_ = 0xFF;
 80054a0:	7723      	strbhi	r3, [r4, #28]
}
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80054a4:	2001      	movs	r0, #1
 80054a6:	e7fc      	b.n	80054a2 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh+0x2e>
 80054a8:	200020dc 	.word	0x200020dc

080054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>:
    size_data = 0;
 80054ac:	2000      	movs	r0, #0
uint8_t Packet_Connection::get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data) {
 80054ae:	b510      	push	{r4, lr}
    size_data = 0;
 80054b0:	7018      	strb	r0, [r3, #0]
    if (!(*com < CONNECT_COMMAND_DATA)) {
 80054b2:	7809      	ldrb	r1, [r1, #0]
 80054b4:	290c      	cmp	r1, #12
 80054b6:	d81c      	bhi.n	80054f2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x46>
    if (connect_com_data[*com] != 0xFF) {
 80054b8:	4c11      	ldr	r4, [pc, #68]	; (8005500 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x54>)
 80054ba:	5c64      	ldrb	r4, [r4, r1]
 80054bc:	2cff      	cmp	r4, #255	; 0xff
 80054be:	d001      	beq.n	80054c4 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x18>
        size_data = connect_com_data[*com];
 80054c0:	701c      	strb	r4, [r3, #0]
}
 80054c2:	bd10      	pop	{r4, pc}
        if(len == nullptr)
 80054c4:	b1ba      	cbz	r2, 80054f6 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4a>
        switch (*com)
 80054c6:	3901      	subs	r1, #1
 80054c8:	290b      	cmp	r1, #11
 80054ca:	d807      	bhi.n	80054dc <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x30>
 80054cc:	e8df f001 	tbb	[pc, r1]
 80054d0:	06060608 	.word	0x06060608
 80054d4:	06060f06 	.word	0x06060f06
 80054d8:	0f060d0d 	.word	0x0f060d0d
        if(len == nullptr)
 80054dc:	2004      	movs	r0, #4
 80054de:	e7f0      	b.n	80054c2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            if ((*len != 1) && (*len != 2))
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	1e51      	subs	r1, r2, #1
 80054e4:	2901      	cmp	r1, #1
 80054e6:	d808      	bhi.n	80054fa <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x4e>
            size_data = *len;
 80054e8:	701a      	strb	r2, [r3, #0]
    return 0;
 80054ea:	2000      	movs	r0, #0
            break;
 80054ec:	e7e9      	b.n	80054c2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            size_data = *len;
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	e7fa      	b.n	80054e8 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x3c>
        return 1;
 80054f2:	2001      	movs	r0, #1
 80054f4:	e7e5      	b.n	80054c2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
            return 2;
 80054f6:	2002      	movs	r0, #2
 80054f8:	e7e3      	b.n	80054c2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
                return 3;
 80054fa:	2003      	movs	r0, #3
 80054fc:	e7e1      	b.n	80054c2 <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh+0x16>
 80054fe:	bf00      	nop
 8005500:	08008355 	.word	0x08008355

08005504 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>:
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005508:	b085      	sub	sp, #20
 800550a:	f88d 3007 	strb.w	r3, [sp, #7]
 800550e:	460f      	mov	r7, r1
 8005510:	4690      	mov	r8, r2
    error = get_size_by_data(&command_, &len, len_data);
 8005512:	f10d 030f 	add.w	r3, sp, #15
 8005516:	f10d 0207 	add.w	r2, sp, #7
 800551a:	f100 011c 	add.w	r1, r0, #28
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 800551e:	4604      	mov	r4, r0
    error = get_size_by_data(&command_, &len, len_data);
 8005520:	f7ff ffc4 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error)
 8005524:	4605      	mov	r5, r0
 8005526:	2800      	cmp	r0, #0
 8005528:	d145      	bne.n	80055b6 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 800552a:	7f23      	ldrb	r3, [r4, #28]
 800552c:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc0>)
 800552e:	5cd2      	ldrb	r2, [r2, r3]
 8005530:	2aff      	cmp	r2, #255	; 0xff
 8005532:	d013      	beq.n	800555c <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x58>
uint8_t Packet_Connection::set_data(LoRa_packet& packet, uint8_t *data, uint8_t len) {
 8005534:	2600      	movs	r6, #0
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005536:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80055c8 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>
    for (int i = 0; i < len_data; ++i) {
 800553a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800553e:	42b3      	cmp	r3, r6
 8005540:	dd39      	ble.n	80055b6 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005542:	7d23      	ldrb	r3, [r4, #20]
 8005544:	463a      	mov	r2, r7
 8005546:	4648      	mov	r0, r9
 8005548:	f818 1006 	ldrb.w	r1, [r8, r6]
 800554c:	f7fd fd6a 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	3301      	adds	r3, #1
 8005554:	6163      	str	r3, [r4, #20]
        if (error)
 8005556:	bb90      	cbnz	r0, 80055be <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xba>
    for (int i = 0; i < len_data; ++i) {
 8005558:	3601      	adds	r6, #1
 800555a:	e7ee      	b.n	800553a <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x36>
        switch (command_) {
 800555c:	3b01      	subs	r3, #1
 800555e:	2b0b      	cmp	r3, #11
 8005560:	d828      	bhi.n	80055b4 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb0>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x64>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005535 	.word	0x08005535
 800556c:	080055b5 	.word	0x080055b5
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055b5 	.word	0x080055b5
 800557c:	08005599 	.word	0x08005599
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055b5 	.word	0x080055b5
 8005588:	08005535 	.word	0x08005535
 800558c:	08005535 	.word	0x08005535
 8005590:	080055b5 	.word	0x080055b5
 8005594:	08005599 	.word	0x08005599
            error = field_byte.set_value(len, packet, last_filled_byte);
 8005598:	7d23      	ldrb	r3, [r4, #20]
 800559a:	463a      	mov	r2, r7
 800559c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80055a0:	4809      	ldr	r0, [pc, #36]	; (80055c8 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xc4>)
 80055a2:	f7fd fd3f 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 80055a6:	6963      	ldr	r3, [r4, #20]
 80055a8:	3301      	adds	r3, #1
 80055aa:	6163      	str	r3, [r4, #20]
            if (error)
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0c1      	beq.n	8005534 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0x30>
                return 4;
 80055b0:	2504      	movs	r5, #4
 80055b2:	e000      	b.n	80055b6 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
    if (connect_com_data[command_] == 0xFF) {
 80055b4:	2506      	movs	r5, #6
}
 80055b6:	4628      	mov	r0, r5
 80055b8:	b005      	add	sp, #20
 80055ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 8;
 80055be:	2508      	movs	r5, #8
 80055c0:	e7f9      	b.n	80055b6 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh+0xb2>
 80055c2:	bf00      	nop
 80055c4:	08008355 	.word	0x08008355
 80055c8:	200020dc 	.word	0x200020dc

080055cc <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_>:
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_command(packet, *com);
 80055d0:	7812      	ldrb	r2, [r2, #0]
uint8_t Packet_Connection::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 80055d2:	4604      	mov	r4, r0
 80055d4:	460d      	mov	r5, r1
 80055d6:	461e      	mov	r6, r3
 80055d8:	9f06      	ldr	r7, [sp, #24]
    error = set_command(packet, *com);
 80055da:	f7ff ff33 	bl	8005444 <_ZN17Packet_Connection11set_commandER11LoRa_packeth>
    if(error)
 80055de:	b938      	cbnz	r0, 80055f0 <_ZN17Packet_Connection15set_packet_dataER11LoRa_packetPhS2_S2_+0x24>
    error = set_data(packet, data, *len);
 80055e0:	4632      	mov	r2, r6
 80055e2:	4629      	mov	r1, r5
 80055e4:	4620      	mov	r0, r4
 80055e6:	783b      	ldrb	r3, [r7, #0]
}
 80055e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = set_data(packet, data, *len);
 80055ec:	f7ff bf8a 	b.w	8005504 <_ZN17Packet_Connection8set_dataER11LoRa_packetPhh>
}
 80055f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055f4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>:
uint8_t Packet_Connection::get_data(const LoRa_packet& packet, uint8_t *data, uint8_t *len) {
 80055f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055f8:	4604      	mov	r4, r0
 80055fa:	460f      	mov	r7, r1
 80055fc:	4690      	mov	r8, r2
    if(len == nullptr)
 80055fe:	461e      	mov	r6, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d06c      	beq.n	80056de <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xea>
    error = get_size_by_data(&command_, nullptr, len_data);
 8005604:	f100 091c 	add.w	r9, r0, #28
 8005608:	2200      	movs	r2, #0
 800560a:	4649      	mov	r1, r9
 800560c:	f10d 0307 	add.w	r3, sp, #7
 8005610:	f7ff ff4c 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 8005614:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, len_data);
 8005616:	4605      	mov	r5, r0
    if(error == 2) {
 8005618:	d125      	bne.n	8005666 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x72>
        if(command_ == 0x01) {
 800561a:	7f23      	ldrb	r3, [r4, #28]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d109      	bne.n	8005634 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x40>
            error = get_size_by_data(&command_, len, len_data);
 8005620:	4632      	mov	r2, r6
 8005622:	4649      	mov	r1, r9
 8005624:	4620      	mov	r0, r4
 8005626:	f10d 0307 	add.w	r3, sp, #7
 800562a:	f7ff ff3f 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
 800562e:	4605      	mov	r5, r0
    if(error)
 8005630:	b35d      	cbz	r5, 800568a <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x96>
 8005632:	e036      	b.n	80056a2 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
            *len = field_byte.get_value(packet, last_read_byte);
 8005634:	4639      	mov	r1, r7
 8005636:	7e22      	ldrb	r2, [r4, #24]
 8005638:	482a      	ldr	r0, [pc, #168]	; (80056e4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
 800563a:	f7fd fca7 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 800563e:	7030      	strb	r0, [r6, #0]
            ++last_read_byte;
 8005640:	69a3      	ldr	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005642:	4632      	mov	r2, r6
            ++last_read_byte;
 8005644:	3301      	adds	r3, #1
 8005646:	61a3      	str	r3, [r4, #24]
            error = get_size_by_data(&command_, len, len_data);
 8005648:	4649      	mov	r1, r9
 800564a:	f10d 0307 	add.w	r3, sp, #7
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff ff2c 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
            if (command_ == 0x06) {
 8005654:	7f23      	ldrb	r3, [r4, #28]
            error = get_size_by_data(&command_, len, len_data);
 8005656:	4605      	mov	r5, r0
            if (command_ == 0x06) {
 8005658:	2b06      	cmp	r3, #6
 800565a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800565e:	d100      	bne.n	8005662 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
                *len = len_data/2;
 8005660:	085b      	lsrs	r3, r3, #1
        *len = len_data;
 8005662:	7033      	strb	r3, [r6, #0]
 8005664:	e7e4      	b.n	8005630 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x3c>
    else if(error == 3) {
 8005666:	2803      	cmp	r0, #3
 8005668:	d11f      	bne.n	80056aa <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xb6>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 800566a:	4638      	mov	r0, r7
 800566c:	f7fe fd05 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8005670:	69a3      	ldr	r3, [r4, #24]
 8005672:	1ac0      	subs	r0, r0, r3
 8005674:	2801      	cmp	r0, #1
 8005676:	d10d      	bne.n	8005694 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xa0>
            len_data = packet.get_len() - last_read_byte;
 8005678:	4638      	mov	r0, r7
 800567a:	f7fe fcfe 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 800567e:	69a3      	ldr	r3, [r4, #24]
 8005680:	1ac0      	subs	r0, r0, r3
 8005682:	b2c0      	uxtb	r0, r0
 8005684:	f88d 0007 	strb.w	r0, [sp, #7]
            *len = len_data;
 8005688:	7030      	strb	r0, [r6, #0]
    if(len_data > 0) {
 800568a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800568e:	b97b      	cbnz	r3, 80056b0 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xbc>
    return 0;
 8005690:	2500      	movs	r5, #0
 8005692:	e006      	b.n	80056a2 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005694:	4638      	mov	r0, r7
 8005696:	f7fe fcf0 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 800569a:	69a3      	ldr	r3, [r4, #24]
 800569c:	1ac0      	subs	r0, r0, r3
 800569e:	2802      	cmp	r0, #2
 80056a0:	d0ea      	beq.n	8005678 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x84>
}
 80056a2:	4628      	mov	r0, r5
 80056a4:	b003      	add	sp, #12
 80056a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *len = len_data;
 80056aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056ae:	e7d8      	b.n	8005662 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x6e>
        if(data == nullptr)
 80056b0:	f1b8 0f00 	cmp.w	r8, #0
 80056b4:	d011      	beq.n	80056da <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xe6>
        for (int i = 0; i < len_data; ++i) {
 80056b6:	2500      	movs	r5, #0
            data[i] = field_byte.get_value(packet, last_read_byte);
 80056b8:	4e0a      	ldr	r6, [pc, #40]	; (80056e4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xf0>)
        for (int i = 0; i < len_data; ++i) {
 80056ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80056be:	42ab      	cmp	r3, r5
 80056c0:	dde6      	ble.n	8005690 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0x9c>
            data[i] = field_byte.get_value(packet, last_read_byte);
 80056c2:	4639      	mov	r1, r7
 80056c4:	4630      	mov	r0, r6
 80056c6:	7e22      	ldrb	r2, [r4, #24]
 80056c8:	f7fd fc60 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80056cc:	f808 0005 	strb.w	r0, [r8, r5]
            ++last_read_byte;
 80056d0:	69a3      	ldr	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 80056d2:	3501      	adds	r5, #1
            ++last_read_byte;
 80056d4:	3301      	adds	r3, #1
 80056d6:	61a3      	str	r3, [r4, #24]
        for (int i = 0; i < len_data; ++i) {
 80056d8:	e7ef      	b.n	80056ba <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xc6>
            return 6;
 80056da:	2506      	movs	r5, #6
 80056dc:	e7e1      	b.n	80056a2 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
        return 1;
 80056de:	2501      	movs	r5, #1
 80056e0:	e7df      	b.n	80056a2 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_+0xae>
 80056e2:	bf00      	nop
 80056e4:	200020dc 	.word	0x200020dc

080056e8 <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_>:
uint8_t Packet_Connection::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 80056e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ec:	9f06      	ldr	r7, [sp, #24]
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	461e      	mov	r6, r3
    error = get_command(packet, com);
 80056f4:	f7ff febe 	bl	8005474 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 80056f8:	b938      	cbnz	r0, 800570a <_ZN17Packet_Connection15get_packet_dataERK11LoRa_packetPhS3_S3_+0x22>
    error = get_data(packet, data, len);
 80056fa:	463b      	mov	r3, r7
 80056fc:	4632      	mov	r2, r6
 80056fe:	4629      	mov	r1, r5
 8005700:	4620      	mov	r0, r4
}
 8005702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = get_data(packet, data, len);
 8005706:	f7ff bf75 	b.w	80055f4 <_ZN17Packet_Connection8get_dataERK11LoRa_packetPhS3_>
}
 800570a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005710 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh>:
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    error = get_command(packet, &command_);
 8005714:	f100 081c 	add.w	r8, r0, #28
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005718:	4617      	mov	r7, r2
    error = get_command(packet, &command_);
 800571a:	4642      	mov	r2, r8
uint8_t Packet_Connection::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 800571c:	4605      	mov	r5, r0
 800571e:	460e      	mov	r6, r1
    error = get_command(packet, &command_);
 8005720:	f7ff fea8 	bl	8005474 <_ZN17Packet_Connection11get_commandERK11LoRa_packetPh>
    if(error)
 8005724:	4602      	mov	r2, r0
 8005726:	bba0      	cbnz	r0, 8005792 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x82>
    error = get_size_by_data(&command_, nullptr, size_data);
 8005728:	463b      	mov	r3, r7
 800572a:	4641      	mov	r1, r8
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff febd 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
    if(error == 2) {
 8005732:	2802      	cmp	r0, #2
    error = get_size_by_data(&command_, nullptr, size_data);
 8005734:	4604      	mov	r4, r0
    if(error == 2) {
 8005736:	d110      	bne.n	800575a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x4a>
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005738:	4631      	mov	r1, r6
 800573a:	7e2a      	ldrb	r2, [r5, #24]
 800573c:	4816      	ldr	r0, [pc, #88]	; (8005798 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x88>)
 800573e:	f7fd fc25 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
        error = get_size_by_data(&command_, &len, size_data);
 8005742:	463b      	mov	r3, r7
        uint8_t len = field_byte.get_value(packet, last_read_byte);
 8005744:	f88d 0007 	strb.w	r0, [sp, #7]
        error = get_size_by_data(&command_, &len, size_data);
 8005748:	4641      	mov	r1, r8
 800574a:	4628      	mov	r0, r5
 800574c:	f10d 0207 	add.w	r2, sp, #7
 8005750:	f7ff feac 	bl	80054ac <_ZN17Packet_Connection16get_size_by_dataEPKhS1_Rh>
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005754:	230a      	movs	r3, #10
        error = get_size_by_data(&command_, &len, size_data);
 8005756:	4604      	mov	r4, r0
        last_read_byte = PACKET_HEADER_SIZE + 1;
 8005758:	61ab      	str	r3, [r5, #24]
    if(error == 3) {
 800575a:	2c03      	cmp	r4, #3
 800575c:	d10d      	bne.n	800577a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 800575e:	4630      	mov	r0, r6
 8005760:	f7fe fc8b 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8005764:	69ab      	ldr	r3, [r5, #24]
 8005766:	1ac0      	subs	r0, r0, r3
 8005768:	2801      	cmp	r0, #1
 800576a:	d10a      	bne.n	8005782 <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x72>
            size_data = packet.get_len() - last_read_byte;
 800576c:	4630      	mov	r0, r6
 800576e:	f7fe fc84 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
            error = 0;
 8005772:	2400      	movs	r4, #0
            size_data = packet.get_len() - last_read_byte;
 8005774:	69ab      	ldr	r3, [r5, #24]
 8005776:	1ac0      	subs	r0, r0, r3
 8005778:	7038      	strb	r0, [r7, #0]
}
 800577a:	4620      	mov	r0, r4
 800577c:	b002      	add	sp, #8
 800577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((packet.get_len() - last_read_byte) == 1) || ((packet.get_len() - last_read_byte) == 2)) {
 8005782:	4630      	mov	r0, r6
 8005784:	f7fe fc79 	bl	800407a <_ZNK11LoRa_packet7get_lenEv>
 8005788:	69ab      	ldr	r3, [r5, #24]
 800578a:	1ac0      	subs	r0, r0, r3
 800578c:	2802      	cmp	r0, #2
 800578e:	d1f4      	bne.n	800577a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005790:	e7ec      	b.n	800576c <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x5c>
 8005792:	4604      	mov	r4, r0
 8005794:	e7f1      	b.n	800577a <_ZN17Packet_Connection18get_size_by_packetERK11LoRa_packetRh+0x6a>
 8005796:	bf00      	nop
 8005798:	200020dc 	.word	0x200020dc

0800579c <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_>:
uint8_t Packet_Device::set_packet_data(LoRa_packet& packet, uint8_t *obj, uint8_t *num, uint8_t *com, uint8_t *data, uint8_t *len) {
 800579c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a0:	461d      	mov	r5, r3
    last_filled_byte = PACKET_HEADER_SIZE;
 80057a2:	2309      	movs	r3, #9
 80057a4:	6143      	str	r3, [r0, #20]
    if (!(*obj < DEVICE_OBJECT)) {
 80057a6:	7813      	ldrb	r3, [r2, #0]
uint8_t Packet_Device::set_packet_data(LoRa_packet& packet, uint8_t *obj, uint8_t *num, uint8_t *com, uint8_t *data, uint8_t *len) {
 80057a8:	4604      	mov	r4, r0
    if (!(*obj < DEVICE_OBJECT)) {
 80057aa:	2b08      	cmp	r3, #8
uint8_t Packet_Device::set_packet_data(LoRa_packet& packet, uint8_t *obj, uint8_t *num, uint8_t *com, uint8_t *data, uint8_t *len) {
 80057ac:	460f      	mov	r7, r1
    if (!(*obj < DEVICE_OBJECT)) {
 80057ae:	d904      	bls.n	80057ba <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1e>
        object_ = 0xFF;
 80057b0:	23ff      	movs	r3, #255	; 0xff
 80057b2:	7703      	strb	r3, [r0, #28]
        return 2;
 80057b4:	2002      	movs	r0, #2
}
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (field_bit[0].get_value(&setting_) != 1) {
 80057ba:	f100 0810 	add.w	r8, r0, #16
    object_ = *obj;
 80057be:	7703      	strb	r3, [r0, #28]
    if (field_bit[0].get_value(&setting_) != 1) {
 80057c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c4:	4641      	mov	r1, r8
 80057c6:	482c      	ldr	r0, [pc, #176]	; (8005878 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xdc>)
 80057c8:	f7fd fb51 	bl	8002e6e <_ZNK13Address_field9get_valueEPKhi>
 80057cc:	2801      	cmp	r0, #1
 80057ce:	d11c      	bne.n	800580a <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x6e>
    if (field_bit[1].get_value(&setting_) != 0) {
 80057d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d4:	4641      	mov	r1, r8
 80057d6:	4829      	ldr	r0, [pc, #164]	; (800587c <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe0>)
 80057d8:	f7fd fb49 	bl	8002e6e <_ZNK13Address_field9get_valueEPKhi>
 80057dc:	b150      	cbz	r0, 80057f4 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x58>
        error = field_byte.set_value(*num, packet, last_filled_byte);
 80057de:	7d23      	ldrb	r3, [r4, #20]
 80057e0:	463a      	mov	r2, r7
 80057e2:	7829      	ldrb	r1, [r5, #0]
 80057e4:	4826      	ldr	r0, [pc, #152]	; (8005880 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe4>)
 80057e6:	f7fd fc1d 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 80057ea:	6963      	ldr	r3, [r4, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	6163      	str	r3, [r4, #20]
    if (error)
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d139      	bne.n	8005868 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xcc>
    if (!(*com < DEVICE_COMMAND[object_])) {
 80057f4:	9b08      	ldr	r3, [sp, #32]
 80057f6:	4a23      	ldr	r2, [pc, #140]	; (8005884 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe8>)
 80057f8:	7819      	ldrb	r1, [r3, #0]
 80057fa:	7f23      	ldrb	r3, [r4, #28]
 80057fc:	5cd3      	ldrb	r3, [r2, r3]
 80057fe:	428b      	cmp	r3, r1
 8005800:	d810      	bhi.n	8005824 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x88>
        command_ = 0xFF;
 8005802:	23ff      	movs	r3, #255	; 0xff
        return 5;
 8005804:	2005      	movs	r0, #5
        command_ = 0xFF;
 8005806:	7763      	strb	r3, [r4, #29]
        return 5;
 8005808:	e7d5      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
        error = field_byte.set_value(object_, packet, last_filled_byte);
 800580a:	7d23      	ldrb	r3, [r4, #20]
 800580c:	463a      	mov	r2, r7
 800580e:	7f21      	ldrb	r1, [r4, #28]
 8005810:	481b      	ldr	r0, [pc, #108]	; (8005880 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe4>)
 8005812:	f7fd fc07 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005816:	6963      	ldr	r3, [r4, #20]
 8005818:	3301      	adds	r3, #1
 800581a:	6163      	str	r3, [r4, #20]
    if (error)
 800581c:	2800      	cmp	r0, #0
 800581e:	d0d7      	beq.n	80057d0 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x34>
        return 3;
 8005820:	2003      	movs	r0, #3
 8005822:	e7c8      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
    error = field_byte.set_value(command_, packet, last_filled_byte);
 8005824:	7d23      	ldrb	r3, [r4, #20]
 8005826:	463a      	mov	r2, r7
 8005828:	4815      	ldr	r0, [pc, #84]	; (8005880 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe4>)
    command_ = *com;
 800582a:	7761      	strb	r1, [r4, #29]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 800582c:	f7fd fbfa 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 8005830:	6963      	ldr	r3, [r4, #20]
    if (error)
 8005832:	4605      	mov	r5, r0
    ++last_filled_byte;
 8005834:	3301      	adds	r3, #1
 8005836:	6163      	str	r3, [r4, #20]
    if (error)
 8005838:	b9c0      	cbnz	r0, 800586c <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xd0>
    for (int i = 0; i < device_object_data[object_][command_]; ++i) {
 800583a:	4e13      	ldr	r6, [pc, #76]	; (8005888 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xec>)
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 800583c:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8005880 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xe4>
    for (int i = 0; i < device_object_data[object_][command_]; ++i) {
 8005840:	7f22      	ldrb	r2, [r4, #28]
 8005842:	7f63      	ldrb	r3, [r4, #29]
 8005844:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8005848:	5cd3      	ldrb	r3, [r2, r3]
 800584a:	42ab      	cmp	r3, r5
 800584c:	dd10      	ble.n	8005870 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xd4>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 800584e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005850:	7d23      	ldrb	r3, [r4, #20]
 8005852:	463a      	mov	r2, r7
 8005854:	4648      	mov	r0, r9
 8005856:	5d49      	ldrb	r1, [r1, r5]
 8005858:	f7fd fbe4 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 800585c:	6963      	ldr	r3, [r4, #20]
 800585e:	3301      	adds	r3, #1
 8005860:	6163      	str	r3, [r4, #20]
        if (error)
 8005862:	b938      	cbnz	r0, 8005874 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xd8>
    for (int i = 0; i < device_object_data[object_][command_]; ++i) {
 8005864:	3501      	adds	r5, #1
 8005866:	e7eb      	b.n	8005840 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0xa4>
        return 4;
 8005868:	2004      	movs	r0, #4
 800586a:	e7a4      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
        return 6;
 800586c:	2006      	movs	r0, #6
 800586e:	e7a2      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
    return 0;
 8005870:	2000      	movs	r0, #0
 8005872:	e7a0      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
            return 7;
 8005874:	2007      	movs	r0, #7
 8005876:	e79e      	b.n	80057b6 <_ZN13Packet_Device15set_packet_dataER11LoRa_packetPhS2_S2_S2_S2_+0x1a>
 8005878:	200022a8 	.word	0x200022a8
 800587c:	200022c4 	.word	0x200022c4
 8005880:	200020dc 	.word	0x200020dc
 8005884:	08008344 	.word	0x08008344
 8005888:	20000004 	.word	0x20000004

0800588c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_>:



uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	461d      	mov	r5, r3
    bool error = false;
    last_filled_byte = PACKET_HEADER_SIZE;
 8005892:	2309      	movs	r3, #9
 8005894:	6143      	str	r3, [r0, #20]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005896:	460f      	mov	r7, r1


    // комманда
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 8005898:	7811      	ldrb	r1, [r2, #0]
uint8_t Packet_System::set_packet_data(LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800589a:	4604      	mov	r4, r0
    if (!(*com < SYSTEM_COMMAND_DATA)) {
 800589c:	2907      	cmp	r1, #7
 800589e:	d904      	bls.n	80058aa <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1e>
        command_ = 0xFF;
 80058a0:	23ff      	movs	r3, #255	; 0xff
 80058a2:	7703      	strb	r3, [r0, #28]
        return 2;
 80058a4:	2002      	movs	r0, #2
        if (error)
            return 8;
    }

    return 0;
}
 80058a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    command_ = *com;
 80058aa:	7701      	strb	r1, [r0, #28]
    error = field_byte.set_value(command_, packet, last_filled_byte);
 80058ac:	463a      	mov	r2, r7
 80058ae:	482a      	ldr	r0, [pc, #168]	; (8005958 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 80058b0:	f7fd fbb8 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
    ++last_filled_byte;
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	6163      	str	r3, [r4, #20]
    if (error)
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d140      	bne.n	8005940 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb4>
    if (system_com_data[command_] != 0xFF) {
 80058be:	7f23      	ldrb	r3, [r4, #28]
 80058c0:	4a26      	ldr	r2, [pc, #152]	; (800595c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xd0>)
 80058c2:	5cd6      	ldrb	r6, [r2, r3]
 80058c4:	2eff      	cmp	r6, #255	; 0xff
 80058c6:	d128      	bne.n	800591a <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x8e>
        switch (command_)
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d13b      	bne.n	8005944 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xb8>
 80058cc:	1e6e      	subs	r6, r5, #1
 80058ce:	f105 080b 	add.w	r8, r5, #11
                error = field_byte.set_value(data[i], packet, last_filled_byte);
 80058d2:	7d23      	ldrb	r3, [r4, #20]
 80058d4:	463a      	mov	r2, r7
 80058d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058da:	481f      	ldr	r0, [pc, #124]	; (8005958 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 80058dc:	f7fd fba2 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
                ++last_filled_byte;
 80058e0:	6963      	ldr	r3, [r4, #20]
 80058e2:	3301      	adds	r3, #1
 80058e4:	6163      	str	r3, [r4, #20]
                if (error)
 80058e6:	bb78      	cbnz	r0, 8005948 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xbc>
            for(int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80058e8:	4546      	cmp	r6, r8
 80058ea:	d1f2      	bne.n	80058d2 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x46>
            _len = *len;
 80058ec:	9a06      	ldr	r2, [sp, #24]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 80058ee:	b2db      	uxtb	r3, r3
            _len = *len;
 80058f0:	7816      	ldrb	r6, [r2, #0]
            error = field_byte.set_value(_len, packet, last_filled_byte);
 80058f2:	4819      	ldr	r0, [pc, #100]	; (8005958 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 80058f4:	463a      	mov	r2, r7
 80058f6:	4631      	mov	r1, r6
 80058f8:	f7fd fb94 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	3301      	adds	r3, #1
 8005900:	6163      	str	r3, [r4, #20]
            if (error)
 8005902:	bb18      	cbnz	r0, 800594c <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc0>
            error = field_byte.set_value(data[0], packet, last_filled_byte);
 8005904:	b2db      	uxtb	r3, r3
 8005906:	463a      	mov	r2, r7
 8005908:	7b69      	ldrb	r1, [r5, #13]
 800590a:	4813      	ldr	r0, [pc, #76]	; (8005958 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>)
 800590c:	f7fd fb8a 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
            ++last_filled_byte;
 8005910:	6963      	ldr	r3, [r4, #20]
 8005912:	3301      	adds	r3, #1
 8005914:	6163      	str	r3, [r4, #20]
            if (error)
 8005916:	b9d8      	cbnz	r0, 8005950 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc4>
            data = data + 1;
 8005918:	350e      	adds	r5, #14
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 800591a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8005958 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xcc>
 800591e:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 8005920:	42b5      	cmp	r5, r6
 8005922:	d017      	beq.n	8005954 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0xc8>
        error = field_byte.set_value(data[i], packet, last_filled_byte);
 8005924:	7d23      	ldrb	r3, [r4, #20]
 8005926:	463a      	mov	r2, r7
 8005928:	4640      	mov	r0, r8
 800592a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800592e:	f7fd fb79 	bl	8003024 <_ZNK13Address_field9set_valueEmR11LoRa_packeth>
        ++last_filled_byte;
 8005932:	6963      	ldr	r3, [r4, #20]
 8005934:	3301      	adds	r3, #1
 8005936:	6163      	str	r3, [r4, #20]
        if (error)
 8005938:	2800      	cmp	r0, #0
 800593a:	d0f1      	beq.n	8005920 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x94>
            return 8;
 800593c:	2008      	movs	r0, #8
 800593e:	e7b2      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
        return 3;
 8005940:	2003      	movs	r0, #3
 8005942:	e7b0      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
            return 7;
 8005944:	2007      	movs	r0, #7
 8005946:	e7ae      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                    return 4;
 8005948:	2004      	movs	r0, #4
 800594a:	e7ac      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 5;
 800594c:	2005      	movs	r0, #5
 800594e:	e7aa      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
                return 6;
 8005950:	2006      	movs	r0, #6
 8005952:	e7a8      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
    return 0;
 8005954:	2000      	movs	r0, #0
 8005956:	e7a6      	b.n	80058a6 <_ZN13Packet_System15set_packet_dataER11LoRa_packetPhS2_S2_+0x1a>
 8005958:	200020dc 	.word	0x200020dc
 800595c:	0800834d 	.word	0x0800834d

08005960 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_>:

uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005964:	4616      	mov	r6, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8005966:	2209      	movs	r2, #9
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 8005968:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 800596a:	6182      	str	r2, [r0, #24]

    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 800596c:	482b      	ldr	r0, [pc, #172]	; (8005a1c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
uint8_t Packet_System::get_packet_data(const LoRa_packet& packet, uint8_t *com, uint8_t *data, uint8_t *len) {
 800596e:	461d      	mov	r5, r3
 8005970:	460f      	mov	r7, r1
 8005972:	f8dd 8020 	ldr.w	r8, [sp, #32]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005976:	f7fd fb09 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 800597a:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 800597c:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 800597e:	3301      	adds	r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005980:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 8005982:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005984:	61a3      	str	r3, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005986:	d904      	bls.n	8005992 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x32>
        command_ = 0xFF;
 8005988:	23ff      	movs	r3, #255	; 0xff
        return 2;
 800598a:	2002      	movs	r0, #2
        command_ = 0xFF;
 800598c:	7723      	strb	r3, [r4, #28]
    for (int i = 0; i < _len; ++i) {
        data[i] = field_byte.get_value(packet, last_read_byte);
        ++last_read_byte;
    }
    return 0;
}
 800598e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    *com = command_;
 8005992:	7030      	strb	r0, [r6, #0]
    if (system_com_data[command_] != 0xFF) {
 8005994:	7f23      	ldrb	r3, [r4, #28]
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xc0>)
 8005998:	5cd6      	ldrb	r6, [r2, r3]
 800599a:	2eff      	cmp	r6, #255	; 0xff
 800599c:	d011      	beq.n	80059c2 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x62>
        *len = _len;
 800599e:	f888 6000 	strb.w	r6, [r8]
        data[i] = field_byte.get_value(packet, last_read_byte);
 80059a2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005a1c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>
 80059a6:	442e      	add	r6, r5
    for (int i = 0; i < _len; ++i) {
 80059a8:	42b5      	cmp	r5, r6
 80059aa:	d034      	beq.n	8005a16 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb6>
        data[i] = field_byte.get_value(packet, last_read_byte);
 80059ac:	4639      	mov	r1, r7
 80059ae:	4640      	mov	r0, r8
 80059b0:	7e22      	ldrb	r2, [r4, #24]
 80059b2:	f7fd faeb 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80059b6:	f805 0b01 	strb.w	r0, [r5], #1
        ++last_read_byte;
 80059ba:	69a3      	ldr	r3, [r4, #24]
 80059bc:	3301      	adds	r3, #1
 80059be:	61a3      	str	r3, [r4, #24]
    for (int i = 0; i < _len; ++i) {
 80059c0:	e7f2      	b.n	80059a8 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x48>
        switch (command_)
 80059c2:	bb33      	cbnz	r3, 8005a12 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xb2>
 80059c4:	1e6e      	subs	r6, r5, #1
 80059c6:	f105 090b 	add.w	r9, r5, #11
                data[i] = field_byte.get_value(packet, last_read_byte);
 80059ca:	7e22      	ldrb	r2, [r4, #24]
 80059cc:	4639      	mov	r1, r7
 80059ce:	4813      	ldr	r0, [pc, #76]	; (8005a1c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 80059d0:	f7fd fadc 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80059d4:	f806 0f01 	strb.w	r0, [r6, #1]!
                ++last_read_byte;
 80059d8:	69a2      	ldr	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80059da:	454e      	cmp	r6, r9
                ++last_read_byte;
 80059dc:	f102 0201 	add.w	r2, r2, #1
 80059e0:	61a2      	str	r2, [r4, #24]
            for (int i = 0; i < AMT_BYTES_SYSTEM_ID; ++i) {
 80059e2:	d1f2      	bne.n	80059ca <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x6a>
            data[0] = field_byte.get_value(packet, last_read_byte);
 80059e4:	4639      	mov	r1, r7
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
 80059ea:	f7fd facf 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 80059ee:	7328      	strb	r0, [r5, #12]
            ++last_read_byte;
 80059f0:	69a3      	ldr	r3, [r4, #24]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80059f2:	4639      	mov	r1, r7
            ++last_read_byte;
 80059f4:	3301      	adds	r3, #1
 80059f6:	61a3      	str	r3, [r4, #24]
            *len = _len = data[0];
 80059f8:	7b2e      	ldrb	r6, [r5, #12]
            data[0] = field_byte.get_value(packet, last_read_byte);
 80059fa:	4808      	ldr	r0, [pc, #32]	; (8005a1c <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0xbc>)
            *len = _len = data[0];
 80059fc:	f888 6000 	strb.w	r6, [r8]
            data[0] = field_byte.get_value(packet, last_read_byte);
 8005a00:	7e22      	ldrb	r2, [r4, #24]
 8005a02:	f7fd fac3 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005a06:	7368      	strb	r0, [r5, #13]
            ++last_read_byte;
 8005a08:	69a3      	ldr	r3, [r4, #24]
            data = data + 1;
 8005a0a:	350e      	adds	r5, #14
            ++last_read_byte;
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	61a3      	str	r3, [r4, #24]
            break;
 8005a10:	e7c7      	b.n	80059a2 <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x42>
            return 4;
 8005a12:	2004      	movs	r0, #4
 8005a14:	e7bb      	b.n	800598e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
    return 0;
 8005a16:	2000      	movs	r0, #0
 8005a18:	e7b9      	b.n	800598e <_ZN13Packet_System15get_packet_dataERK11LoRa_packetPhS3_S3_+0x2e>
 8005a1a:	bf00      	nop
 8005a1c:	200020dc 	.word	0x200020dc
 8005a20:	0800834d 	.word	0x0800834d

08005a24 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh>:
    }
    size_data += _len;
    last_read_byte += _len;
    return 0;
}
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4615      	mov	r5, r2
    last_read_byte = PACKET_HEADER_SIZE;
 8005a28:	2209      	movs	r2, #9
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005a2a:	4604      	mov	r4, r0
    last_read_byte = PACKET_HEADER_SIZE;
 8005a2c:	6182      	str	r2, [r0, #24]
    // комманда
    command_ = field_byte.get_value(packet, last_read_byte);
 8005a2e:	4819      	ldr	r0, [pc, #100]	; (8005a94 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
uint8_t Packet_System::get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data) {
 8005a30:	460e      	mov	r6, r1
    command_ = field_byte.get_value(packet, last_read_byte);
 8005a32:	f7fd faab 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
    ++last_read_byte;
 8005a36:	69a3      	ldr	r3, [r4, #24]
    command_ = field_byte.get_value(packet, last_read_byte);
 8005a38:	b2c0      	uxtb	r0, r0
    ++last_read_byte;
 8005a3a:	1c5a      	adds	r2, r3, #1
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005a3c:	2807      	cmp	r0, #7
    command_ = field_byte.get_value(packet, last_read_byte);
 8005a3e:	7720      	strb	r0, [r4, #28]
    ++last_read_byte;
 8005a40:	61a2      	str	r2, [r4, #24]
    if (!(command_ < SYSTEM_COMMAND_DATA)) {
 8005a42:	d903      	bls.n	8005a4c <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x28>
        command_ = 0xFF;
 8005a44:	23ff      	movs	r3, #255	; 0xff
        return 2;
 8005a46:	2002      	movs	r0, #2
        command_ = 0xFF;
 8005a48:	7723      	strb	r3, [r4, #28]
            return 4;
        }
    }
    last_read_byte += size_data;
    return 0;
}
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
    if (system_com_data[command_] != 0xFF) {
 8005a4c:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x74>)
 8005a4e:	5c12      	ldrb	r2, [r2, r0]
 8005a50:	2aff      	cmp	r2, #255	; 0xff
 8005a52:	d006      	beq.n	8005a62 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x3e>
        size_data = system_com_data[command_];
 8005a54:	702a      	strb	r2, [r5, #0]
    last_read_byte += size_data;
 8005a56:	782a      	ldrb	r2, [r5, #0]
 8005a58:	69a3      	ldr	r3, [r4, #24]
    return 0;
 8005a5a:	2000      	movs	r0, #0
    last_read_byte += size_data;
 8005a5c:	4413      	add	r3, r2
 8005a5e:	61a3      	str	r3, [r4, #24]
    return 0;
 8005a60:	e7f3      	b.n	8005a4a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
        switch (command_)
 8005a62:	b9a8      	cbnz	r0, 8005a90 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x6c>
            last_read_byte += AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005a64:	330d      	adds	r3, #13
 8005a66:	61a3      	str	r3, [r4, #24]
            size_data = AMT_BYTES_SYSTEM_ID; // смещение на ID
 8005a68:	230c      	movs	r3, #12
 8005a6a:	702b      	strb	r3, [r5, #0]
            size_data += field_byte.get_value(packet, last_read_byte);
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	7e22      	ldrb	r2, [r4, #24]
 8005a70:	4808      	ldr	r0, [pc, #32]	; (8005a94 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x70>)
 8005a72:	f7fd fa8b 	bl	8002f8c <_ZNK13Address_field9get_valueERK11LoRa_packeth>
 8005a76:	782b      	ldrb	r3, [r5, #0]
 8005a78:	4403      	add	r3, r0
 8005a7a:	702b      	strb	r3, [r5, #0]
            last_read_byte += 2; // смещение на length и type
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	3302      	adds	r3, #2
 8005a80:	61a3      	str	r3, [r4, #24]
            size_data += 2; // смещение на length и type
 8005a82:	782b      	ldrb	r3, [r5, #0]
 8005a84:	3302      	adds	r3, #2
 8005a86:	702b      	strb	r3, [r5, #0]
            ++last_read_byte;
 8005a88:	69a3      	ldr	r3, [r4, #24]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61a3      	str	r3, [r4, #24]
            break;
 8005a8e:	e7e2      	b.n	8005a56 <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x32>
            return 4;
 8005a90:	2004      	movs	r0, #4
 8005a92:	e7da      	b.n	8005a4a <_ZN13Packet_System18get_size_by_packetERK11LoRa_packetRh+0x26>
 8005a94:	200020dc 	.word	0x200020dc
 8005a98:	0800834d 	.word	0x0800834d

08005a9c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH>:
const uint16_t LORA_ADDRESS_BRANCH = 24 - LORA_ADDRESS_GROUP;

const Register Hendler[11] = {Register(0, 8, 0), Register(1, 1, 7), Register(1, 7, 0), Register(2, 8, 0),
                              Register(3, 8, 0), Register(4, 1, 7), Register(4, 7, 0), Register(5, 8, 0),
                              Register(6, 8, 0),
                              Register(7, 8, 0), Register(8, 8, 0)};
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa2:	4edc      	ldr	r6, [pc, #880]	; (8005e14 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x378>)
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f7fd f942 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f106 0b10 	add.w	fp, r6, #16
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	2307      	movs	r3, #7
 8005aba:	f106 0008 	add.w	r0, r6, #8
 8005abe:	f7fd f939 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4658      	mov	r0, fp
 8005aca:	f7fd f933 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	f106 0018 	add.w	r0, r6, #24
 8005ad8:	f7fd f92c 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2208      	movs	r2, #8
 8005ae0:	2103      	movs	r1, #3
 8005ae2:	f106 0020 	add.w	r0, r6, #32
 8005ae6:	f7fd f925 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005aea:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8005aee:	2307      	movs	r3, #7
 8005af0:	2201      	movs	r2, #1
 8005af2:	2104      	movs	r1, #4
 8005af4:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005af8:	f7fd f91c 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2207      	movs	r2, #7
 8005b00:	2104      	movs	r1, #4
 8005b02:	4648      	mov	r0, r9
 8005b04:	f7fd f916 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005b08:	f106 0840 	add.w	r8, r6, #64	; 0x40
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2208      	movs	r2, #8
 8005b10:	2105      	movs	r1, #5
 8005b12:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8005b16:	f7fd f90d 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005b1a:	f106 0748 	add.w	r7, r6, #72	; 0x48
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2208      	movs	r2, #8
 8005b22:	2106      	movs	r1, #6
 8005b24:	4640      	mov	r0, r8
 8005b26:	f7fd f905 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	2107      	movs	r1, #7
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7fd f8ff 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005b36:	2208      	movs	r2, #8

const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005b38:	2400      	movs	r4, #0
 8005b3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b3e:	f04f 0a77 	mov.w	sl, #119	; 0x77
                              Register(7, 8, 0), Register(8, 8, 0)};
 8005b42:	4611      	mov	r1, r2
 8005b44:	2300      	movs	r3, #0
 8005b46:	f106 0050 	add.w	r0, r6, #80	; 0x50
 8005b4a:	f7fd f8f3 	bl	8002d34 <_ZN8RegisterC1Ethh>
const Address_field field_dest_adr_group(&Hendler[0], 2, true),  // Destination Address group (адресс группы устройства назначения)
 8005b4e:	4631      	mov	r1, r6
 8005b50:	2301      	movs	r3, #1
 8005b52:	2202      	movs	r2, #2
 8005b54:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005b58:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005b5c:	f8cd a000 	str.w	sl, [sp]
 8005b60:	48ad      	ldr	r0, [pc, #692]	; (8005e18 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x37c>)
 8005b62:	f7fd f971 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_dest_adr_branch(&Hendler[2], 2, true), // Destination Address branch (адресс ветви устройства назначения)
 8005b66:	4659      	mov	r1, fp
 8005b68:	2301      	movs	r3, #1
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005b70:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005b74:	f8cd a000 	str.w	sl, [sp]
 8005b78:	48a8      	ldr	r0, [pc, #672]	; (8005e1c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x380>)
 8005b7a:	f7fd f965 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_group(&Hendler[4], 2, true),  // Source Address group (адресс группы отправляющего устройства)
 8005b7e:	f106 0120 	add.w	r1, r6, #32
 8005b82:	2301      	movs	r3, #1
 8005b84:	2202      	movs	r2, #2
 8005b86:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005b8a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005b8e:	f8cd a000 	str.w	sl, [sp]
 8005b92:	48a3      	ldr	r0, [pc, #652]	; (8005e20 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x384>)
 8005b94:	f7fd f958 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_sour_adr_branch(&Hendler[6], 2, true), // Source Address branch (адресс ветви отправляющего устройства)
 8005b98:	4649      	mov	r1, r9
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005ba2:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005ba6:	f8cd a000 	str.w	sl, [sp]
 8005baa:	489e      	ldr	r0, [pc, #632]	; (8005e24 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x388>)
 8005bac:	f7fd f94c 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	461a      	mov	r2, r3
                                               &field_sour_adr_group, &field_sour_adr_branch,
                                               &field_type, &field_number};


// Типы данных
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8005bb6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8005e70 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d4>
                    field_type(&Hendler[8], 1, true),   // Packet Type (тип пакетп)
 8005bba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005bbe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005bc2:	f8cd a000 	str.w	sl, [sp]
 8005bc6:	4898      	ldr	r0, [pc, #608]	; (8005e28 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x38c>)
 8005bc8:	f7fd f93e 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_number(&Hendler[9], 2, true); // Packet Number (номер пакета)
 8005bcc:	4639      	mov	r1, r7
 8005bce:	2301      	movs	r3, #1
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005bd6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005bda:	f8cd a000 	str.w	sl, [sp]
 8005bde:	4893      	ldr	r0, [pc, #588]	; (8005e2c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x390>)
 8005be0:	f7fd f932 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8005be4:	4623      	mov	r3, r4
 8005be6:	4621      	mov	r1, r4
 8005be8:	2204      	movs	r2, #4
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7fd f8a2 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005bf0:	2208      	movs	r2, #8
               register_byte[1]  = {Register(0, 8, 0)},
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8005bf2:	4f8f      	ldr	r7, [pc, #572]	; (8005e30 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x394>)
const Register register_PWM[2]   = {Register(0, 4, 0), Register(1, 8, 0)},
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	eb08 0002 	add.w	r0, r8, r2
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f7fd f89a 	bl	8002d34 <_ZN8RegisterC1Ethh>
               register_byte[1]  = {Register(0, 8, 0)},
 8005c00:	4623      	mov	r3, r4
 8005c02:	4621      	mov	r1, r4
 8005c04:	2208      	movs	r2, #8
 8005c06:	488b      	ldr	r0, [pc, #556]	; (8005e34 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 8005c08:	f7fd f894 	bl	8002d34 <_ZN8RegisterC1Ethh>
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	4621      	mov	r1, r4
 8005c10:	2208      	movs	r2, #8
 8005c12:	4638      	mov	r0, r7
 8005c14:	f7fd f88e 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c18:	2208      	movs	r2, #8
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	18b8      	adds	r0, r7, r2
 8005c1e:	2101      	movs	r1, #1
               register_bit[8]   = {Register(0, 1, 0), Register(0, 1, 1), Register(0, 1, 2), Register(0, 1, 3),
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8005c20:	4e85      	ldr	r6, [pc, #532]	; (8005e38 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x39c>)
               register_float[4] = {Register(0, 8, 0), Register(1, 8, 0), Register(2, 8, 0), Register(3, 8, 0)},
 8005c22:	f7fd f887 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c26:	4623      	mov	r3, r4
 8005c28:	2208      	movs	r2, #8
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	f107 0010 	add.w	r0, r7, #16
 8005c30:	f7fd f880 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c34:	4623      	mov	r3, r4
 8005c36:	2208      	movs	r2, #8
 8005c38:	2103      	movs	r1, #3
 8005c3a:	f107 0018 	add.w	r0, r7, #24
 8005c3e:	f7fd f879 	bl	8002d34 <_ZN8RegisterC1Ethh>
                                    Register(0, 1, 4), Register(0, 1, 5), Register(0, 1, 6), Register(0, 1, 7)};
 8005c42:	4623      	mov	r3, r4
 8005c44:	4621      	mov	r1, r4
 8005c46:	2201      	movs	r2, #1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7fd f873 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4621      	mov	r1, r4
 8005c52:	461a      	mov	r2, r3
 8005c54:	f106 0008 	add.w	r0, r6, #8
 8005c58:	f7fd f86c 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	2302      	movs	r3, #2
 8005c60:	2201      	movs	r2, #1
 8005c62:	f106 0010 	add.w	r0, r6, #16
 8005c66:	f7fd f865 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f106 0018 	add.w	r0, r6, #24
 8005c74:	f7fd f85e 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f106 0020 	add.w	r0, r6, #32
 8005c82:	f7fd f857 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c86:	f106 0b30 	add.w	fp, r6, #48	; 0x30
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005c94:	f7fd f84e 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005c98:	f106 0938 	add.w	r9, r6, #56	; 0x38
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	2306      	movs	r3, #6
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4658      	mov	r0, fp
 8005ca4:	f7fd f846 	bl	8002d34 <_ZN8RegisterC1Ethh>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	2307      	movs	r3, #7
 8005cac:	2201      	movs	r2, #1
 8005cae:	4648      	mov	r0, r9
 8005cb0:	f7fd f840 	bl	8002d34 <_ZN8RegisterC1Ethh>

const Address_field field_PWM(&register_PWM[0], 2, true),
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	2202      	movs	r2, #2
 8005cba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005cbe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005cc2:	f8cd a000 	str.w	sl, [sp]
 8005cc6:	485d      	ldr	r0, [pc, #372]	; (8005e3c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a0>)
 8005cc8:	f7fd f8be 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_byte(&register_byte[0]),
 8005ccc:	4623      	mov	r3, r4
 8005cce:	2201      	movs	r2, #1
 8005cd0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005cd4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005cd8:	4956      	ldr	r1, [pc, #344]	; (8005e34 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x398>)
 8005cda:	f8cd a000 	str.w	sl, [sp]
 8005cde:	4858      	ldr	r0, [pc, #352]	; (8005e40 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a4>)
 8005ce0:	f7fd f8b2 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                    field_float(&register_float[0], 4, false),
 8005ce4:	4639      	mov	r1, r7
                    field_bit[8] = {Address_field(&register_bit[0]), Address_field(&register_bit[1]),
                                    Address_field(&register_bit[2]), Address_field(&register_bit[3]),
                                    Address_field(&register_bit[4]), Address_field(&register_bit[5]),
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8005ce6:	4f57      	ldr	r7, [pc, #348]	; (8005e44 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3a8>)
                    field_float(&register_float[0], 4, false),
 8005ce8:	4623      	mov	r3, r4
 8005cea:	2204      	movs	r2, #4
 8005cec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005cf0:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005cf4:	f8cd a000 	str.w	sl, [sp]
 8005cf8:	4853      	ldr	r0, [pc, #332]	; (8005e48 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3ac>)
 8005cfa:	f7fd f8a5 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
                                    Address_field(&register_bit[6]), Address_field(&register_bit[7])};
 8005cfe:	4623      	mov	r3, r4
 8005d00:	4631      	mov	r1, r6
 8005d02:	2201      	movs	r2, #1
 8005d04:	4638      	mov	r0, r7
 8005d06:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d0a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d0e:	f8cd a000 	str.w	sl, [sp]
 8005d12:	f7fd f899 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005d16:	4623      	mov	r3, r4
 8005d18:	f106 0108 	add.w	r1, r6, #8
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d22:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d26:	f8cd a000 	str.w	sl, [sp]
 8005d2a:	f107 001c 	add.w	r0, r7, #28
 8005d2e:	f7fd f88b 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005d32:	4623      	mov	r3, r4
 8005d34:	f106 0110 	add.w	r1, r6, #16
 8005d38:	2201      	movs	r2, #1
 8005d3a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d3e:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d42:	f8cd a000 	str.w	sl, [sp]
 8005d46:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005d4a:	f7fd f87d 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005d4e:	4623      	mov	r3, r4
 8005d50:	f106 0118 	add.w	r1, r6, #24
 8005d54:	2201      	movs	r2, #1
 8005d56:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d5a:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d5e:	f8cd a000 	str.w	sl, [sp]
 8005d62:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8005d66:	f7fd f86f 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	f106 0120 	add.w	r1, r6, #32
 8005d70:	2201      	movs	r2, #1
 8005d72:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d76:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d7a:	f8cd a000 	str.w	sl, [sp]
 8005d7e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005d82:	f7fd f861 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005d86:	4623      	mov	r3, r4
 8005d88:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005d92:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d96:	f8cd a000 	str.w	sl, [sp]
 8005d9a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8005d9e:	f7fd f853 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005da2:	4623      	mov	r3, r4
 8005da4:	4659      	mov	r1, fp
 8005da6:	2201      	movs	r2, #1
 8005da8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005dac:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005db0:	f8cd a000 	str.w	sl, [sp]
 8005db4:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8005db8:	f7fd f846 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005dc6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005dca:	f8cd a000 	str.w	sl, [sp]
 8005dce:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8005dd2:	f7fd f839 	bl	8002e48 <_ZN13Address_fieldC1EPK8RegisterhbcmmPKmm>
Packet_analyzer packet_analyzer;
 8005dd6:	481d      	ldr	r0, [pc, #116]	; (8005e4c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b0>)
 8005dd8:	f7ff fa60 	bl	800529c <_ZN15Packet_analyzerC1Ev>
    virtual bool set_setting(uint8_t setting=0);
    uint8_t get_setting();
};


class Packet_Connection: public Packet_analyzer {
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b4>)
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fa5c 	bl	800529c <_ZN15Packet_analyzerC1Ev>
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3b8>)
 8005de6:	771c      	strb	r4, [r3, #28]
 8005de8:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *com, const uint8_t *len, uint8_t &size_data);
    // Узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t &size_data);
};

class Packet_Sensor: public Packet_analyzer {
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3bc>)
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fa55 	bl	800529c <_ZN15Packet_analyzerC1Ev>
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c0>)
 8005df4:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *amt, const uint8_t *param, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *amt, uint8_t *param, uint8_t &size_data);
};

class Packet_Device: public Packet_analyzer {
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c4>)
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fa4f 	bl	800529c <_ZN15Packet_analyzerC1Ev>
 8005dfe:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3c8>)
 8005e00:	601a      	str	r2, [r3, #0]
    uint8_t get_size_by_data(const uint8_t *obj, const uint8_t *com, uint8_t &size_data);
    // узнать объём поля данных по содержимому пакета
    uint8_t get_size_by_packet(const LoRa_packet& packet, uint8_t *obj, uint8_t &size_data);
};

class Packet_System: public Packet_analyzer {
 8005e02:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3cc>)
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fa49 	bl	800529c <_ZN15Packet_analyzerC1Ev>
 8005e0a:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <_GLOBAL__sub_I_LORA_ADDRESS_BRANCH+0x3d0>)
 8005e0c:	601a      	str	r2, [r3, #0]
}
 8005e0e:	b007      	add	sp, #28
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	20002234 	.word	0x20002234
 8005e18:	200021c4 	.word	0x200021c4
 8005e1c:	200021fc 	.word	0x200021fc
 8005e20:	200021e0 	.word	0x200021e0
 8005e24:	20002218 	.word	0x20002218
 8005e28:	200020f8 	.word	0x200020f8
 8005e2c:	20002130 	.word	0x20002130
 8005e30:	200021a4 	.word	0x200021a4
 8005e34:	2000219c 	.word	0x2000219c
 8005e38:	2000215c 	.word	0x2000215c
 8005e3c:	2000228c 	.word	0x2000228c
 8005e40:	200020dc 	.word	0x200020dc
 8005e44:	200022a8 	.word	0x200022a8
 8005e48:	20002114 	.word	0x20002114
 8005e4c:	20002388 	.word	0x20002388
 8005e50:	200023a4 	.word	0x200023a4
 8005e54:	080083a4 	.word	0x080083a4
 8005e58:	200023e4 	.word	0x200023e4
 8005e5c:	0800838c 	.word	0x0800838c
 8005e60:	200023c4 	.word	0x200023c4
 8005e64:	08008380 	.word	0x08008380
 8005e68:	20002404 	.word	0x20002404
 8005e6c:	08008398 	.word	0x08008398
 8005e70:	2000214c 	.word	0x2000214c

08005e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e74:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e76:	2214      	movs	r2, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e78:	2400      	movs	r4, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e7a:	2610      	movs	r6, #16
{
 8005e7c:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e7e:	4621      	mov	r1, r4
 8005e80:	eb0d 0002 	add.w	r0, sp, r2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e84:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005e88:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e8a:	f002 f919 	bl	80080c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e8e:	4632      	mov	r2, r6
 8005e90:	4621      	mov	r1, r4
 8005e92:	a801      	add	r0, sp, #4
 8005e94:	f002 f914 	bl	80080c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e98:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005e9a:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e9c:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005ea0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ea2:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8005ea4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ea8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005eaa:	e9cd 6411 	strd	r6, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005eae:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8005eb0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005eb2:	f000 ff19 	bl	8006ce8 <HAL_RCC_OscConfig>
 8005eb6:	b108      	cbz	r0, 8005ebc <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8005eb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005eba:	e7fe      	b.n	8005eba <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ebc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ebe:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ec6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ec8:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005ecc:	4629      	mov	r1, r5
 8005ece:	a805      	add	r0, sp, #20
 8005ed0:	f001 f8e0 	bl	8007094 <HAL_RCC_ClockConfig>
 8005ed4:	b108      	cbz	r0, 8005eda <SystemClock_Config+0x66>
 8005ed6:	b672      	cpsid	i
  while (1)
 8005ed8:	e7fe      	b.n	8005ed8 <SystemClock_Config+0x64>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ede:	2203      	movs	r2, #3
 8005ee0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8005ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ee8:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8005eea:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eec:	f001 f97e 	bl	80071ec <HAL_RCCEx_PeriphCLKConfig>
 8005ef0:	b108      	cbz	r0, 8005ef6 <SystemClock_Config+0x82>
 8005ef2:	b672      	cpsid	i
  while (1)
 8005ef4:	e7fe      	b.n	8005ef4 <SystemClock_Config+0x80>
}
 8005ef6:	b014      	add	sp, #80	; 0x50
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005efc <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin== GPIO_PIN_2) {
 8005efc:	2804      	cmp	r0, #4
 8005efe:	d105      	bne.n	8005f0c <HAL_GPIO_EXTI_Callback+0x10>
    exti2++;
 8005f00:	4a06      	ldr	r2, [pc, #24]	; (8005f1c <HAL_GPIO_EXTI_Callback+0x20>)
    exti5_10++;
 8005f02:	8813      	ldrh	r3, [r2, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	8013      	strh	r3, [r2, #0]
    Contact_group_control_module();
 8005f08:	f7fc be84 	b.w	8002c14 <Contact_group_control_module>
  } else if(GPIO_Pin== GPIO_PIN_10){
 8005f0c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005f10:	d101      	bne.n	8005f16 <HAL_GPIO_EXTI_Callback+0x1a>
    exti5_10++;
 8005f12:	4a03      	ldr	r2, [pc, #12]	; (8005f20 <HAL_GPIO_EXTI_Callback+0x24>)
 8005f14:	e7f5      	b.n	8005f02 <HAL_GPIO_EXTI_Callback+0x6>
    __NOP();
 8005f16:	bf00      	nop
}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20002430 	.word	0x20002430
 8005f20:	20002432 	.word	0x20002432

08005f24 <alarm_rtc>:
void alarm_rtc() {
 8005f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	RTC_AlarmTypeDef alarm = {.Alarm=1};
 8005f26:	2600      	movs	r6, #0
 8005f28:	2501      	movs	r5, #1
	alarm.AlarmTime = find_alarm_clock(all_channel, AMT_CHANNEL);
 8005f2a:	4c14      	ldr	r4, [pc, #80]	; (8005f7c <alarm_rtc+0x58>)
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	4620      	mov	r0, r4
	RTC_AlarmTypeDef alarm = {.Alarm=1};
 8005f30:	e9cd 6500 	strd	r6, r5, [sp]
	alarm.AlarmTime = find_alarm_clock(all_channel, AMT_CHANNEL);
 8005f34:	f7fa fdcc 	bl	8000ad0 <find_alarm_clock>
 8005f38:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005f3c:	f88d 0000 	strb.w	r0, [sp]
 8005f40:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8005f44:	f88d 0002 	strb.w	r0, [sp, #2]
		check_state_by_RTC(&all_channel[i]);
 8005f48:	4620      	mov	r0, r4
	alarm.AlarmTime = find_alarm_clock(all_channel, AMT_CHANNEL);
 8005f4a:	f88d 3001 	strb.w	r3, [sp, #1]
		check_state_by_RTC(&all_channel[i]);
 8005f4e:	f7fa fda7 	bl	8000aa0 <check_state_by_RTC>
 8005f52:	f104 0010 	add.w	r0, r4, #16
 8005f56:	f7fa fda3 	bl	8000aa0 <check_state_by_RTC>
	HAL_RTC_SetAlarm_IT(&hrtc, &alarm, RTC_FORMAT_BIN);
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4669      	mov	r1, sp
 8005f5e:	4808      	ldr	r0, [pc, #32]	; (8005f80 <alarm_rtc+0x5c>)
 8005f60:	f001 fbee 	bl	8007740 <HAL_RTC_SetAlarm_IT>
	next_time = alarm.AlarmTime;
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <alarm_rtc+0x60>)
 8005f66:	f8bd 1000 	ldrh.w	r1, [sp]
 8005f6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8005f6e:	8019      	strh	r1, [r3, #0]
 8005f70:	709a      	strb	r2, [r3, #2]
	change_state = true;
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <alarm_rtc+0x64>)
 8005f74:	701d      	strb	r5, [r3, #0]
}
 8005f76:	b002      	add	sp, #8
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20002520 	.word	0x20002520
 8005f80:	20002460 	.word	0x20002460
 8005f84:	2000247a 	.word	0x2000247a
 8005f88:	20002426 	.word	0x20002426

08005f8c <DevicesGetValues>:
	if(relay[0].state)
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <DevicesGetValues+0x20>)
 8005f8e:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <DevicesGetValues+0x24>)
 8005f90:	79cb      	ldrb	r3, [r1, #7]
	if(relay[1].state)
 8005f92:	7bc9      	ldrb	r1, [r1, #15]
	if(relay[0].state)
 8005f94:	2b00      	cmp	r3, #0
		devices_data.lamp_d1 = 0;
 8005f96:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2000      	moveq	r0, #0
 8005f9e:	4618      	movne	r0, r3
	if(relay[1].state)
 8005fa0:	2900      	cmp	r1, #0
		devices_data.lamp_d2 = 0;
 8005fa2:	bf08      	it	eq
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	8010      	strh	r0, [r2, #0]
	if(relay[1].state)
 8005fa8:	8053      	strh	r3, [r2, #2]
}
 8005faa:	4770      	bx	lr
 8005fac:	20002450 	.word	0x20002450
 8005fb0:	20002474 	.word	0x20002474
 8005fb4:	00000000 	.word	0x00000000

08005fb8 <main>:
{
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  relay_invert[0] = relay_invert[1] = false;
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8006164 <main+0x1ac>
{
 8005fc2:	b097      	sub	sp, #92	; 0x5c
  Read_control_module_info_from_flash(control_module_id_and_channel);
 8005fc4:	485d      	ldr	r0, [pc, #372]	; (800613c <main+0x184>)
  relay_invert[0] = relay_invert[1] = false;
 8005fc6:	f88a 5001 	strb.w	r5, [sl, #1]
 8005fca:	f88a 5000 	strb.w	r5, [sl]
  Read_control_module_info_from_flash(control_module_id_and_channel);
 8005fce:	f7fa fe47 	bl	8000c60 <Read_control_module_info_from_flash>
  Get_control_module_info_from_main(control_module_id_and_channel);
 8005fd2:	485a      	ldr	r0, [pc, #360]	; (800613c <main+0x184>)
 8005fd4:	f7fc fda2 	bl	8002b1c <Get_control_module_info_from_main>
  HAL_Init();
 8005fd8:	f000 fb70 	bl	80066bc <HAL_Init>
  SystemClock_Config();
 8005fdc:	f7ff ff4a 	bl	8005e74 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	a812      	add	r0, sp, #72	; 0x48
 8005fe6:	f002 f86b 	bl	80080c0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fea:	4b55      	ldr	r3, [pc, #340]	; (8006140 <main+0x188>)
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin, GPIO_PIN_RESET);
 8005fec:	f641 4110 	movw	r1, #7184	; 0x1c10
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin, GPIO_PIN_RESET);
 8005ff2:	4854      	ldr	r0, [pc, #336]	; (8006144 <main+0x18c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff4:	f042 0204 	orr.w	r2, r2, #4
 8005ff8:	619a      	str	r2, [r3, #24]
 8005ffa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffc:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006000:	f002 0204 	and.w	r2, r2, #4
 8006004:	920e      	str	r2, [sp, #56]	; 0x38
 8006006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006008:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800600a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800600c:	f042 0208 	orr.w	r2, r2, #8
 8006010:	619a      	str	r2, [r3, #24]
 8006012:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin, GPIO_PIN_RESET);
 8006014:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	930f      	str	r3, [sp, #60]	; 0x3c
 800601c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOA, LORA_NSS_Pin|LED1_PIN_Pin|LED2_PIN_Pin|LED3_PIN_Pin, GPIO_PIN_RESET);
 800601e:	f000 fe43 	bl	8006ca8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LORA_RESET_Pin|RELAY2_PIN_Pin|RELAY1_PIN_Pin|RELAY_NS_PIN_Pin, GPIO_PIN_RESET);
 8006022:	462a      	mov	r2, r5
 8006024:	f640 0138 	movw	r1, #2104	; 0x838
 8006028:	4847      	ldr	r0, [pc, #284]	; (8006148 <main+0x190>)
 800602a:	f000 fe3d 	bl	8006ca8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800602e:	f641 4310 	movw	r3, #7184	; 0x1c10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006032:	4844      	ldr	r0, [pc, #272]	; (8006144 <main+0x18c>)
 8006034:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006036:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800603c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006040:	f000 fd50 	bl	8006ae4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006044:	f240 4004 	movw	r0, #1028	; 0x404
 8006048:	4b40      	ldr	r3, [pc, #256]	; (800614c <main+0x194>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800604a:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800604c:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006050:	483d      	ldr	r0, [pc, #244]	; (8006148 <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006052:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006056:	f000 fd45 	bl	8006ae4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LORA_RESET_Pin|RELAY2_PIN_Pin|RELAY1_PIN_Pin|RELAY_NS_PIN_Pin;
 800605a:	f640 0338 	movw	r3, #2104	; 0x838
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800605e:	483a      	ldr	r0, [pc, #232]	; (8006148 <main+0x190>)
 8006060:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006062:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006066:	e9cd 5814 	strd	r5, r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800606a:	f000 fd3b 	bl	8006ae4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800606e:	462a      	mov	r2, r5
 8006070:	4629      	mov	r1, r5
 8006072:	2008      	movs	r0, #8
 8006074:	f000 fb6a 	bl	800674c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006078:	2008      	movs	r0, #8
 800607a:	f000 fb99 	bl	80067b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800607e:	462a      	mov	r2, r5
 8006080:	4629      	mov	r1, r5
 8006082:	2028      	movs	r0, #40	; 0x28
 8006084:	f000 fb62 	bl	800674c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006088:	2028      	movs	r0, #40	; 0x28
 800608a:	f000 fb91 	bl	80067b0 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800608e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8006092:	4c2f      	ldr	r4, [pc, #188]	; (8006150 <main+0x198>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006094:	4e2f      	ldr	r6, [pc, #188]	; (8006154 <main+0x19c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006096:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800609a:	e9c4 6300 	strd	r6, r3, [r4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800609e:	2318      	movs	r3, #24
 80060a0:	e9c4 c306 	strd	ip, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 80060a4:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80060a6:	4620      	mov	r0, r4
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80060a8:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80060ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80060b0:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060b4:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80060b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80060b8:	f001 fc98 	bl	80079ec <HAL_SPI_Init>
 80060bc:	4606      	mov	r6, r0
 80060be:	b108      	cbz	r0, 80060c4 <main+0x10c>
 80060c0:	b672      	cpsid	i
  while (1)
 80060c2:	e7fe      	b.n	80060c2 <main+0x10a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060c4:	4601      	mov	r1, r0
 80060c6:	2210      	movs	r2, #16
 80060c8:	a812      	add	r0, sp, #72	; 0x48
 80060ca:	f001 fff9 	bl	80080c0 <memset>
  htim2.Init.Prescaler = 72;
 80060ce:	2348      	movs	r3, #72	; 0x48
 80060d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80060d4:	4d20      	ldr	r5, [pc, #128]	; (8006158 <main+0x1a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060d6:	e9cd 6610 	strd	r6, r6, [sp, #64]	; 0x40
  htim2.Init.Prescaler = 72;
 80060da:	e9c5 1300 	strd	r1, r3, [r5]
  htim2.Init.Period = 65535;
 80060de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80060e2:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e4:	e9c5 3603 	strd	r3, r6, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060e8:	60ae      	str	r6, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ea:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80060ec:	f001 fe7c 	bl	8007de8 <HAL_TIM_Base_Init>
 80060f0:	b108      	cbz	r0, 80060f6 <main+0x13e>
 80060f2:	b672      	cpsid	i
  while (1)
 80060f4:	e7fe      	b.n	80060f4 <main+0x13c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80060fa:	4628      	mov	r0, r5
 80060fc:	a912      	add	r1, sp, #72	; 0x48
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060fe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006100:	f001 fea8 	bl	8007e54 <HAL_TIM_ConfigClockSource>
 8006104:	b108      	cbz	r0, 800610a <main+0x152>
 8006106:	b672      	cpsid	i
  while (1)
 8006108:	e7fe      	b.n	8006108 <main+0x150>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800610a:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800610e:	a910      	add	r1, sp, #64	; 0x40
 8006110:	4628      	mov	r0, r5
 8006112:	f001 ff33 	bl	8007f7c <HAL_TIMEx_MasterConfigSynchronization>
 8006116:	b108      	cbz	r0, 800611c <main+0x164>
 8006118:	b672      	cpsid	i
  while (1)
 800611a:	e7fe      	b.n	800611a <main+0x162>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800611c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  hrtc.Instance = RTC;
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <main+0x1a4>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006122:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <main+0x1a8>)
 8006124:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8006128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800612c:	6083      	str	r3, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800612e:	f001 fbab 	bl	8007888 <HAL_RTC_Init>
 8006132:	4606      	mov	r6, r0
 8006134:	b1c0      	cbz	r0, 8006168 <main+0x1b0>
 8006136:	b672      	cpsid	i
  while (1)
 8006138:	e7fe      	b.n	8006138 <main+0x180>
 800613a:	bf00      	nop
 800613c:	20002428 	.word	0x20002428
 8006140:	40021000 	.word	0x40021000
 8006144:	40010800 	.word	0x40010800
 8006148:	40010c00 	.word	0x40010c00
 800614c:	10110000 	.word	0x10110000
 8006150:	20002480 	.word	0x20002480
 8006154:	40013000 	.word	0x40013000
 8006158:	200024d8 	.word	0x200024d8
 800615c:	20002460 	.word	0x20002460
 8006160:	40002800 	.word	0x40002800
 8006164:	20002478 	.word	0x20002478
  relay[0] = relay_init(RELAY1_PIN_GPIO_Port, RELAY1_PIN_Pin, relay_invert[0]);
 8006168:	ad0c      	add	r5, sp, #48	; 0x30
 800616a:	f8df 9280 	ldr.w	r9, [pc, #640]	; 80063ec <main+0x434>
 800616e:	4628      	mov	r0, r5
 8006170:	f89a 3000 	ldrb.w	r3, [sl]
 8006174:	2210      	movs	r2, #16
 8006176:	498c      	ldr	r1, [pc, #560]	; (80063a8 <main+0x3f0>)
  *channel1 = clock_channel_init(&relay[0], time_channel1_inclusion, time_channel1_shutdown);
 8006178:	f8df b274 	ldr.w	fp, [pc, #628]	; 80063f0 <main+0x438>
  relay[0] = relay_init(RELAY1_PIN_GPIO_Port, RELAY1_PIN_Pin, relay_invert[0]);
 800617c:	f7fa fcf5 	bl	8000b6a <relay_init>
 8006180:	e895 0003 	ldmia.w	r5, {r0, r1}
  relay[1] = relay_init(RELAY2_PIN_GPIO_Port, RELAY2_PIN_Pin, relay_invert[1]);
 8006184:	f89a 3001 	ldrb.w	r3, [sl, #1]
  relay[0] = relay_init(RELAY1_PIN_GPIO_Port, RELAY1_PIN_Pin, relay_invert[0]);
 8006188:	e889 0003 	stmia.w	r9, {r0, r1}
  relay[1] = relay_init(RELAY2_PIN_GPIO_Port, RELAY2_PIN_Pin, relay_invert[1]);
 800618c:	2208      	movs	r2, #8
 800618e:	4628      	mov	r0, r5
 8006190:	4985      	ldr	r1, [pc, #532]	; (80063a8 <main+0x3f0>)
 8006192:	f7fa fcea 	bl	8000b6a <relay_init>
 8006196:	e895 0003 	ldmia.w	r5, {r0, r1}
  *channel1 = clock_channel_init(&relay[0], time_channel1_inclusion, time_channel1_shutdown);
 800619a:	f8db 3000 	ldr.w	r3, [fp]
  relay[1] = relay_init(RELAY2_PIN_GPIO_Port, RELAY2_PIN_Pin, relay_invert[1]);
 800619e:	f109 0a08 	add.w	sl, r9, #8
 80061a2:	e88a 0003 	stmia.w	sl, {r0, r1}
  *channel1 = clock_channel_init(&relay[0], time_channel1_inclusion, time_channel1_shutdown);
 80061a6:	4981      	ldr	r1, [pc, #516]	; (80063ac <main+0x3f4>)
 80061a8:	461d      	mov	r5, r3
 80061aa:	ab08      	add	r3, sp, #32
 80061ac:	7848      	ldrb	r0, [r1, #1]
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	780b      	ldrb	r3, [r1, #0]
 80061b2:	4a7f      	ldr	r2, [pc, #508]	; (80063b0 <main+0x3f8>)
 80061b4:	7889      	ldrb	r1, [r1, #2]
 80061b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80061ba:	f892 c001 	ldrb.w	ip, [r2, #1]
 80061be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80061c2:	7811      	ldrb	r1, [r2, #0]
 80061c4:	7892      	ldrb	r2, [r2, #2]
 80061c6:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80061ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80061ce:	4632      	mov	r2, r6
 80061d0:	f006 407f 	and.w	r0, r6, #4278190080	; 0xff000000
 80061d4:	f361 0217 	bfi	r2, r1, #0, #24
 80061d8:	4303      	orrs	r3, r0
 80061da:	4649      	mov	r1, r9
 80061dc:	9807      	ldr	r0, [sp, #28]
 80061de:	f7fa fc19 	bl	8000a14 <clock_channel_init>
  *channel2 = clock_channel_init(&relay[1], time_channel2_inclusion, time_channel2_shutdown);
 80061e2:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80063f4 <main+0x43c>
  *channel1 = clock_channel_init(&relay[0], time_channel1_inclusion, time_channel1_shutdown);
 80061e6:	9b07      	ldr	r3, [sp, #28]
 80061e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  *channel2 = clock_channel_init(&relay[1], time_channel2_inclusion, time_channel2_shutdown);
 80061ee:	f8d9 3000 	ldr.w	r3, [r9]
 80061f2:	4970      	ldr	r1, [pc, #448]	; (80063b4 <main+0x3fc>)
 80061f4:	461d      	mov	r5, r3
 80061f6:	7848      	ldrb	r0, [r1, #1]
 80061f8:	780b      	ldrb	r3, [r1, #0]
 80061fa:	4a6f      	ldr	r2, [pc, #444]	; (80063b8 <main+0x400>)
 80061fc:	7889      	ldrb	r1, [r1, #2]
 80061fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006202:	f892 c001 	ldrb.w	ip, [r2, #1]
 8006206:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800620a:	7811      	ldrb	r1, [r2, #0]
 800620c:	7892      	ldrb	r2, [r2, #2]
 800620e:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 8006212:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006216:	4632      	mov	r2, r6
 8006218:	f006 407f 	and.w	r0, r6, #4278190080	; 0xff000000
 800621c:	f361 0217 	bfi	r2, r1, #0, #24
 8006220:	4303      	orrs	r3, r0
 8006222:	4651      	mov	r1, sl
 8006224:	9807      	ldr	r0, [sp, #28]
 8006226:	f7fa fbf5 	bl	8000a14 <clock_channel_init>
 800622a:	9b07      	ldr	r3, [sp, #28]
 800622c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800622e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  channel2->deviation_sec = 2;
 8006232:	f8d9 2000 	ldr.w	r2, [r9]
  channel1->deviation_sec = 2;
 8006236:	f8db 3000 	ldr.w	r3, [fp]
  relay_set_state(channel1->relay, channel1->state);
 800623a:	4639      	mov	r1, r7
  channel1->deviation_sec = 2;
 800623c:	f883 8006 	strb.w	r8, [r3, #6]
  channel2->deviation_sec = 2;
 8006240:	f882 8006 	strb.w	r8, [r2, #6]
  relay_set_state(channel1->relay, channel1->state);
 8006244:	6898      	ldr	r0, [r3, #8]
  channel1->state = true;
 8006246:	731f      	strb	r7, [r3, #12]
  channel2->state = true;
 8006248:	7317      	strb	r7, [r2, #12]
  relay_set_state(channel1->relay, channel1->state);
 800624a:	f7fa fca3 	bl	8000b94 <relay_set_state>
  relay_set_state(channel2->relay, channel2->state);
 800624e:	f8d9 3000 	ldr.w	r3, [r9]
 8006252:	7b19      	ldrb	r1, [r3, #12]
 8006254:	6898      	ldr	r0, [r3, #8]
 8006256:	f7fa fc9d 	bl	8000b94 <relay_set_state>
  Init_lora_module(&hspi1);
 800625a:	4620      	mov	r0, r4
 800625c:	f7fc fc76 	bl	8002b4c <Init_lora_module>
  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8006260:	a14f      	add	r1, pc, #316	; (adr r1, 80063a0 <main+0x3e8>)
 8006262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006266:	234a      	movs	r3, #74	; 0x4a
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	2300      	movs	r3, #0
 800626c:	4a53      	ldr	r2, [pc, #332]	; (80063bc <main+0x404>)
 800626e:	4c54      	ldr	r4, [pc, #336]	; (80063c0 <main+0x408>)
 8006270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006274:	2308      	movs	r3, #8
 8006276:	463a      	mov	r2, r7
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	230e      	movs	r3, #14
 800627c:	f7fc fc6c 	bl	8002b58 <Begin_lora_module>
 8006280:	7020      	strb	r0, [r4, #0]
  if(LoRa_begin_result == 0) {
 8006282:	2800      	cmp	r0, #0
 8006284:	d04b      	beq.n	800631e <main+0x366>
  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_RESET);
 8006286:	2200      	movs	r2, #0
 8006288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800628c:	484d      	ldr	r0, [pc, #308]	; (80063c4 <main+0x40c>)
 800628e:	f000 fd0b 	bl	8006ca8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8006292:	2200      	movs	r2, #0
 8006294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006298:	484a      	ldr	r0, [pc, #296]	; (80063c4 <main+0x40c>)
 800629a:	f000 fd05 	bl	8006ca8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 800629e:	2200      	movs	r2, #0
 80062a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062a4:	4847      	ldr	r0, [pc, #284]	; (80063c4 <main+0x40c>)
 80062a6:	f000 fcff 	bl	8006ca8 <HAL_GPIO_WritePin>
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <main+0x410>)
  HAL_RTC_SetTime(&hrtc, &null_time, RTC_FORMAT_BIN);
 80062ac:	2200      	movs	r2, #0
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062ae:	781b      	ldrb	r3, [r3, #0]
  HAL_RTC_SetTime(&hrtc, &null_time, RTC_FORMAT_BIN);
 80062b0:	a912      	add	r1, sp, #72	; 0x48
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062b2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 80062b6:	4b45      	ldr	r3, [pc, #276]	; (80063cc <main+0x414>)
  HAL_RTC_SetTime(&hrtc, &null_time, RTC_FORMAT_BIN);
 80062b8:	4845      	ldr	r0, [pc, #276]	; (80063d0 <main+0x418>)
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062ba:	781b      	ldrb	r3, [r3, #0]
	if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) == HAL_OK) {
 80062bc:	4d44      	ldr	r5, [pc, #272]	; (80063d0 <main+0x418>)
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062be:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 80062c2:	4b44      	ldr	r3, [pc, #272]	; (80063d4 <main+0x41c>)
		hour = time.Hours;
 80062c4:	4e44      	ldr	r6, [pc, #272]	; (80063d8 <main+0x420>)
  RTC_TimeTypeDef null_time = {.Hours=build_hour, .Minutes=build_min, .Seconds=build_sec};
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
  HAL_RTC_SetTime(&hrtc, &null_time, RTC_FORMAT_BIN);
 80062cc:	f001 f92f 	bl	800752e <HAL_RTC_SetTime>
  alarm_rtc();
 80062d0:	f7ff fe28 	bl	8005f24 <alarm_rtc>
  DevicesGetValues();
 80062d4:	f7ff fe5a 	bl	8005f8c <DevicesGetValues>
  Main_cpp(&devices_data);
 80062d8:	4840      	ldr	r0, [pc, #256]	; (80063dc <main+0x424>)
 80062da:	f7fc fc81 	bl	8002be0 <Main_cpp>
		min = time.Minutes;
 80062de:	4f40      	ldr	r7, [pc, #256]	; (80063e0 <main+0x428>)
	if (HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN) == HAL_OK) {
 80062e0:	2200      	movs	r2, #0
 80062e2:	4628      	mov	r0, r5
 80062e4:	a910      	add	r1, sp, #64	; 0x40
 80062e6:	f001 f973 	bl	80075d0 <HAL_RTC_GetTime>
 80062ea:	b948      	cbnz	r0, 8006300 <main+0x348>
		hour = time.Hours;
 80062ec:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		sec = time.Seconds;
 80062f0:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
		hour = time.Hours;
 80062f4:	7033      	strb	r3, [r6, #0]
		min = time.Minutes;
 80062f6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80062fa:	703b      	strb	r3, [r7, #0]
		sec = time.Seconds;
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <main+0x42c>)
 80062fe:	701a      	strb	r2, [r3, #0]
	if(change_state) {
 8006300:	4c39      	ldr	r4, [pc, #228]	; (80063e8 <main+0x430>)
	HAL_Delay(1);
 8006302:	2001      	movs	r0, #1
 8006304:	f000 f9fe 	bl	8006704 <HAL_Delay>
	if(change_state) {
 8006308:	7823      	ldrb	r3, [r4, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0e8      	beq.n	80062e0 <main+0x328>
		DevicesGetValues();
 800630e:	f7ff fe3d 	bl	8005f8c <DevicesGetValues>
		Main_cpp(&devices_data);
 8006312:	4832      	ldr	r0, [pc, #200]	; (80063dc <main+0x424>)
 8006314:	f7fc fc64 	bl	8002be0 <Main_cpp>
		change_state = false;
 8006318:	2300      	movs	r3, #0
 800631a:	7023      	strb	r3, [r4, #0]
 800631c:	e7df      	b.n	80062de <main+0x326>
 800631e:	2505      	movs	r5, #5
		  HAL_GPIO_TogglePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin);
 8006320:	4e28      	ldr	r6, [pc, #160]	; (80063c4 <main+0x40c>)
 8006322:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006326:	4630      	mov	r0, r6
 8006328:	f000 fcc3 	bl	8006cb2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin);
 800632c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006330:	4630      	mov	r0, r6
 8006332:	f000 fcbe 	bl	8006cb2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin);
 8006336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800633a:	4630      	mov	r0, r6
 800633c:	f000 fcb9 	bl	8006cb2 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8006340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006344:	f000 f9de 	bl	8006704 <HAL_Delay>
	  for (int i = 0; i < 5; ++i) {
 8006348:	3d01      	subs	r5, #1
 800634a:	d1ea      	bne.n	8006322 <main+0x36a>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800634c:	f20f 0950 	addw	r9, pc, #80	; 0x50
 8006350:	e9d9 8900 	ldrd	r8, r9, [r9]
 8006354:	2700      	movs	r7, #0
 8006356:	4e19      	ldr	r6, [pc, #100]	; (80063bc <main+0x404>)
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8006358:	4d1a      	ldr	r5, [pc, #104]	; (80063c4 <main+0x40c>)
	  while(LoRa_begin_result != 0) {
 800635a:	7823      	ldrb	r3, [r4, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d092      	beq.n	8006286 <main+0x2ce>
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 8006360:	234a      	movs	r3, #74	; 0x4a
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	2308      	movs	r3, #8
 8006366:	4649      	mov	r1, r9
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	230e      	movs	r3, #14
 800636e:	4640      	mov	r0, r8
 8006370:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006374:	f7fc fbf0 	bl	8002b58 <Begin_lora_module>
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 8006378:	2201      	movs	r2, #1
		  LoRa_begin_result = Begin_lora_module(BAND, true, 14, 8, 250E3, 0x4A);
 800637a:	7020      	strb	r0, [r4, #0]
			  HAL_GPIO_WritePin(LED1_PIN_GPIO_Port, LED1_PIN_Pin, GPIO_PIN_SET);
 800637c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006380:	4628      	mov	r0, r5
 8006382:	f000 fc91 	bl	8006ca8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED2_PIN_GPIO_Port, LED2_PIN_Pin, GPIO_PIN_RESET);
 8006386:	4628      	mov	r0, r5
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800638e:	f000 fc8b 	bl	8006ca8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_PIN_GPIO_Port, LED3_PIN_Pin, GPIO_PIN_RESET);
 8006392:	2200      	movs	r2, #0
 8006394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006398:	4628      	mov	r0, r5
 800639a:	f000 fc85 	bl	8006ca8 <HAL_GPIO_WritePin>
 800639e:	e7dc      	b.n	800635a <main+0x3a2>
 80063a0:	19e6b4f0 	.word	0x19e6b4f0
 80063a4:	00000000 	.word	0x00000000
 80063a8:	40010c00 	.word	0x40010c00
 80063ac:	2000004f 	.word	0x2000004f
 80063b0:	2000004c 	.word	0x2000004c
 80063b4:	20000055 	.word	0x20000055
 80063b8:	20000052 	.word	0x20000052
 80063bc:	0003d090 	.word	0x0003d090
 80063c0:	20002424 	.word	0x20002424
 80063c4:	40010800 	.word	0x40010800
 80063c8:	20000040 	.word	0x20000040
 80063cc:	20000041 	.word	0x20000041
 80063d0:	20002460 	.word	0x20002460
 80063d4:	20002425 	.word	0x20002425
 80063d8:	20002434 	.word	0x20002434
 80063dc:	20002474 	.word	0x20002474
 80063e0:	20002435 	.word	0x20002435
 80063e4:	20002436 	.word	0x20002436
 80063e8:	20002426 	.word	0x20002426
 80063ec:	20002450 	.word	0x20002450
 80063f0:	20000044 	.word	0x20000044
 80063f4:	20000048 	.word	0x20000048

080063f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_MspInit+0x3c>)
{
 80063fa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	619a      	str	r2, [r3, #24]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	f002 0201 	and.w	r2, r2, #1
 800640a:	9200      	str	r2, [sp, #0]
 800640c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006414:	61da      	str	r2, [r3, #28]
 8006416:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006418:	4a07      	ldr	r2, [pc, #28]	; (8006438 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006422:	6853      	ldr	r3, [r2, #4]
 8006424:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006428:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800642c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800642e:	b002      	add	sp, #8
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	40010000 	.word	0x40010000

0800643c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800643c:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <HAL_RTC_MspInit+0x44>)
 8006440:	6802      	ldr	r2, [r0, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d119      	bne.n	800647a <HAL_RTC_MspInit+0x3e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8006446:	f000 fc49 	bl	8006cdc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <HAL_RTC_MspInit+0x48>)
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800644c:	2029      	movs	r0, #41	; 0x29
    __HAL_RCC_BKP_CLK_ENABLE();
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006454:	61da      	str	r2, [r3, #28]
    __HAL_RCC_RTC_ENABLE();
 8006456:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RTC_MspInit+0x4c>)
 8006464:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8006466:	2200      	movs	r2, #0
 8006468:	4611      	mov	r1, r2
 800646a:	f000 f96f 	bl	800674c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800646e:	2029      	movs	r0, #41	; 0x29
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006470:	b003      	add	sp, #12
 8006472:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006476:	f000 b99b 	b.w	80067b0 <HAL_NVIC_EnableIRQ>
}
 800647a:	b003      	add	sp, #12
 800647c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006480:	40002800 	.word	0x40002800
 8006484:	40021000 	.word	0x40021000
 8006488:	4242043c 	.word	0x4242043c

0800648c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800648c:	b510      	push	{r4, lr}
 800648e:	4604      	mov	r4, r0
 8006490:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006492:	2210      	movs	r2, #16
 8006494:	2100      	movs	r1, #0
 8006496:	a802      	add	r0, sp, #8
 8006498:	f001 fe12 	bl	80080c0 <memset>
  if(hspi->Instance==SPI1)
 800649c:	6822      	ldr	r2, [r4, #0]
 800649e:	4b1a      	ldr	r3, [pc, #104]	; (8006508 <HAL_SPI_MspInit+0x7c>)
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d12e      	bne.n	8006502 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064a4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80064a8:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064aa:	4818      	ldr	r0, [pc, #96]	; (800650c <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064b0:	619a      	str	r2, [r3, #24]
 80064b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80064ba:	9200      	str	r2, [sp, #0]
 80064bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064be:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064c0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064c2:	f042 0204 	orr.w	r2, r2, #4
 80064c6:	619a      	str	r2, [r3, #24]
 80064c8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ca:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d4:	2302      	movs	r3, #2
 80064d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064da:	2303      	movs	r3, #3
 80064dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064de:	f000 fb01 	bl	8006ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064e2:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064e4:	4809      	ldr	r0, [pc, #36]	; (800650c <HAL_SPI_MspInit+0x80>)
 80064e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064e8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ec:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ee:	f000 faf9 	bl	8006ae4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80064f2:	2023      	movs	r0, #35	; 0x23
 80064f4:	4622      	mov	r2, r4
 80064f6:	4621      	mov	r1, r4
 80064f8:	f000 f928 	bl	800674c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80064fc:	2023      	movs	r0, #35	; 0x23
 80064fe:	f000 f957 	bl	80067b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006502:	b006      	add	sp, #24
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	40013000 	.word	0x40013000
 800650c:	40010800 	.word	0x40010800

08006510 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8006510:	6803      	ldr	r3, [r0, #0]
{
 8006512:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8006514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006518:	d10d      	bne.n	8006536 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800651a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	61da      	str	r2, [r3, #28]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006530:	b003      	add	sp, #12
 8006532:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 8006536:	4a0c      	ldr	r2, [pc, #48]	; (8006568 <HAL_TIM_Base_MspInit+0x58>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d1f9      	bne.n	8006530 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800653e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	f042 0204 	orr.w	r2, r2, #4
 8006546:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006548:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800654a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800654c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006556:	f000 f8f9 	bl	800674c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800655a:	201e      	movs	r0, #30
}
 800655c:	b003      	add	sp, #12
 800655e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006562:	f000 b925 	b.w	80067b0 <HAL_NVIC_EnableIRQ>
 8006566:	bf00      	nop
 8006568:	40000800 	.word	0x40000800
 800656c:	40021000 	.word	0x40021000

08006570 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006570:	e7fe      	b.n	8006570 <NMI_Handler>

08006572 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006572:	e7fe      	b.n	8006572 <HardFault_Handler>

08006574 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006574:	e7fe      	b.n	8006574 <MemManage_Handler>

08006576 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006576:	e7fe      	b.n	8006576 <BusFault_Handler>

08006578 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006578:	e7fe      	b.n	8006578 <UsageFault_Handler>

0800657a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800657a:	4770      	bx	lr

0800657c <DebugMon_Handler>:
 800657c:	4770      	bx	lr

0800657e <PendSV_Handler>:
 800657e:	4770      	bx	lr

08006580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006580:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006582:	f000 f8ad 	bl	80066e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ++hal_tick;
 8006586:	4a02      	ldr	r2, [pc, #8]	; (8006590 <SysTick_Handler+0x10>)
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800658e:	bd08      	pop	{r3, pc}
 8006590:	20002438 	.word	0x20002438

08006594 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006594:	2004      	movs	r0, #4
 8006596:	f000 bb95 	b.w	8006cc4 <HAL_GPIO_EXTI_IRQHandler>
	...

0800659c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <SPI1_IRQHandler+0x8>)
 800659e:	f001 bb6d 	b.w	8007c7c <HAL_SPI_IRQHandler>
 80065a2:	bf00      	nop
 80065a4:	20002480 	.word	0x20002480

080065a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80065a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80065ac:	f000 bb8a 	b.w	8006cc4 <HAL_GPIO_EXTI_IRQHandler>

080065b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80065b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80065b2:	4803      	ldr	r0, [pc, #12]	; (80065c0 <RTC_Alarm_IRQHandler+0x10>)
 80065b4:	f001 f934 	bl	8007820 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
  alarm_rtc();
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80065b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  alarm_rtc();
 80065bc:	f7ff bcb2 	b.w	8005f24 <alarm_rtc>
 80065c0:	20002460 	.word	0x20002460

080065c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80065c4:	2001      	movs	r0, #1
 80065c6:	4770      	bx	lr

080065c8 <_kill>:

int _kill(int pid, int sig)
{
 80065c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80065ca:	f001 fd31 	bl	8008030 <__errno>
 80065ce:	2316      	movs	r3, #22
 80065d0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80065d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d6:	bd08      	pop	{r3, pc}

080065d8 <_exit>:

void _exit (int status)
{
 80065d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80065da:	f001 fd29 	bl	8008030 <__errno>
 80065de:	2316      	movs	r3, #22
 80065e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80065e2:	e7fe      	b.n	80065e2 <_exit+0xa>

080065e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <_sbrk+0x30>)
{
 80065e6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80065e8:	6819      	ldr	r1, [r3, #0]
{
 80065ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80065ec:	b909      	cbnz	r1, 80065f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80065ee:	490a      	ldr	r1, [pc, #40]	; (8006618 <_sbrk+0x34>)
 80065f0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	4909      	ldr	r1, [pc, #36]	; (800661c <_sbrk+0x38>)
 80065f6:	4c0a      	ldr	r4, [pc, #40]	; (8006620 <_sbrk+0x3c>)
 80065f8:	4402      	add	r2, r0
 80065fa:	1b09      	subs	r1, r1, r4
 80065fc:	428a      	cmp	r2, r1
 80065fe:	d906      	bls.n	800660e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8006600:	f001 fd16 	bl	8008030 <__errno>
 8006604:	230c      	movs	r3, #12
 8006606:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800660c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800660e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8006610:	e7fc      	b.n	800660c <_sbrk+0x28>
 8006612:	bf00      	nop
 8006614:	2000243c 	.word	0x2000243c
 8006618:	20002578 	.word	0x20002578
 800661c:	20005000 	.word	0x20005000
 8006620:	00000400 	.word	0x00000400

08006624 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006624:	4770      	bx	lr
	...

08006628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006628:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800662a:	e003      	b.n	8006634 <LoopCopyDataInit>

0800662c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800662e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006630:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006632:	3104      	adds	r1, #4

08006634 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006634:	480a      	ldr	r0, [pc, #40]	; (8006660 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006638:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800663a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800663c:	d3f6      	bcc.n	800662c <CopyDataInit>
  ldr r2, =_sbss
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006640:	e002      	b.n	8006648 <LoopFillZerobss>

08006642 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006642:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006644:	f842 3b04 	str.w	r3, [r2], #4

08006648 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800664a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800664c:	d3f9      	bcc.n	8006642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800664e:	f7ff ffe9 	bl	8006624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006652:	f001 fcf3 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006656:	f7ff fcaf 	bl	8005fb8 <main>
  bx lr
 800665a:	4770      	bx	lr
  ldr r3, =_sidata
 800665c:	08008408 	.word	0x08008408
  ldr r0, =_sdata
 8006660:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006664:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 8006668:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 800666c:	20002578 	.word	0x20002578

08006670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006670:	e7fe      	b.n	8006670 <ADC1_2_IRQHandler>
	...

08006674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006674:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <HAL_InitTick+0x3c>)
{
 8006678:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800667a:	7818      	ldrb	r0, [r3, #0]
 800667c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006680:	fbb3 f3f0 	udiv	r3, r3, r0
 8006684:	4a0b      	ldr	r2, [pc, #44]	; (80066b4 <HAL_InitTick+0x40>)
 8006686:	6810      	ldr	r0, [r2, #0]
 8006688:	fbb0 f0f3 	udiv	r0, r0, r3
 800668c:	f000 f89e 	bl	80067cc <HAL_SYSTICK_Config>
 8006690:	4604      	mov	r4, r0
 8006692:	b958      	cbnz	r0, 80066ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006694:	2d0f      	cmp	r5, #15
 8006696:	d809      	bhi.n	80066ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006698:	4602      	mov	r2, r0
 800669a:	4629      	mov	r1, r5
 800669c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a0:	f000 f854 	bl	800674c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066a4:	4620      	mov	r0, r4
 80066a6:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <HAL_InitTick+0x44>)
 80066a8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80066ac:	2001      	movs	r0, #1
 80066ae:	e7fc      	b.n	80066aa <HAL_InitTick+0x36>
 80066b0:	2000005c 	.word	0x2000005c
 80066b4:	20000058 	.word	0x20000058
 80066b8:	20000060 	.word	0x20000060

080066bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066bc:	4a07      	ldr	r2, [pc, #28]	; (80066dc <HAL_Init+0x20>)
{
 80066be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066c4:	f043 0310 	orr.w	r3, r3, #16
 80066c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066ca:	f000 f82d 	bl	8006728 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80066ce:	2000      	movs	r0, #0
 80066d0:	f7ff ffd0 	bl	8006674 <HAL_InitTick>
  HAL_MspInit();
 80066d4:	f7ff fe90 	bl	80063f8 <HAL_MspInit>
}
 80066d8:	2000      	movs	r0, #0
 80066da:	bd08      	pop	{r3, pc}
 80066dc:	40022000 	.word	0x40022000

080066e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80066e0:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <HAL_IncTick+0x10>)
 80066e2:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_IncTick+0x14>)
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	440b      	add	r3, r1
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20002540 	.word	0x20002540
 80066f4:	2000005c 	.word	0x2000005c

080066f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80066f8:	4b01      	ldr	r3, [pc, #4]	; (8006700 <HAL_GetTick+0x8>)
 80066fa:	6818      	ldr	r0, [r3, #0]
}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20002540 	.word	0x20002540

08006704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006708:	f7ff fff6 	bl	80066f8 <HAL_GetTick>
 800670c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800670e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006710:	bf1e      	ittt	ne
 8006712:	4b04      	ldrne	r3, [pc, #16]	; (8006724 <HAL_Delay+0x20>)
 8006714:	781b      	ldrbne	r3, [r3, #0]
 8006716:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006718:	f7ff ffee 	bl	80066f8 <HAL_GetTick>
 800671c:	1b43      	subs	r3, r0, r5
 800671e:	42a3      	cmp	r3, r4
 8006720:	d3fa      	bcc.n	8006718 <HAL_Delay+0x14>
  {
  }
}
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	2000005c 	.word	0x2000005c

08006728 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006728:	4907      	ldr	r1, [pc, #28]	; (8006748 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800672a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800672c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800672e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006736:	0412      	lsls	r2, r2, #16
 8006738:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800673a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800673c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006744:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006746:	4770      	bx	lr
 8006748:	e000ed00 	.word	0xe000ed00

0800674c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800674c:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800674e:	b530      	push	{r4, r5, lr}
 8006750:	68dc      	ldr	r4, [r3, #12]
 8006752:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006756:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800675a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800675c:	2b04      	cmp	r3, #4
 800675e:	bf28      	it	cs
 8006760:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006762:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006768:	bf98      	it	ls
 800676a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006770:	bf88      	it	hi
 8006772:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006774:	ea21 0303 	bic.w	r3, r1, r3
 8006778:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800677a:	fa05 f404 	lsl.w	r4, r5, r4
 800677e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8006782:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006784:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006788:	bfac      	ite	ge
 800678a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800678e:	4a07      	ldrlt	r2, [pc, #28]	; (80067ac <HAL_NVIC_SetPriority+0x60>)
 8006790:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006794:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006796:	bfab      	itete	ge
 8006798:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80067a6:	bd30      	pop	{r4, r5, pc}
 80067a8:	e000ed00 	.word	0xe000ed00
 80067ac:	e000ed14 	.word	0xe000ed14

080067b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80067b0:	2800      	cmp	r0, #0
 80067b2:	db08      	blt.n	80067c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067b4:	2301      	movs	r3, #1
 80067b6:	0942      	lsrs	r2, r0, #5
 80067b8:	f000 001f 	and.w	r0, r0, #31
 80067bc:	fa03 f000 	lsl.w	r0, r3, r0
 80067c0:	4b01      	ldr	r3, [pc, #4]	; (80067c8 <HAL_NVIC_EnableIRQ+0x18>)
 80067c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80067c6:	4770      	bx	lr
 80067c8:	e000e100 	.word	0xe000e100

080067cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067cc:	3801      	subs	r0, #1
 80067ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80067d2:	d20a      	bcs.n	80067ea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067d8:	4a06      	ldr	r2, [pc, #24]	; (80067f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80067ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e000e010 	.word	0xe000e010
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80067f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067fa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d003      	beq.n	800680a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006802:	2304      	movs	r3, #4
 8006804:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8006806:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8006808:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800680a:	6803      	ldr	r3, [r0, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f022 020e 	bic.w	r2, r2, #14
 8006812:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <HAL_DMA_Abort_IT+0x84>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01c      	beq.n	800685c <HAL_DMA_Abort_IT+0x64>
 8006822:	3214      	adds	r2, #20
 8006824:	4293      	cmp	r3, r2
 8006826:	d01b      	beq.n	8006860 <HAL_DMA_Abort_IT+0x68>
 8006828:	3214      	adds	r2, #20
 800682a:	4293      	cmp	r3, r2
 800682c:	d01a      	beq.n	8006864 <HAL_DMA_Abort_IT+0x6c>
 800682e:	3214      	adds	r2, #20
 8006830:	4293      	cmp	r3, r2
 8006832:	d01a      	beq.n	800686a <HAL_DMA_Abort_IT+0x72>
 8006834:	3214      	adds	r2, #20
 8006836:	4293      	cmp	r3, r2
 8006838:	d01a      	beq.n	8006870 <HAL_DMA_Abort_IT+0x78>
 800683a:	3214      	adds	r2, #20
 800683c:	4293      	cmp	r3, r2
 800683e:	bf0c      	ite	eq
 8006840:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006844:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8006848:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <HAL_DMA_Abort_IT+0x88>)
 800684a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800684c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006850:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006852:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006854:	b17b      	cbz	r3, 8006876 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8006856:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006858:	2000      	movs	r0, #0
 800685a:	e7d5      	b.n	8006808 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800685c:	2301      	movs	r3, #1
 800685e:	e7f3      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006860:	2310      	movs	r3, #16
 8006862:	e7f1      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006868:	e7ee      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 800686a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686e:	e7eb      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006874:	e7e8      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8006876:	4618      	mov	r0, r3
 8006878:	e7c6      	b.n	8006808 <HAL_DMA_Abort_IT+0x10>
 800687a:	bf00      	nop
 800687c:	40020008 	.word	0x40020008
 8006880:	40020000 	.word	0x40020000

08006884 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006884:	4a11      	ldr	r2, [pc, #68]	; (80068cc <FLASH_SetErrorCode+0x48>)
 8006886:	68d3      	ldr	r3, [r2, #12]
 8006888:	f013 0310 	ands.w	r3, r3, #16
 800688c:	d005      	beq.n	800689a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800688e:	4910      	ldr	r1, [pc, #64]	; (80068d0 <FLASH_SetErrorCode+0x4c>)
 8006890:	69cb      	ldr	r3, [r1, #28]
 8006892:	f043 0302 	orr.w	r3, r3, #2
 8006896:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8006898:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800689a:	68d2      	ldr	r2, [r2, #12]
 800689c:	0750      	lsls	r0, r2, #29
 800689e:	d506      	bpl.n	80068ae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80068a0:	490b      	ldr	r1, [pc, #44]	; (80068d0 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80068a2:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80068a6:	69ca      	ldr	r2, [r1, #28]
 80068a8:	f042 0201 	orr.w	r2, r2, #1
 80068ac:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <FLASH_SetErrorCode+0x48>)
 80068b0:	69d1      	ldr	r1, [r2, #28]
 80068b2:	07c9      	lsls	r1, r1, #31
 80068b4:	d508      	bpl.n	80068c8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80068b6:	4806      	ldr	r0, [pc, #24]	; (80068d0 <FLASH_SetErrorCode+0x4c>)
 80068b8:	69c1      	ldr	r1, [r0, #28]
 80068ba:	f041 0104 	orr.w	r1, r1, #4
 80068be:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80068c0:	69d1      	ldr	r1, [r2, #28]
 80068c2:	f021 0101 	bic.w	r1, r1, #1
 80068c6:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80068c8:	60d3      	str	r3, [r2, #12]
}  
 80068ca:	4770      	bx	lr
 80068cc:	40022000 	.word	0x40022000
 80068d0:	20002548 	.word	0x20002548

080068d4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_FLASH_Unlock+0x1c>)
 80068d6:	6918      	ldr	r0, [r3, #16]
 80068d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068dc:	d007      	beq.n	80068ee <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068de:	4a05      	ldr	r2, [pc, #20]	; (80068f4 <HAL_FLASH_Unlock+0x20>)
 80068e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068e2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80068e6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80068e8:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80068ea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80068ee:	4770      	bx	lr
 80068f0:	40022000 	.word	0x40022000
 80068f4:	45670123 	.word	0x45670123

080068f8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80068f8:	4a03      	ldr	r2, [pc, #12]	; (8006908 <HAL_FLASH_Lock+0x10>)
}
 80068fa:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80068fc:	6913      	ldr	r3, [r2, #16]
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	6113      	str	r3, [r2, #16]
}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40022000 	.word	0x40022000

0800690c <FLASH_WaitForLastOperation>:
{
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006910:	f7ff fef2 	bl	80066f8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006914:	4d11      	ldr	r5, [pc, #68]	; (800695c <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8006916:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006918:	462e      	mov	r6, r5
 800691a:	68eb      	ldr	r3, [r5, #12]
 800691c:	07d8      	lsls	r0, r3, #31
 800691e:	d412      	bmi.n	8006946 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006920:	68eb      	ldr	r3, [r5, #12]
 8006922:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006924:	bf44      	itt	mi
 8006926:	2320      	movmi	r3, #32
 8006928:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800692a:	68f3      	ldr	r3, [r6, #12]
 800692c:	06da      	lsls	r2, r3, #27
 800692e:	d406      	bmi.n	800693e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006930:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006932:	07db      	lsls	r3, r3, #31
 8006934:	d403      	bmi.n	800693e <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006936:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006938:	f010 0004 	ands.w	r0, r0, #4
 800693c:	d007      	beq.n	800694e <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800693e:	f7ff ffa1 	bl	8006884 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006942:	2001      	movs	r0, #1
 8006944:	e003      	b.n	800694e <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8006946:	1c63      	adds	r3, r4, #1
 8006948:	d0e7      	beq.n	800691a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800694a:	b90c      	cbnz	r4, 8006950 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 800694c:	2003      	movs	r0, #3
}
 800694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006950:	f7ff fed2 	bl	80066f8 <HAL_GetTick>
 8006954:	1bc0      	subs	r0, r0, r7
 8006956:	42a0      	cmp	r0, r4
 8006958:	d9df      	bls.n	800691a <FLASH_WaitForLastOperation+0xe>
 800695a:	e7f7      	b.n	800694c <FLASH_WaitForLastOperation+0x40>
 800695c:	40022000 	.word	0x40022000

08006960 <HAL_FLASH_Program>:
{
 8006960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8006964:	4e25      	ldr	r6, [pc, #148]	; (80069fc <HAL_FLASH_Program+0x9c>)
{
 8006966:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8006968:	7e33      	ldrb	r3, [r6, #24]
{
 800696a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800696c:	2b01      	cmp	r3, #1
{
 800696e:	4688      	mov	r8, r1
 8006970:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8006972:	d040      	beq.n	80069f6 <HAL_FLASH_Program+0x96>
 8006974:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006976:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800697a:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800697c:	f7ff ffc6 	bl	800690c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8006980:	bba8      	cbnz	r0, 80069ee <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006982:	2d01      	cmp	r5, #1
 8006984:	d003      	beq.n	800698e <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8006986:	2d02      	cmp	r5, #2
 8006988:	bf0c      	ite	eq
 800698a:	2502      	moveq	r5, #2
 800698c:	2504      	movne	r5, #4
 800698e:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006992:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006994:	f8df b068 	ldr.w	fp, [pc, #104]	; 8006a00 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006998:	ea4f 140a 	mov.w	r4, sl, lsl #4
 800699c:	f1c4 0120 	rsb	r1, r4, #32
 80069a0:	f1a4 0220 	sub.w	r2, r4, #32
 80069a4:	fa07 f101 	lsl.w	r1, r7, r1
 80069a8:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069ac:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80069ae:	430c      	orrs	r4, r1
 80069b0:	fa27 f202 	lsr.w	r2, r7, r2
 80069b4:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80069b6:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80069ba:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80069c4:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80069c8:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80069cc:	f7ff ff9e 	bl	800690c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80069d0:	f8db 2010 	ldr.w	r2, [fp, #16]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80069dc:	b938      	cbnz	r0, 80069ee <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80069de:	f10a 0a01 	add.w	sl, sl, #1
 80069e2:	fa5f f28a 	uxtb.w	r2, sl
 80069e6:	4295      	cmp	r5, r2
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	d8d4      	bhi.n	8006998 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80069ee:	2300      	movs	r3, #0
 80069f0:	7633      	strb	r3, [r6, #24]
}
 80069f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80069f6:	2002      	movs	r0, #2
 80069f8:	e7fb      	b.n	80069f2 <HAL_FLASH_Program+0x92>
 80069fa:	bf00      	nop
 80069fc:	20002548 	.word	0x20002548
 8006a00:	40022000 	.word	0x40022000

08006a04 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a04:	2200      	movs	r2, #0
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <FLASH_MassErase.isra.0+0x1c>)
 8006a08:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <FLASH_MassErase.isra.0+0x20>)
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	f042 0204 	orr.w	r2, r2, #4
 8006a12:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20002548 	.word	0x20002548
 8006a24:	40022000 	.word	0x40022000

08006a28 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <FLASH_PageErase+0x1c>)
 8006a2c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <FLASH_PageErase+0x20>)
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	f042 0202 	orr.w	r2, r2, #2
 8006a36:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006a38:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a40:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006a42:	4770      	bx	lr
 8006a44:	20002548 	.word	0x20002548
 8006a48:	40022000 	.word	0x40022000

08006a4c <HAL_FLASHEx_Erase>:
{
 8006a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8006a50:	4e22      	ldr	r6, [pc, #136]	; (8006adc <HAL_FLASHEx_Erase+0x90>)
{
 8006a52:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8006a54:	7e33      	ldrb	r3, [r6, #24]
{
 8006a56:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d03d      	beq.n	8006ad8 <HAL_FLASHEx_Erase+0x8c>
 8006a5c:	2401      	movs	r4, #1
 8006a5e:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a60:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a62:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d113      	bne.n	8006a92 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a6a:	f7ff ff4f 	bl	800690c <FLASH_WaitForLastOperation>
 8006a6e:	b120      	cbz	r0, 8006a7a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006a72:	2300      	movs	r3, #0
 8006a74:	7633      	strb	r3, [r6, #24]
}
 8006a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8006a7a:	f7ff ffc3 	bl	8006a04 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a82:	f7ff ff43 	bl	800690c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006a86:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <HAL_FLASHEx_Erase+0x94>)
 8006a88:	6913      	ldr	r3, [r2, #16]
 8006a8a:	f023 0304 	bic.w	r3, r3, #4
 8006a8e:	6113      	str	r3, [r2, #16]
 8006a90:	e7ef      	b.n	8006a72 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a92:	f7ff ff3b 	bl	800690c <FLASH_WaitForLastOperation>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d1ea      	bne.n	8006a70 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a9e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006aa2:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8006aa4:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006aa6:	4c0e      	ldr	r4, [pc, #56]	; (8006ae0 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006aa8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006aac:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8006ab0:	42bb      	cmp	r3, r7
 8006ab2:	d9de      	bls.n	8006a72 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f7ff ffb7 	bl	8006a28 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006aba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006abe:	f7ff ff25 	bl	800690c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	f023 0302 	bic.w	r3, r3, #2
 8006ac8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8006aca:	b110      	cbz	r0, 8006ad2 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8006acc:	f8c8 7000 	str.w	r7, [r8]
            break;
 8006ad0:	e7cf      	b.n	8006a72 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8006ad2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006ad6:	e7e7      	b.n	8006aa8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8006ad8:	2002      	movs	r0, #2
 8006ada:	e7cc      	b.n	8006a76 <HAL_FLASHEx_Erase+0x2a>
 8006adc:	20002548 	.word	0x20002548
 8006ae0:	40022000 	.word	0x40022000

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006ae8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8006aea:	4616      	mov	r6, r2
 8006aec:	4b64      	ldr	r3, [pc, #400]	; (8006c80 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006aee:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006c90 <HAL_GPIO_Init+0x1ac>
 8006af2:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8006c94 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006af6:	680d      	ldr	r5, [r1, #0]
 8006af8:	fa35 f406 	lsrs.w	r4, r5, r6
 8006afc:	d102      	bne.n	8006b04 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8006afe:	b003      	add	sp, #12
 8006b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8006b04:	f04f 0801 	mov.w	r8, #1
 8006b08:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b0c:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8006b10:	ea38 0505 	bics.w	r5, r8, r5
 8006b14:	d17c      	bne.n	8006c10 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8006b16:	684d      	ldr	r5, [r1, #4]
 8006b18:	2d03      	cmp	r5, #3
 8006b1a:	d807      	bhi.n	8006b2c <HAL_GPIO_Init+0x48>
 8006b1c:	3d01      	subs	r5, #1
 8006b1e:	2d02      	cmp	r5, #2
 8006b20:	f200 8088 	bhi.w	8006c34 <HAL_GPIO_Init+0x150>
 8006b24:	e8df f005 	tbb	[pc, r5]
 8006b28:	9b96      	.short	0x9b96
 8006b2a:	a1          	.byte	0xa1
 8006b2b:	00          	.byte	0x00
 8006b2c:	2d12      	cmp	r5, #18
 8006b2e:	f000 8099 	beq.w	8006c64 <HAL_GPIO_Init+0x180>
 8006b32:	d86f      	bhi.n	8006c14 <HAL_GPIO_Init+0x130>
 8006b34:	2d11      	cmp	r5, #17
 8006b36:	f000 808f 	beq.w	8006c58 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006b3a:	2cff      	cmp	r4, #255	; 0xff
 8006b3c:	bf98      	it	ls
 8006b3e:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b40:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006b44:	bf88      	it	hi
 8006b46:	f100 0a04 	addhi.w	sl, r0, #4
 8006b4a:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b4e:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006b52:	bf88      	it	hi
 8006b54:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b56:	fa09 fb05 	lsl.w	fp, r9, r5
 8006b5a:	ea28 080b 	bic.w	r8, r8, fp
 8006b5e:	fa02 f505 	lsl.w	r5, r2, r5
 8006b62:	ea48 0505 	orr.w	r5, r8, r5
 8006b66:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b6a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006b6e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8006b72:	d04d      	beq.n	8006c10 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b74:	4f43      	ldr	r7, [pc, #268]	; (8006c84 <HAL_GPIO_Init+0x1a0>)
 8006b76:	f026 0803 	bic.w	r8, r6, #3
 8006b7a:	69bd      	ldr	r5, [r7, #24]
 8006b7c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006b80:	f045 0501 	orr.w	r5, r5, #1
 8006b84:	61bd      	str	r5, [r7, #24]
 8006b86:	69bd      	ldr	r5, [r7, #24]
 8006b88:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8006b8c:	f005 0501 	and.w	r5, r5, #1
 8006b90:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b92:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b96:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8006b9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006ba0:	fa09 f90b 	lsl.w	r9, r9, fp
 8006ba4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006ba8:	4d37      	ldr	r5, [pc, #220]	; (8006c88 <HAL_GPIO_Init+0x1a4>)
 8006baa:	42a8      	cmp	r0, r5
 8006bac:	d061      	beq.n	8006c72 <HAL_GPIO_Init+0x18e>
 8006bae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bb2:	42a8      	cmp	r0, r5
 8006bb4:	d05f      	beq.n	8006c76 <HAL_GPIO_Init+0x192>
 8006bb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bba:	42a8      	cmp	r0, r5
 8006bbc:	d05d      	beq.n	8006c7a <HAL_GPIO_Init+0x196>
 8006bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bc2:	42a8      	cmp	r0, r5
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2503      	moveq	r5, #3
 8006bc8:	2504      	movne	r5, #4
 8006bca:	fa05 f50b 	lsl.w	r5, r5, fp
 8006bce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8006bd2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8006bd6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bd8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8006bdc:	bf14      	ite	ne
 8006bde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006be0:	43a5      	biceq	r5, r4
 8006be2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8006be4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006be6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8006bea:	bf14      	ite	ne
 8006bec:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006bee:	43a5      	biceq	r5, r4
 8006bf0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006bf2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006bf4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8006bf8:	bf14      	ite	ne
 8006bfa:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006bfc:	43a5      	biceq	r5, r4
 8006bfe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c00:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c02:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c06:	bf14      	ite	ne
 8006c08:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c0a:	ea25 0404 	biceq.w	r4, r5, r4
 8006c0e:	60dc      	str	r4, [r3, #12]
	position++;
 8006c10:	3601      	adds	r6, #1
 8006c12:	e770      	b.n	8006af6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8006c14:	4f1d      	ldr	r7, [pc, #116]	; (8006c8c <HAL_GPIO_Init+0x1a8>)
 8006c16:	42bd      	cmp	r5, r7
 8006c18:	d00c      	beq.n	8006c34 <HAL_GPIO_Init+0x150>
 8006c1a:	d817      	bhi.n	8006c4c <HAL_GPIO_Init+0x168>
 8006c1c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8006c98 <HAL_GPIO_Init+0x1b4>
 8006c20:	454d      	cmp	r5, r9
 8006c22:	d007      	beq.n	8006c34 <HAL_GPIO_Init+0x150>
 8006c24:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8006c28:	454d      	cmp	r5, r9
 8006c2a:	d003      	beq.n	8006c34 <HAL_GPIO_Init+0x150>
 8006c2c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8006c30:	454d      	cmp	r5, r9
 8006c32:	d182      	bne.n	8006b3a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c34:	688a      	ldr	r2, [r1, #8]
 8006c36:	b1d2      	cbz	r2, 8006c6e <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c38:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8006c3a:	bf08      	it	eq
 8006c3c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c40:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8006c44:	bf18      	it	ne
 8006c46:	f8c0 8014 	strne.w	r8, [r0, #20]
 8006c4a:	e776      	b.n	8006b3a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8006c4c:	4565      	cmp	r5, ip
 8006c4e:	d0f1      	beq.n	8006c34 <HAL_GPIO_Init+0x150>
 8006c50:	4575      	cmp	r5, lr
 8006c52:	e7ee      	b.n	8006c32 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c54:	68ca      	ldr	r2, [r1, #12]
          break;
 8006c56:	e770      	b.n	8006b3a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c58:	68ca      	ldr	r2, [r1, #12]
 8006c5a:	3204      	adds	r2, #4
          break;
 8006c5c:	e76d      	b.n	8006b3a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c5e:	68ca      	ldr	r2, [r1, #12]
 8006c60:	3208      	adds	r2, #8
          break;
 8006c62:	e76a      	b.n	8006b3a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c64:	68ca      	ldr	r2, [r1, #12]
 8006c66:	320c      	adds	r2, #12
          break;
 8006c68:	e767      	b.n	8006b3a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	e765      	b.n	8006b3a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c6e:	2204      	movs	r2, #4
 8006c70:	e763      	b.n	8006b3a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006c72:	2500      	movs	r5, #0
 8006c74:	e7a9      	b.n	8006bca <HAL_GPIO_Init+0xe6>
 8006c76:	2501      	movs	r5, #1
 8006c78:	e7a7      	b.n	8006bca <HAL_GPIO_Init+0xe6>
 8006c7a:	2502      	movs	r5, #2
 8006c7c:	e7a5      	b.n	8006bca <HAL_GPIO_Init+0xe6>
 8006c7e:	bf00      	nop
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40010800 	.word	0x40010800
 8006c8c:	10220000 	.word	0x10220000
 8006c90:	10310000 	.word	0x10310000
 8006c94:	10320000 	.word	0x10320000
 8006c98:	10120000 	.word	0x10120000

08006c9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c9c:	6883      	ldr	r3, [r0, #8]
 8006c9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006ca0:	bf14      	ite	ne
 8006ca2:	2001      	movne	r0, #1
 8006ca4:	2000      	moveq	r0, #0
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ca8:	b10a      	cbz	r2, 8006cae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006caa:	6101      	str	r1, [r0, #16]
  }
}
 8006cac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006cae:	0409      	lsls	r1, r1, #16
 8006cb0:	e7fb      	b.n	8006caa <HAL_GPIO_WritePin+0x2>

08006cb2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006cb2:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cb4:	ea01 0203 	and.w	r2, r1, r3
 8006cb8:	ea21 0103 	bic.w	r1, r1, r3
 8006cbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cc0:	6101      	str	r1, [r0, #16]
}
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cc4:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8006cc6:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006cc8:	6951      	ldr	r1, [r2, #20]
 8006cca:	4201      	tst	r1, r0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006cd0:	f7ff f914 	bl	8005efc <HAL_GPIO_EXTI_Callback>
  }
}
 8006cd4:	bd08      	pop	{r3, pc}
 8006cd6:	bf00      	nop
 8006cd8:	40010400 	.word	0x40010400

08006cdc <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006cdc:	2201      	movs	r2, #1
 8006cde:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <HAL_PWR_EnableBkUpAccess+0x8>)
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	4770      	bx	lr
 8006ce4:	420e0020 	.word	0x420e0020

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cec:	4605      	mov	r5, r0
 8006cee:	b338      	cbz	r0, 8006d40 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cf0:	6803      	ldr	r3, [r0, #0]
 8006cf2:	07db      	lsls	r3, r3, #31
 8006cf4:	d410      	bmi.n	8006d18 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	079f      	lsls	r7, r3, #30
 8006cfa:	d45e      	bmi.n	8006dba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	0719      	lsls	r1, r3, #28
 8006d00:	f100 8095 	bmi.w	8006e2e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	075a      	lsls	r2, r3, #29
 8006d08:	f100 80bf 	bmi.w	8006e8a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d0c:	69e8      	ldr	r0, [r5, #28]
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f040 812c 	bne.w	8006f6c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006d14:	2000      	movs	r0, #0
 8006d16:	e029      	b.n	8006d6c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d18:	4c8f      	ldr	r4, [pc, #572]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	f003 030c 	and.w	r3, r3, #12
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d007      	beq.n	8006d34 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d10a      	bne.n	8006d44 <HAL_RCC_OscConfig+0x5c>
 8006d2e:	6863      	ldr	r3, [r4, #4]
 8006d30:	03de      	lsls	r6, r3, #15
 8006d32:	d507      	bpl.n	8006d44 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	039c      	lsls	r4, r3, #14
 8006d38:	d5dd      	bpl.n	8006cf6 <HAL_RCC_OscConfig+0xe>
 8006d3a:	686b      	ldr	r3, [r5, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1da      	bne.n	8006cf6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006d40:	2001      	movs	r0, #1
 8006d42:	e013      	b.n	8006d6c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d44:	686b      	ldr	r3, [r5, #4]
 8006d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4a:	d112      	bne.n	8006d72 <HAL_RCC_OscConfig+0x8a>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006d54:	f7ff fcd0 	bl	80066f8 <HAL_GetTick>
 8006d58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	0398      	lsls	r0, r3, #14
 8006d5e:	d4ca      	bmi.n	8006cf6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d60:	f7ff fcca 	bl	80066f8 <HAL_GetTick>
 8006d64:	1b80      	subs	r0, r0, r6
 8006d66:	2864      	cmp	r0, #100	; 0x64
 8006d68:	d9f7      	bls.n	8006d5a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006d6a:	2003      	movs	r0, #3
}
 8006d6c:	b002      	add	sp, #8
 8006d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d72:	b99b      	cbnz	r3, 8006d9c <HAL_RCC_OscConfig+0xb4>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006d84:	f7ff fcb8 	bl	80066f8 <HAL_GetTick>
 8006d88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	0399      	lsls	r1, r3, #14
 8006d8e:	d5b2      	bpl.n	8006cf6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d90:	f7ff fcb2 	bl	80066f8 <HAL_GetTick>
 8006d94:	1b80      	subs	r0, r0, r6
 8006d96:	2864      	cmp	r0, #100	; 0x64
 8006d98:	d9f7      	bls.n	8006d8a <HAL_RCC_OscConfig+0xa2>
 8006d9a:	e7e6      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	d103      	bne.n	8006dac <HAL_RCC_OscConfig+0xc4>
 8006da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	e7cf      	b.n	8006d4c <HAL_RCC_OscConfig+0x64>
 8006dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db8:	e7cb      	b.n	8006d52 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dba:	4c67      	ldr	r4, [pc, #412]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	f013 0f0c 	tst.w	r3, #12
 8006dc2:	d007      	beq.n	8006dd4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d110      	bne.n	8006df0 <HAL_RCC_OscConfig+0x108>
 8006dce:	6863      	ldr	r3, [r4, #4]
 8006dd0:	03da      	lsls	r2, r3, #15
 8006dd2:	d40d      	bmi.n	8006df0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	079b      	lsls	r3, r3, #30
 8006dd8:	d502      	bpl.n	8006de0 <HAL_RCC_OscConfig+0xf8>
 8006dda:	692b      	ldr	r3, [r5, #16]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d1af      	bne.n	8006d40 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	696a      	ldr	r2, [r5, #20]
 8006de4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006de8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	e785      	b.n	8006cfc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006df0:	692a      	ldr	r2, [r5, #16]
 8006df2:	4b5a      	ldr	r3, [pc, #360]	; (8006f5c <HAL_RCC_OscConfig+0x274>)
 8006df4:	b16a      	cbz	r2, 8006e12 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006dfa:	f7ff fc7d 	bl	80066f8 <HAL_GetTick>
 8006dfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	079f      	lsls	r7, r3, #30
 8006e04:	d4ec      	bmi.n	8006de0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e06:	f7ff fc77 	bl	80066f8 <HAL_GetTick>
 8006e0a:	1b80      	subs	r0, r0, r6
 8006e0c:	2802      	cmp	r0, #2
 8006e0e:	d9f7      	bls.n	8006e00 <HAL_RCC_OscConfig+0x118>
 8006e10:	e7ab      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8006e12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006e14:	f7ff fc70 	bl	80066f8 <HAL_GetTick>
 8006e18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0798      	lsls	r0, r3, #30
 8006e1e:	f57f af6d 	bpl.w	8006cfc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e22:	f7ff fc69 	bl	80066f8 <HAL_GetTick>
 8006e26:	1b80      	subs	r0, r0, r6
 8006e28:	2802      	cmp	r0, #2
 8006e2a:	d9f6      	bls.n	8006e1a <HAL_RCC_OscConfig+0x132>
 8006e2c:	e79d      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e2e:	69aa      	ldr	r2, [r5, #24]
 8006e30:	4e49      	ldr	r6, [pc, #292]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e32:	4b4b      	ldr	r3, [pc, #300]	; (8006f60 <HAL_RCC_OscConfig+0x278>)
 8006e34:	b1da      	cbz	r2, 8006e6e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8006e36:	2201      	movs	r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e3a:	f7ff fc5d 	bl	80066f8 <HAL_GetTick>
 8006e3e:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d50d      	bpl.n	8006e62 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e4a:	4b46      	ldr	r3, [pc, #280]	; (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e52:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006e54:	bf00      	nop
  }
  while (Delay --);
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	1e5a      	subs	r2, r3, #1
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f9      	bne.n	8006e54 <HAL_RCC_OscConfig+0x16c>
 8006e60:	e750      	b.n	8006d04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e62:	f7ff fc49 	bl	80066f8 <HAL_GetTick>
 8006e66:	1b00      	subs	r0, r0, r4
 8006e68:	2802      	cmp	r0, #2
 8006e6a:	d9e9      	bls.n	8006e40 <HAL_RCC_OscConfig+0x158>
 8006e6c:	e77d      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006e6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006e70:	f7ff fc42 	bl	80066f8 <HAL_GetTick>
 8006e74:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e78:	079f      	lsls	r7, r3, #30
 8006e7a:	f57f af43 	bpl.w	8006d04 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e7e:	f7ff fc3b 	bl	80066f8 <HAL_GetTick>
 8006e82:	1b00      	subs	r0, r0, r4
 8006e84:	2802      	cmp	r0, #2
 8006e86:	d9f6      	bls.n	8006e76 <HAL_RCC_OscConfig+0x18e>
 8006e88:	e76f      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e8a:	4c33      	ldr	r4, [pc, #204]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e8c:	69e3      	ldr	r3, [r4, #28]
 8006e8e:	00d8      	lsls	r0, r3, #3
 8006e90:	d424      	bmi.n	8006edc <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8006e92:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e94:	69e3      	ldr	r3, [r4, #28]
 8006e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e9a:	61e3      	str	r3, [r4, #28]
 8006e9c:	69e3      	ldr	r3, [r4, #28]
 8006e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea6:	4e30      	ldr	r6, [pc, #192]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	05d9      	lsls	r1, r3, #23
 8006eac:	d518      	bpl.n	8006ee0 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eae:	68eb      	ldr	r3, [r5, #12]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d126      	bne.n	8006f02 <HAL_RCC_OscConfig+0x21a>
 8006eb4:	6a23      	ldr	r3, [r4, #32]
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006ebc:	f7ff fc1c 	bl	80066f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006ec4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec6:	6a23      	ldr	r3, [r4, #32]
 8006ec8:	079b      	lsls	r3, r3, #30
 8006eca:	d53f      	bpl.n	8006f4c <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	f43f af1d 	beq.w	8006d0c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed2:	69e3      	ldr	r3, [r4, #28]
 8006ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	61e3      	str	r3, [r4, #28]
 8006eda:	e717      	b.n	8006d0c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8006edc:	2700      	movs	r7, #0
 8006ede:	e7e2      	b.n	8006ea6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006ee8:	f7ff fc06 	bl	80066f8 <HAL_GetTick>
 8006eec:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eee:	6833      	ldr	r3, [r6, #0]
 8006ef0:	05da      	lsls	r2, r3, #23
 8006ef2:	d4dc      	bmi.n	8006eae <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef4:	f7ff fc00 	bl	80066f8 <HAL_GetTick>
 8006ef8:	eba0 0008 	sub.w	r0, r0, r8
 8006efc:	2864      	cmp	r0, #100	; 0x64
 8006efe:	d9f6      	bls.n	8006eee <HAL_RCC_OscConfig+0x206>
 8006f00:	e733      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f02:	b9ab      	cbnz	r3, 8006f30 <HAL_RCC_OscConfig+0x248>
 8006f04:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	6223      	str	r3, [r4, #32]
 8006f10:	6a23      	ldr	r3, [r4, #32]
 8006f12:	f023 0304 	bic.w	r3, r3, #4
 8006f16:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006f18:	f7ff fbee 	bl	80066f8 <HAL_GetTick>
 8006f1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1e:	6a23      	ldr	r3, [r4, #32]
 8006f20:	0798      	lsls	r0, r3, #30
 8006f22:	d5d3      	bpl.n	8006ecc <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f24:	f7ff fbe8 	bl	80066f8 <HAL_GetTick>
 8006f28:	1b80      	subs	r0, r0, r6
 8006f2a:	4540      	cmp	r0, r8
 8006f2c:	d9f7      	bls.n	8006f1e <HAL_RCC_OscConfig+0x236>
 8006f2e:	e71c      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	6a23      	ldr	r3, [r4, #32]
 8006f34:	d103      	bne.n	8006f3e <HAL_RCC_OscConfig+0x256>
 8006f36:	f043 0304 	orr.w	r3, r3, #4
 8006f3a:	6223      	str	r3, [r4, #32]
 8006f3c:	e7ba      	b.n	8006eb4 <HAL_RCC_OscConfig+0x1cc>
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	6223      	str	r3, [r4, #32]
 8006f44:	6a23      	ldr	r3, [r4, #32]
 8006f46:	f023 0304 	bic.w	r3, r3, #4
 8006f4a:	e7b6      	b.n	8006eba <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4c:	f7ff fbd4 	bl	80066f8 <HAL_GetTick>
 8006f50:	1b80      	subs	r0, r0, r6
 8006f52:	4540      	cmp	r0, r8
 8006f54:	d9b7      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x1de>
 8006f56:	e708      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	42420000 	.word	0x42420000
 8006f60:	42420480 	.word	0x42420480
 8006f64:	20000058 	.word	0x20000058
 8006f68:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f6c:	4b2a      	ldr	r3, [pc, #168]	; (8007018 <HAL_RCC_OscConfig+0x330>)
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	461c      	mov	r4, r3
 8006f72:	f002 020c 	and.w	r2, r2, #12
 8006f76:	2a08      	cmp	r2, #8
 8006f78:	d03d      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4e27      	ldr	r6, [pc, #156]	; (800701c <HAL_RCC_OscConfig+0x334>)
 8006f7e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006f80:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f82:	d12b      	bne.n	8006fdc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8006f84:	f7ff fbb8 	bl	80066f8 <HAL_GetTick>
 8006f88:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	0199      	lsls	r1, r3, #6
 8006f8e:	d41f      	bmi.n	8006fd0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f90:	6a2b      	ldr	r3, [r5, #32]
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f96:	d105      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	68a9      	ldr	r1, [r5, #8]
 8006f9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fa4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006fa6:	6862      	ldr	r2, [r4, #4]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006fb6:	f7ff fb9f 	bl	80066f8 <HAL_GetTick>
 8006fba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	019a      	lsls	r2, r3, #6
 8006fc0:	f53f aea8 	bmi.w	8006d14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7ff fb98 	bl	80066f8 <HAL_GetTick>
 8006fc8:	1b40      	subs	r0, r0, r5
 8006fca:	2802      	cmp	r0, #2
 8006fcc:	d9f6      	bls.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
 8006fce:	e6cc      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd0:	f7ff fb92 	bl	80066f8 <HAL_GetTick>
 8006fd4:	1bc0      	subs	r0, r0, r7
 8006fd6:	2802      	cmp	r0, #2
 8006fd8:	d9d7      	bls.n	8006f8a <HAL_RCC_OscConfig+0x2a2>
 8006fda:	e6c6      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006fdc:	f7ff fb8c 	bl	80066f8 <HAL_GetTick>
 8006fe0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	f57f ae95 	bpl.w	8006d14 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fea:	f7ff fb85 	bl	80066f8 <HAL_GetTick>
 8006fee:	1b40      	subs	r0, r0, r5
 8006ff0:	2802      	cmp	r0, #2
 8006ff2:	d9f6      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x2fa>
 8006ff4:	e6b9      	b.n	8006d6a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff6:	2801      	cmp	r0, #1
 8006ff8:	f43f aeb8 	beq.w	8006d6c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006ffc:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffe:	6a2a      	ldr	r2, [r5, #32]
 8007000:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8007004:	4291      	cmp	r1, r2
 8007006:	f47f ae9b 	bne.w	8006d40 <HAL_RCC_OscConfig+0x58>
 800700a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800700c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007010:	4293      	cmp	r3, r2
 8007012:	f43f ae7f 	beq.w	8006d14 <HAL_RCC_OscConfig+0x2c>
 8007016:	e693      	b.n	8006d40 <HAL_RCC_OscConfig+0x58>
 8007018:	40021000 	.word	0x40021000
 800701c:	42420060 	.word	0x42420060

08007020 <HAL_RCC_GetSysClockFreq>:
{
 8007020:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007022:	4b18      	ldr	r3, [pc, #96]	; (8007084 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8007024:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007026:	ac02      	add	r4, sp, #8
 8007028:	f103 0510 	add.w	r5, r3, #16
 800702c:	4622      	mov	r2, r4
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	6859      	ldr	r1, [r3, #4]
 8007032:	3308      	adds	r3, #8
 8007034:	c203      	stmia	r2!, {r0, r1}
 8007036:	42ab      	cmp	r3, r5
 8007038:	4614      	mov	r4, r2
 800703a:	d1f7      	bne.n	800702c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800703c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8007040:	4911      	ldr	r1, [pc, #68]	; (8007088 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007042:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8007046:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007048:	f003 020c 	and.w	r2, r3, #12
 800704c:	2a08      	cmp	r2, #8
 800704e:	d117      	bne.n	8007080 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007050:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007054:	a806      	add	r0, sp, #24
 8007056:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007058:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800705a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800705e:	d50c      	bpl.n	800707a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007060:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007062:	480a      	ldr	r0, [pc, #40]	; (800708c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007064:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007068:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800706a:	aa06      	add	r2, sp, #24
 800706c:	4413      	add	r3, r2
 800706e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007072:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007076:	b007      	add	sp, #28
 8007078:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800707a:	4805      	ldr	r0, [pc, #20]	; (8007090 <HAL_RCC_GetSysClockFreq+0x70>)
 800707c:	4350      	muls	r0, r2
 800707e:	e7fa      	b.n	8007076 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007080:	4802      	ldr	r0, [pc, #8]	; (800708c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007082:	e7f8      	b.n	8007076 <HAL_RCC_GetSysClockFreq+0x56>
 8007084:	080083c0 	.word	0x080083c0
 8007088:	40021000 	.word	0x40021000
 800708c:	007a1200 	.word	0x007a1200
 8007090:	003d0900 	.word	0x003d0900

08007094 <HAL_RCC_ClockConfig>:
{
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800709a:	4604      	mov	r4, r0
 800709c:	b910      	cbnz	r0, 80070a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800709e:	2001      	movs	r0, #1
}
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a4:	4a44      	ldr	r2, [pc, #272]	; (80071b8 <HAL_RCC_ClockConfig+0x124>)
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	428b      	cmp	r3, r1
 80070ae:	d328      	bcc.n	8007102 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	078e      	lsls	r6, r1, #30
 80070b4:	d430      	bmi.n	8007118 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b6:	07ca      	lsls	r2, r1, #31
 80070b8:	d443      	bmi.n	8007142 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070ba:	4a3f      	ldr	r2, [pc, #252]	; (80071b8 <HAL_RCC_ClockConfig+0x124>)
 80070bc:	6813      	ldr	r3, [r2, #0]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	42ab      	cmp	r3, r5
 80070c4:	d865      	bhi.n	8007192 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	4d3c      	ldr	r5, [pc, #240]	; (80071bc <HAL_RCC_ClockConfig+0x128>)
 80070ca:	f012 0f04 	tst.w	r2, #4
 80070ce:	d16c      	bne.n	80071aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d0:	0713      	lsls	r3, r2, #28
 80070d2:	d506      	bpl.n	80070e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070d4:	686b      	ldr	r3, [r5, #4]
 80070d6:	6922      	ldr	r2, [r4, #16]
 80070d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80070dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80070e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070e2:	f7ff ff9d 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 80070e6:	686b      	ldr	r3, [r5, #4]
 80070e8:	4a35      	ldr	r2, [pc, #212]	; (80071c0 <HAL_RCC_ClockConfig+0x12c>)
 80070ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070ee:	5cd3      	ldrb	r3, [r2, r3]
 80070f0:	40d8      	lsrs	r0, r3
 80070f2:	4b34      	ldr	r3, [pc, #208]	; (80071c4 <HAL_RCC_ClockConfig+0x130>)
 80070f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80070f6:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <HAL_RCC_ClockConfig+0x134>)
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f7ff fabb 	bl	8006674 <HAL_InitTick>
  return HAL_OK;
 80070fe:	2000      	movs	r0, #0
 8007100:	e7ce      	b.n	80070a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007102:	6813      	ldr	r3, [r2, #0]
 8007104:	f023 0307 	bic.w	r3, r3, #7
 8007108:	430b      	orrs	r3, r1
 800710a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710c:	6813      	ldr	r3, [r2, #0]
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	428b      	cmp	r3, r1
 8007114:	d1c3      	bne.n	800709e <HAL_RCC_ClockConfig+0xa>
 8007116:	e7cb      	b.n	80070b0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007118:	4b28      	ldr	r3, [pc, #160]	; (80071bc <HAL_RCC_ClockConfig+0x128>)
 800711a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800711e:	bf1e      	ittt	ne
 8007120:	685a      	ldrne	r2, [r3, #4]
 8007122:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8007126:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007128:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800712a:	bf42      	ittt	mi
 800712c:	685a      	ldrmi	r2, [r3, #4]
 800712e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8007132:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68a0      	ldr	r0, [r4, #8]
 8007138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800713c:	4302      	orrs	r2, r0
 800713e:	605a      	str	r2, [r3, #4]
 8007140:	e7b9      	b.n	80070b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007142:	6862      	ldr	r2, [r4, #4]
 8007144:	4e1d      	ldr	r6, [pc, #116]	; (80071bc <HAL_RCC_ClockConfig+0x128>)
 8007146:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007148:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800714a:	d11a      	bne.n	8007182 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	d0a5      	beq.n	800709e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007152:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007154:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	4313      	orrs	r3, r2
 800715e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007160:	f7ff faca 	bl	80066f8 <HAL_GetTick>
 8007164:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007166:	6873      	ldr	r3, [r6, #4]
 8007168:	6862      	ldr	r2, [r4, #4]
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007172:	d0a2      	beq.n	80070ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007174:	f7ff fac0 	bl	80066f8 <HAL_GetTick>
 8007178:	1bc0      	subs	r0, r0, r7
 800717a:	4540      	cmp	r0, r8
 800717c:	d9f3      	bls.n	8007166 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800717e:	2003      	movs	r0, #3
 8007180:	e78e      	b.n	80070a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007182:	2a02      	cmp	r2, #2
 8007184:	d102      	bne.n	800718c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007186:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800718a:	e7e1      	b.n	8007150 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718c:	f013 0f02 	tst.w	r3, #2
 8007190:	e7de      	b.n	8007150 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	432b      	orrs	r3, r5
 800719a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719c:	6813      	ldr	r3, [r2, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	42ab      	cmp	r3, r5
 80071a4:	f47f af7b 	bne.w	800709e <HAL_RCC_ClockConfig+0xa>
 80071a8:	e78d      	b.n	80070c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071aa:	686b      	ldr	r3, [r5, #4]
 80071ac:	68e1      	ldr	r1, [r4, #12]
 80071ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071b2:	430b      	orrs	r3, r1
 80071b4:	606b      	str	r3, [r5, #4]
 80071b6:	e78b      	b.n	80070d0 <HAL_RCC_ClockConfig+0x3c>
 80071b8:	40022000 	.word	0x40022000
 80071bc:	40021000 	.word	0x40021000
 80071c0:	080083a8 	.word	0x080083a8
 80071c4:	20000058 	.word	0x20000058
 80071c8:	20000060 	.word	0x20000060

080071cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80071ce:	4a05      	ldr	r2, [pc, #20]	; (80071e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80071d6:	5cd3      	ldrb	r3, [r2, r3]
 80071d8:	4a03      	ldr	r2, [pc, #12]	; (80071e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80071da:	6810      	ldr	r0, [r2, #0]
}
 80071dc:	40d8      	lsrs	r0, r3
 80071de:	4770      	bx	lr
 80071e0:	40021000 	.word	0x40021000
 80071e4:	080083b8 	.word	0x080083b8
 80071e8:	20000058 	.word	0x20000058

080071ec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071ec:	6803      	ldr	r3, [r0, #0]
{
 80071ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071f2:	07d9      	lsls	r1, r3, #31
{
 80071f4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071f6:	d520      	bpl.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071f8:	4c35      	ldr	r4, [pc, #212]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80071fa:	69e3      	ldr	r3, [r4, #28]
 80071fc:	00da      	lsls	r2, r3, #3
 80071fe:	d432      	bmi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8007200:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007202:	69e3      	ldr	r3, [r4, #28]
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007208:	61e3      	str	r3, [r4, #28]
 800720a:	69e3      	ldr	r3, [r4, #28]
 800720c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007214:	4e2f      	ldr	r6, [pc, #188]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007216:	6833      	ldr	r3, [r6, #0]
 8007218:	05db      	lsls	r3, r3, #23
 800721a:	d526      	bpl.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800721c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007222:	d136      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007224:	6a23      	ldr	r3, [r4, #32]
 8007226:	686a      	ldr	r2, [r5, #4]
 8007228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722c:	4313      	orrs	r3, r2
 800722e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007230:	b11f      	cbz	r7, 800723a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007232:	69e3      	ldr	r3, [r4, #28]
 8007234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007238:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800723a:	6828      	ldr	r0, [r5, #0]
 800723c:	0783      	lsls	r3, r0, #30
 800723e:	d506      	bpl.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007240:	4923      	ldr	r1, [pc, #140]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007242:	68ab      	ldr	r3, [r5, #8]
 8007244:	684a      	ldr	r2, [r1, #4]
 8007246:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800724a:	431a      	orrs	r2, r3
 800724c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800724e:	f010 0010 	ands.w	r0, r0, #16
 8007252:	d01b      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007254:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007256:	68e9      	ldr	r1, [r5, #12]
 8007258:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800725a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800725c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007260:	430b      	orrs	r3, r1
 8007262:	6053      	str	r3, [r2, #4]
 8007264:	e012      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8007266:	2700      	movs	r7, #0
 8007268:	e7d4      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800726a:	6833      	ldr	r3, [r6, #0]
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007272:	f7ff fa41 	bl	80066f8 <HAL_GetTick>
 8007276:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	05d8      	lsls	r0, r3, #23
 800727c:	d4ce      	bmi.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727e:	f7ff fa3b 	bl	80066f8 <HAL_GetTick>
 8007282:	eba0 0008 	sub.w	r0, r0, r8
 8007286:	2864      	cmp	r0, #100	; 0x64
 8007288:	d9f6      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800728a:	2003      	movs	r0, #3
}
 800728c:	b002      	add	sp, #8
 800728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007292:	686a      	ldr	r2, [r5, #4]
 8007294:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007298:	429a      	cmp	r2, r3
 800729a:	d0c3      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800729c:	2001      	movs	r0, #1
 800729e:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80072a2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072a4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072aa:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80072ac:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d5b8      	bpl.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80072b2:	f7ff fa21 	bl	80066f8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80072ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072bc:	6a23      	ldr	r3, [r4, #32]
 80072be:	079a      	lsls	r2, r3, #30
 80072c0:	d4b0      	bmi.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7ff fa19 	bl	80066f8 <HAL_GetTick>
 80072c6:	1b80      	subs	r0, r0, r6
 80072c8:	4540      	cmp	r0, r8
 80072ca:	d9f7      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80072cc:	e7dd      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40007000 	.word	0x40007000
 80072d8:	42420440 	.word	0x42420440

080072dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072dc:	4602      	mov	r2, r0
 80072de:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072e0:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 80072e2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80072e4:	ad02      	add	r5, sp, #8
 80072e6:	f103 0610 	add.w	r6, r3, #16
 80072ea:	462c      	mov	r4, r5
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	6859      	ldr	r1, [r3, #4]
 80072f0:	3308      	adds	r3, #8
 80072f2:	c403      	stmia	r4!, {r0, r1}
 80072f4:	42b3      	cmp	r3, r6
 80072f6:	4625      	mov	r5, r4
 80072f8:	d1f7      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072fa:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072fe:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007300:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8007304:	d049      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8007306:	2a10      	cmp	r2, #16
 8007308:	d003      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 800730a:	2a01      	cmp	r2, #1
 800730c:	d026      	beq.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 800730e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8007310:	e038      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 8007312:	4b29      	ldr	r3, [pc, #164]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8007314:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800731c:	d032      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800731e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8007322:	a806      	add	r0, sp, #24
 8007324:	4402      	add	r2, r0
 8007326:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800732a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800732c:	bf41      	itttt	mi
 800732e:	685a      	ldrmi	r2, [r3, #4]
 8007330:	a906      	addmi	r1, sp, #24
 8007332:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8007336:	1852      	addmi	r2, r2, r1
 8007338:	bf44      	itt	mi
 800733a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800733e:	4a1f      	ldrmi	r2, [pc, #124]	; (80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007340:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007342:	bf4c      	ite	mi
 8007344:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007348:	4a1d      	ldrpl	r2, [pc, #116]	; (80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800734a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800734c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007350:	d418      	bmi.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 8007352:	2303      	movs	r3, #3
 8007354:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007356:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800735a:	e013      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800735c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8007360:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8007362:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007364:	4019      	ands	r1, r3
 8007366:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800736a:	d01f      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800736c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007374:	d108      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 8007376:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800737a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800737c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8007380:	bf18      	it	ne
 8007382:	4618      	movne	r0, r3
}
 8007384:	b006      	add	sp, #24
 8007386:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738c:	d1bf      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800738e:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8007390:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007394:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007398:	e7f2      	b.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800739a:	f7ff ff17 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80073a6:	3301      	adds	r3, #1
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	e7d4      	b.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 80073ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80073b0:	e7e8      	b.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 80073b2:	bf00      	nop
 80073b4:	080083c0 	.word	0x080083c0
 80073b8:	40021000 	.word	0x40021000
 80073bc:	007a1200 	.word	0x007a1200
 80073c0:	003d0900 	.word	0x003d0900

080073c4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80073c4:	6803      	ldr	r3, [r0, #0]
{
 80073c6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80073c8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80073ca:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80073cc:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80073ce:	b295      	uxth	r5, r2
 80073d0:	b28c      	uxth	r4, r1
 80073d2:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80073d4:	bf17      	itett	ne
 80073d6:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80073d8:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80073da:	b280      	uxthne	r0, r0
 80073dc:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 80073e0:	bf08      	it	eq
 80073e2:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80073e6:	bd30      	pop	{r4, r5, pc}

080073e8 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80073e8:	6803      	ldr	r3, [r0, #0]
 80073ea:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80073ee:	b29b      	uxth	r3, r3
}
 80073f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80073f4:	4770      	bx	lr

080073f6 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80073f6:	2300      	movs	r3, #0

  while (Value >= 10U)
 80073f8:	2809      	cmp	r0, #9
 80073fa:	d803      	bhi.n	8007404 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80073fc:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8007400:	b2c0      	uxtb	r0, r0
 8007402:	4770      	bx	lr
    Value -= 10U;
 8007404:	380a      	subs	r0, #10
    bcdhigh++;
 8007406:	3301      	adds	r3, #1
    Value -= 10U;
 8007408:	b2c0      	uxtb	r0, r0
 800740a:	e7f5      	b.n	80073f8 <RTC_ByteToBcd2+0x2>

0800740c <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 800740c:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800740e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8007410:	f000 000f 	and.w	r0, r0, #15
 8007414:	fb02 0003 	mla	r0, r2, r3, r0
}
 8007418:	b2c0      	uxtb	r0, r0
 800741a:	4770      	bx	lr

0800741c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800741c:	b530      	push	{r4, r5, lr}
 800741e:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8007420:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 8007424:	2017      	movs	r0, #23
 8007426:	2509      	movs	r5, #9
 8007428:	4348      	muls	r0, r1
 800742a:	2902      	cmp	r1, #2
 800742c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007430:	d817      	bhi.n	8007462 <RTC_WeekDayNum+0x46>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007432:	3204      	adds	r2, #4
 8007434:	1910      	adds	r0, r2, r4
 8007436:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800743a:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 800743e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007442:	4428      	add	r0, r5
 8007444:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8007448:	4410      	add	r0, r2
 800744a:	2264      	movs	r2, #100	; 0x64
 800744c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007450:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007452:	2307      	movs	r3, #7
 8007454:	fbb0 f3f3 	udiv	r3, r0, r3
 8007458:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800745c:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800745e:	b2c0      	uxtb	r0, r0
 8007460:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007462:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007466:	1c90      	adds	r0, r2, #2
 8007468:	2264      	movs	r2, #100	; 0x64
 800746a:	4420      	add	r0, r4
 800746c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007470:	4428      	add	r0, r5
 8007472:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8007476:	fbb4 f4f2 	udiv	r4, r4, r2
 800747a:	4418      	add	r0, r3
 800747c:	1b00      	subs	r0, r0, r4
 800747e:	e7e8      	b.n	8007452 <RTC_WeekDayNum+0x36>

08007480 <RTC_EnterInitMode>:
{
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8007484:	f7ff f938 	bl	80066f8 <HAL_GetTick>
 8007488:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	0692      	lsls	r2, r2, #26
 8007490:	d505      	bpl.n	800749e <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8007492:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	f042 0210 	orr.w	r2, r2, #16
 800749a:	605a      	str	r2, [r3, #4]
}
 800749c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800749e:	f7ff f92b 	bl	80066f8 <HAL_GetTick>
 80074a2:	1b40      	subs	r0, r0, r5
 80074a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80074a8:	d9ef      	bls.n	800748a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80074aa:	2003      	movs	r0, #3
 80074ac:	e7f6      	b.n	800749c <RTC_EnterInitMode+0x1c>

080074ae <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ae:	6802      	ldr	r2, [r0, #0]
{
 80074b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b2:	6853      	ldr	r3, [r2, #4]
{
 80074b4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80074bc:	f7ff f91c 	bl	80066f8 <HAL_GetTick>
 80074c0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	069b      	lsls	r3, r3, #26
 80074c8:	d501      	bpl.n	80074ce <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80074ca:	2000      	movs	r0, #0
}
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80074ce:	f7ff f913 	bl	80066f8 <HAL_GetTick>
 80074d2:	1b40      	subs	r0, r0, r5
 80074d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80074d8:	d9f3      	bls.n	80074c2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80074da:	2003      	movs	r0, #3
 80074dc:	e7f6      	b.n	80074cc <RTC_ExitInitMode+0x1e>

080074de <RTC_WriteTimeCounter>:
{
 80074de:	b538      	push	{r3, r4, r5, lr}
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074e4:	f7ff ffcc 	bl	8007480 <RTC_EnterInitMode>
 80074e8:	b958      	cbnz	r0, 8007502 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80074ee:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80074f0:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074f2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80074f4:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074f6:	f7ff ffda 	bl	80074ae <RTC_ExitInitMode>
    status = HAL_ERROR;
 80074fa:	3800      	subs	r0, #0
 80074fc:	bf18      	it	ne
 80074fe:	2001      	movne	r0, #1
}
 8007500:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8007502:	2001      	movs	r0, #1
 8007504:	e7fc      	b.n	8007500 <RTC_WriteTimeCounter+0x22>

08007506 <RTC_WriteAlarmCounter>:
{
 8007506:	b538      	push	{r3, r4, r5, lr}
 8007508:	4605      	mov	r5, r0
 800750a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800750c:	f7ff ffb8 	bl	8007480 <RTC_EnterInitMode>
 8007510:	b958      	cbnz	r0, 800752a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007516:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007518:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800751a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800751c:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800751e:	f7ff ffc6 	bl	80074ae <RTC_ExitInitMode>
    status = HAL_ERROR;
 8007522:	3800      	subs	r0, #0
 8007524:	bf18      	it	ne
 8007526:	2001      	movne	r0, #1
}
 8007528:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800752a:	2001      	movs	r0, #1
 800752c:	e7fc      	b.n	8007528 <RTC_WriteAlarmCounter+0x22>

0800752e <HAL_RTC_SetTime>:
{
 800752e:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8007530:	4604      	mov	r4, r0
 8007532:	b1e0      	cbz	r0, 800756e <HAL_RTC_SetTime+0x40>
 8007534:	b1d9      	cbz	r1, 800756e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8007536:	7c03      	ldrb	r3, [r0, #16]
 8007538:	2502      	movs	r5, #2
 800753a:	2b01      	cmp	r3, #1
 800753c:	d046      	beq.n	80075cc <HAL_RTC_SetTime+0x9e>
 800753e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007540:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8007542:	7403      	strb	r3, [r0, #16]
  if (Format == RTC_FORMAT_BIN)
 8007544:	7808      	ldrb	r0, [r1, #0]
 8007546:	784d      	ldrb	r5, [r1, #1]
 8007548:	7889      	ldrb	r1, [r1, #2]
 800754a:	b992      	cbnz	r2, 8007572 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 800754c:	263c      	movs	r6, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800754e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007552:	436e      	muls	r6, r5
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007554:	fb03 6000 	mla	r0, r3, r0, r6
 8007558:	1846      	adds	r6, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800755a:	4631      	mov	r1, r6
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff ffbe 	bl	80074de <RTC_WriteTimeCounter>
 8007562:	4605      	mov	r5, r0
 8007564:	b1b0      	cbz	r0, 8007594 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007566:	2304      	movs	r3, #4
 8007568:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800756a:	2300      	movs	r3, #0
 800756c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800756e:	2501      	movs	r5, #1
 8007570:	e02c      	b.n	80075cc <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007572:	f7ff ff4b 	bl	800740c <RTC_Bcd2ToByte>
 8007576:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007578:	4628      	mov	r0, r5
 800757a:	f7ff ff47 	bl	800740c <RTC_Bcd2ToByte>
 800757e:	233c      	movs	r3, #60	; 0x3c
 8007580:	4343      	muls	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007582:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8007586:	fb00 3606 	mla	r6, r0, r6, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800758a:	4608      	mov	r0, r1
 800758c:	f7ff ff3e 	bl	800740c <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007590:	4406      	add	r6, r0
 8007592:	e7e2      	b.n	800755a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007594:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007596:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007598:	6853      	ldr	r3, [r2, #4]
 800759a:	f023 0305 	bic.w	r3, r3, #5
 800759e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80075a0:	f7ff ff22 	bl	80073e8 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d00d      	beq.n	80075c4 <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 80075a8:	4286      	cmp	r6, r0
 80075aa:	d90b      	bls.n	80075c4 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80075ac:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80075b0:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff ffa6 	bl	8007506 <RTC_WriteAlarmCounter>
 80075ba:	b118      	cbz	r0, 80075c4 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80075bc:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80075be:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80075c0:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 80075c2:	e7d4      	b.n	800756e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80075c4:	2301      	movs	r3, #1
 80075c6:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80075c8:	2300      	movs	r3, #0
 80075ca:	7423      	strb	r3, [r4, #16]
}
 80075cc:	4628      	mov	r0, r5
 80075ce:	bd70      	pop	{r4, r5, r6, pc}

080075d0 <HAL_RTC_GetTime>:
{
 80075d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	460e      	mov	r6, r1
 80075d6:	4617      	mov	r7, r2
  if ((hrtc == NULL) || (sTime == NULL))
 80075d8:	4605      	mov	r5, r0
 80075da:	b910      	cbnz	r0, 80075e2 <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 80075dc:	2001      	movs	r0, #1
}
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 80075e2:	2900      	cmp	r1, #0
 80075e4:	d0fa      	beq.n	80075dc <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80075e6:	6803      	ldr	r3, [r0, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f013 0804 	ands.w	r8, r3, #4
 80075ee:	d1f5      	bne.n	80075dc <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 80075f0:	f7ff fee8 	bl	80073c4 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 80075f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80075f8:	fbb0 f2f3 	udiv	r2, r0, r3
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80075fc:	243c      	movs	r4, #60	; 0x3c
 80075fe:	fb03 0312 	mls	r3, r3, r2, r0
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007602:	4682      	mov	sl, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007604:	fbb3 f0f4 	udiv	r0, r3, r4
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007608:	fb04 3310 	mls	r3, r4, r0, r3
 800760c:	70b3      	strb	r3, [r6, #2]
  if (hours >= 24U)
 800760e:	4b4a      	ldr	r3, [pc, #296]	; (8007738 <HAL_RTC_GetTime+0x168>)
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007610:	7070      	strb	r0, [r6, #1]
  if (hours >= 24U)
 8007612:	459a      	cmp	sl, r3
 8007614:	f240 8086 	bls.w	8007724 <HAL_RTC_GetTime+0x154>
    days_elapsed = (hours / 24U);
 8007618:	2318      	movs	r3, #24
 800761a:	fbb2 f9f3 	udiv	r9, r2, r3
    sTime->Hours = (hours % 24U);
 800761e:	fb03 2219 	mls	r2, r3, r9, r2
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007622:	4628      	mov	r0, r5
    sTime->Hours = (hours % 24U);
 8007624:	7032      	strb	r2, [r6, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007626:	f7ff fedf 	bl	80073e8 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800762a:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800762c:	4604      	mov	r4, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800762e:	d005      	beq.n	800763c <HAL_RTC_GetTime+0x6c>
 8007630:	4582      	cmp	sl, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8007632:	bf2c      	ite	cs
 8007634:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
      counter_alarm -= counter_time;
 8007638:	eba0 040a 	subcc.w	r4, r0, sl
    counter_time -= (days_elapsed * 24U * 3600U);
 800763c:	483f      	ldr	r0, [pc, #252]	; (800773c <HAL_RTC_GetTime+0x16c>)
 800763e:	fb00 aa19 	mls	sl, r0, r9, sl
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007642:	4628      	mov	r0, r5
 8007644:	4651      	mov	r1, sl
 8007646:	f7ff ff4a 	bl	80074de <RTC_WriteTimeCounter>
 800764a:	2800      	cmp	r0, #0
 800764c:	d1c6      	bne.n	80075dc <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800764e:	1c62      	adds	r2, r4, #1
 8007650:	d027      	beq.n	80076a2 <HAL_RTC_GetTime+0xd2>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007652:	eb0a 0104 	add.w	r1, sl, r4
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007656:	4628      	mov	r0, r5
 8007658:	f7ff ff55 	bl	8007506 <RTC_WriteAlarmCounter>
 800765c:	2800      	cmp	r0, #0
 800765e:	d1bd      	bne.n	80075dc <HAL_RTC_GetTime+0xc>
  year = hrtc->DateToUpdate.Year;
 8007660:	2264      	movs	r2, #100	; 0x64
 8007662:	f44f 71c8 	mov.w	r1, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007666:	f240 2cd5 	movw	ip, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 800766a:	7be8      	ldrb	r0, [r5, #15]
  month = hrtc->DateToUpdate.Month;
 800766c:	7b6c      	ldrb	r4, [r5, #13]
  day = hrtc->DateToUpdate.Date;
 800766e:	7bab      	ldrb	r3, [r5, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007670:	45c1      	cmp	r9, r8
 8007672:	d118      	bne.n	80076a6 <HAL_RTC_GetTime+0xd6>
  hrtc->DateToUpdate.Month = month;
 8007674:	b2e1      	uxtb	r1, r4
  hrtc->DateToUpdate.Date = day;
 8007676:	b2da      	uxtb	r2, r3
  hrtc->DateToUpdate.Year = year;
 8007678:	73e8      	strb	r0, [r5, #15]
  hrtc->DateToUpdate.Month = month;
 800767a:	7369      	strb	r1, [r5, #13]
  hrtc->DateToUpdate.Date = day;
 800767c:	73aa      	strb	r2, [r5, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800767e:	f7ff fecd 	bl	800741c <RTC_WeekDayNum>
 8007682:	7328      	strb	r0, [r5, #12]
  if (Format != RTC_FORMAT_BIN)
 8007684:	b15f      	cbz	r7, 800769e <HAL_RTC_GetTime+0xce>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8007686:	7830      	ldrb	r0, [r6, #0]
 8007688:	f7ff feb5 	bl	80073f6 <RTC_ByteToBcd2>
 800768c:	7030      	strb	r0, [r6, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800768e:	7870      	ldrb	r0, [r6, #1]
 8007690:	f7ff feb1 	bl	80073f6 <RTC_ByteToBcd2>
 8007694:	7070      	strb	r0, [r6, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007696:	78b0      	ldrb	r0, [r6, #2]
 8007698:	f7ff fead 	bl	80073f6 <RTC_ByteToBcd2>
 800769c:	70b0      	strb	r0, [r6, #2]
  return HAL_OK;
 800769e:	2000      	movs	r0, #0
 80076a0:	e79d      	b.n	80075de <HAL_RTC_GetTime+0xe>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80076a2:	4621      	mov	r1, r4
 80076a4:	e7d7      	b.n	8007656 <HAL_RTC_GetTime+0x86>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80076a6:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80076aa:	f1be 0f09 	cmp.w	lr, #9
 80076ae:	d90e      	bls.n	80076ce <HAL_RTC_GetTime+0xfe>
        (month == 8U) || (month == 10U) || (month == 12U))
 80076b0:	2c0c      	cmp	r4, #12
 80076b2:	d039      	beq.n	8007728 <HAL_RTC_GetTime+0x158>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80076b4:	f024 0e02 	bic.w	lr, r4, #2
 80076b8:	f1be 0f04 	cmp.w	lr, #4
 80076bc:	d002      	beq.n	80076c4 <HAL_RTC_GetTime+0xf4>
 80076be:	f1be 0f09 	cmp.w	lr, #9
 80076c2:	d10b      	bne.n	80076dc <HAL_RTC_GetTime+0x10c>
      if (day < 30U)
 80076c4:	2b1d      	cmp	r3, #29
      if (day < 31U)
 80076c6:	d90d      	bls.n	80076e4 <HAL_RTC_GetTime+0x114>
        day = 1U;
 80076c8:	2301      	movs	r3, #1
        month++;
 80076ca:	3401      	adds	r4, #1
        day = 1U;
 80076cc:	e031      	b.n	8007732 <HAL_RTC_GetTime+0x162>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80076ce:	fa2c fe0e 	lsr.w	lr, ip, lr
 80076d2:	f01e 0f01 	tst.w	lr, #1
 80076d6:	d0ed      	beq.n	80076b4 <HAL_RTC_GetTime+0xe4>
      if (day < 31U)
 80076d8:	2b1e      	cmp	r3, #30
 80076da:	e7f4      	b.n	80076c6 <HAL_RTC_GetTime+0xf6>
    else if (month == 2U)
 80076dc:	2c02      	cmp	r4, #2
 80076de:	d128      	bne.n	8007732 <HAL_RTC_GetTime+0x162>
      if (day < 28U)
 80076e0:	2b1b      	cmp	r3, #27
 80076e2:	d801      	bhi.n	80076e8 <HAL_RTC_GetTime+0x118>
        day++;
 80076e4:	3301      	adds	r3, #1
 80076e6:	e024      	b.n	8007732 <HAL_RTC_GetTime+0x162>
      else if (day == 28U)
 80076e8:	2b1c      	cmp	r3, #28
 80076ea:	d114      	bne.n	8007716 <HAL_RTC_GetTime+0x146>
  if ((nYear % 4U) != 0U)
 80076ec:	0783      	lsls	r3, r0, #30
        if (RTC_IsLeapYear(year))
 80076ee:	fa1f fe80 	uxth.w	lr, r0
  if ((nYear % 4U) != 0U)
 80076f2:	d112      	bne.n	800771a <HAL_RTC_GetTime+0x14a>
  if ((nYear % 100U) != 0U)
 80076f4:	fbbe f3f2 	udiv	r3, lr, r2
 80076f8:	fb02 e313 	mls	r3, r2, r3, lr
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	b97b      	cbnz	r3, 8007720 <HAL_RTC_GetTime+0x150>
  if ((nYear % 400U) == 0U)
 8007700:	fbbe f3f1 	udiv	r3, lr, r1
 8007704:	fb01 e313 	mls	r3, r1, r3, lr
 8007708:	b29b      	uxth	r3, r3
          day++;
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf16      	itet	ne
 800770e:	2301      	movne	r3, #1
 8007710:	231d      	moveq	r3, #29
 8007712:	2403      	movne	r4, #3
 8007714:	e00d      	b.n	8007732 <HAL_RTC_GetTime+0x162>
      else if (day == 29U)
 8007716:	2b1d      	cmp	r3, #29
 8007718:	d10b      	bne.n	8007732 <HAL_RTC_GetTime+0x162>
          day = 1U;
 800771a:	2301      	movs	r3, #1
          month++;
 800771c:	2403      	movs	r4, #3
 800771e:	e008      	b.n	8007732 <HAL_RTC_GetTime+0x162>
          day++;
 8007720:	231d      	movs	r3, #29
 8007722:	e006      	b.n	8007732 <HAL_RTC_GetTime+0x162>
    sTime->Hours = hours;
 8007724:	7032      	strb	r2, [r6, #0]
 8007726:	e7ad      	b.n	8007684 <HAL_RTC_GetTime+0xb4>
      if (day < 31U)
 8007728:	2b1e      	cmp	r3, #30
 800772a:	d9db      	bls.n	80076e4 <HAL_RTC_GetTime+0x114>
          day = 1U;
 800772c:	2301      	movs	r3, #1
          month = 1U;
 800772e:	461c      	mov	r4, r3
          year++;
 8007730:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8007732:	f108 0801 	add.w	r8, r8, #1
 8007736:	e79b      	b.n	8007670 <HAL_RTC_GetTime+0xa0>
 8007738:	0001517f 	.word	0x0001517f
 800773c:	00015180 	.word	0x00015180

08007740 <HAL_RTC_SetAlarm_IT>:
{
 8007740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	4691      	mov	r9, r2
  RTC_TimeTypeDef stime = {0U};
 8007746:	2200      	movs	r2, #0
{
 8007748:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sAlarm == NULL))
 800774a:	4604      	mov	r4, r0
  RTC_TimeTypeDef stime = {0U};
 800774c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007750:	f88d 2006 	strb.w	r2, [sp, #6]
  if ((hrtc == NULL) || (sAlarm == NULL))
 8007754:	b918      	cbnz	r0, 800775e <HAL_RTC_SetAlarm_IT+0x1e>
    return HAL_ERROR;
 8007756:	2001      	movs	r0, #1
}
 8007758:	b002      	add	sp, #8
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hrtc == NULL) || (sAlarm == NULL))
 800775e:	2900      	cmp	r1, #0
 8007760:	d0f9      	beq.n	8007756 <HAL_RTC_SetAlarm_IT+0x16>
  __HAL_LOCK(hrtc);
 8007762:	7c03      	ldrb	r3, [r0, #16]
 8007764:	2b01      	cmp	r3, #1
 8007766:	f04f 0302 	mov.w	r3, #2
 800776a:	d052      	beq.n	8007812 <HAL_RTC_SetAlarm_IT+0xd2>
 800776c:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800776e:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hrtc);
 8007770:	7401      	strb	r1, [r0, #16]
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007772:	a901      	add	r1, sp, #4
 8007774:	f7ff ff2c 	bl	80075d0 <HAL_RTC_GetTime>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1ec      	bne.n	8007756 <HAL_RTC_SetAlarm_IT+0x16>
                            ((uint32_t)stime.Minutes * 60U) + \
 800777c:	273c      	movs	r7, #60	; 0x3c
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800777e:	f44f 6861 	mov.w	r8, #3600	; 0xe10
                            ((uint32_t)stime.Minutes * 60U) + \
 8007782:	f89d 3005 	ldrb.w	r3, [sp, #5]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8007786:	f89d 6004 	ldrb.w	r6, [sp, #4]
                            ((uint32_t)stime.Minutes * 60U) + \
 800778a:	437b      	muls	r3, r7
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800778c:	fb08 3606 	mla	r6, r8, r6, r3
                            ((uint32_t)stime.Seconds));
 8007790:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007794:	7828      	ldrb	r0, [r5, #0]
 8007796:	f895 a001 	ldrb.w	sl, [r5, #1]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800779a:	441e      	add	r6, r3
  if (Format == RTC_FORMAT_BIN)
 800779c:	78ad      	ldrb	r5, [r5, #2]
 800779e:	f1b9 0f00 	cmp.w	r9, #0
 80077a2:	d113      	bne.n	80077cc <HAL_RTC_SetAlarm_IT+0x8c>
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80077a4:	fb07 f10a 	mul.w	r1, r7, sl
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80077a8:	fb08 1100 	mla	r1, r8, r0, r1
 80077ac:	4429      	add	r1, r5
  if (counter_alarm < counter_time)
 80077ae:	42b1      	cmp	r1, r6
    counter_alarm += (uint32_t)(24U * 3600U);
 80077b0:	bf3c      	itt	cc
 80077b2:	f501 31a8 	addcc.w	r1, r1, #86016	; 0x15000
 80077b6:	f501 71c0 	addcc.w	r1, r1, #384	; 0x180
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff fea3 	bl	8007506 <RTC_WriteAlarmCounter>
 80077c0:	b190      	cbz	r0, 80077e8 <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077c2:	2304      	movs	r3, #4
 80077c4:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80077c6:	2300      	movs	r3, #0
 80077c8:	7423      	strb	r3, [r4, #16]
 80077ca:	e7c4      	b.n	8007756 <HAL_RTC_SetAlarm_IT+0x16>
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80077cc:	f7ff fe1e 	bl	800740c <RTC_Bcd2ToByte>
 80077d0:	4601      	mov	r1, r0
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80077d2:	4650      	mov	r0, sl
 80077d4:	f7ff fe1a 	bl	800740c <RTC_Bcd2ToByte>
 80077d8:	4378      	muls	r0, r7
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80077da:	fb08 0101 	mla	r1, r8, r1, r0
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80077de:	4628      	mov	r0, r5
 80077e0:	f7ff fe14 	bl	800740c <RTC_Bcd2ToByte>
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80077e4:	4401      	add	r1, r0
 80077e6:	e7e2      	b.n	80077ae <HAL_RTC_SetAlarm_IT+0x6e>
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80077e8:	f06f 0202 	mvn.w	r2, #2
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	605a      	str	r2, [r3, #4]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	f042 0202 	orr.w	r2, r2, #2
 80077f6:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <HAL_RTC_SetAlarm_IT+0xd8>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007800:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007808:	609a      	str	r2, [r3, #8]
    hrtc->State = HAL_RTC_STATE_READY;
 800780a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 800780c:	7420      	strb	r0, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 800780e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8007810:	e7a2      	b.n	8007758 <HAL_RTC_SetAlarm_IT+0x18>
  __HAL_LOCK(hrtc);
 8007812:	4618      	mov	r0, r3
 8007814:	e7a0      	b.n	8007758 <HAL_RTC_SetAlarm_IT+0x18>
 8007816:	bf00      	nop
 8007818:	40010400 	.word	0x40010400

0800781c <HAL_RTC_AlarmAEventCallback>:
 800781c:	4770      	bx	lr
	...

08007820 <HAL_RTC_AlarmIRQHandler>:
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8007820:	6803      	ldr	r3, [r0, #0]
{
 8007822:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8007824:	681a      	ldr	r2, [r3, #0]
{
 8007826:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8007828:	0792      	lsls	r2, r2, #30
 800782a:	d508      	bpl.n	800783e <HAL_RTC_AlarmIRQHandler+0x1e>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	d505      	bpl.n	800783e <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007832:	f7ff fff3 	bl	800781c <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007836:	f06f 0202 	mvn.w	r2, #2
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	605a      	str	r2, [r3, #4]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800783e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007842:	4b02      	ldr	r3, [pc, #8]	; (800784c <HAL_RTC_AlarmIRQHandler+0x2c>)
 8007844:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8007846:	2301      	movs	r3, #1
 8007848:	7463      	strb	r3, [r4, #17]
}
 800784a:	bd10      	pop	{r4, pc}
 800784c:	40010400 	.word	0x40010400

08007850 <HAL_RTC_WaitForSynchro>:
{
 8007850:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8007852:	4604      	mov	r4, r0
 8007854:	b1a8      	cbz	r0, 8007882 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007856:	6802      	ldr	r2, [r0, #0]
 8007858:	6853      	ldr	r3, [r2, #4]
 800785a:	f023 0308 	bic.w	r3, r3, #8
 800785e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8007860:	f7fe ff4a 	bl	80066f8 <HAL_GetTick>
 8007864:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	071b      	lsls	r3, r3, #28
 800786c:	d501      	bpl.n	8007872 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800786e:	2000      	movs	r0, #0
}
 8007870:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007872:	f7fe ff41 	bl	80066f8 <HAL_GetTick>
 8007876:	1b40      	subs	r0, r0, r5
 8007878:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800787c:	d9f3      	bls.n	8007866 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800787e:	2003      	movs	r0, #3
 8007880:	e7f6      	b.n	8007870 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8007882:	2001      	movs	r0, #1
 8007884:	e7f4      	b.n	8007870 <HAL_RTC_WaitForSynchro+0x20>
	...

08007888 <HAL_RTC_Init>:
{
 8007888:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800788a:	4604      	mov	r4, r0
 800788c:	b170      	cbz	r0, 80078ac <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800788e:	7c43      	ldrb	r3, [r0, #17]
 8007890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007894:	b913      	cbnz	r3, 800789c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8007896:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8007898:	f7fe fdd0 	bl	800643c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800789c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800789e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80078a0:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078a2:	f7ff ffd5 	bl	8007850 <HAL_RTC_WaitForSynchro>
 80078a6:	b118      	cbz	r0, 80078b0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078a8:	2304      	movs	r3, #4
 80078aa:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80078ac:	2001      	movs	r0, #1
 80078ae:	e036      	b.n	800791e <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80078b0:	4620      	mov	r0, r4
 80078b2:	f7ff fde5 	bl	8007480 <RTC_EnterInitMode>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d1f6      	bne.n	80078a8 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80078ba:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80078bc:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80078be:	6853      	ldr	r3, [r2, #4]
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <HAL_RTC_Init+0x98>)
 80078c8:	b118      	cbz	r0, 80078d2 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80078ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80078cc:	f021 0101 	bic.w	r1, r1, #1
 80078d0:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80078d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80078d4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80078d8:	4303      	orrs	r3, r0
 80078da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80078dc:	6860      	ldr	r0, [r4, #4]
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d105      	bne.n	80078ee <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80078e2:	2001      	movs	r0, #1
 80078e4:	f7ff fcfa 	bl	80072dc <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0dd      	beq.n	80078a8 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80078ec:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	6893      	ldr	r3, [r2, #8]
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80078fa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80078fc:	68d3      	ldr	r3, [r2, #12]
 80078fe:	b280      	uxth	r0, r0
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	4318      	orrs	r0, r3
 8007906:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007908:	4620      	mov	r0, r4
 800790a:	f7ff fdd0 	bl	80074ae <RTC_ExitInitMode>
 800790e:	2301      	movs	r3, #1
 8007910:	b110      	cbz	r0, 8007918 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007912:	2204      	movs	r2, #4
 8007914:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8007916:	e7c9      	b.n	80078ac <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007918:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800791a:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800791c:	7463      	strb	r3, [r4, #17]
}
 800791e:	bd10      	pop	{r4, pc}
 8007920:	40006c00 	.word	0x40006c00

08007924 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8007924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007928:	461c      	mov	r4, r3
 800792a:	4616      	mov	r6, r2
 800792c:	460f      	mov	r7, r1
 800792e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007930:	f7fe fee2 	bl	80066f8 <HAL_GetTick>
 8007934:	4434      	add	r4, r6
 8007936:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8007938:	f7fe fede 	bl	80066f8 <HAL_GetTick>
 800793c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007946:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007948:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800794a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800794c:	6893      	ldr	r3, [r2, #8]
 800794e:	ea37 0303 	bics.w	r3, r7, r3
 8007952:	d001      	beq.n	8007958 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8007954:	2000      	movs	r0, #0
 8007956:	e02e      	b.n	80079b6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8007958:	1c73      	adds	r3, r6, #1
 800795a:	d0f7      	beq.n	800794c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800795c:	f7fe fecc 	bl	80066f8 <HAL_GetTick>
 8007960:	eba0 0008 	sub.w	r0, r0, r8
 8007964:	42a0      	cmp	r0, r4
 8007966:	d329      	bcc.n	80079bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007970:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007972:	686a      	ldr	r2, [r5, #4]
 8007974:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007978:	d10a      	bne.n	8007990 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800797a:	68aa      	ldr	r2, [r5, #8]
 800797c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007980:	d002      	beq.n	8007988 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007982:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007986:	d103      	bne.n	8007990 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800798e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007990:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007992:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007996:	d107      	bne.n	80079a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079a6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80079ae:	2300      	movs	r3, #0
 80079b0:	2003      	movs	r0, #3
 80079b2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80079b6:	b002      	add	sp, #8
 80079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80079bc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80079be:	2b00      	cmp	r3, #0
      count--;
 80079c0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80079c2:	bf08      	it	eq
 80079c4:	2400      	moveq	r4, #0
      count--;
 80079c6:	3b01      	subs	r3, #1
 80079c8:	e7be      	b.n	8007948 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80079ca:	bf00      	nop
 80079cc:	20000058 	.word	0x20000058

080079d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079d4:	460a      	mov	r2, r1
 80079d6:	2180      	movs	r1, #128	; 0x80
{
 80079d8:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079da:	f7ff ffa3 	bl	8007924 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80079de:	b120      	cbz	r0, 80079ea <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80079e0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80079ea:	bd10      	pop	{r4, pc}

080079ec <HAL_SPI_Init>:
{
 80079ec:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80079ee:	4604      	mov	r4, r0
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d051      	beq.n	8007a98 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d14a      	bne.n	8007a90 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079fa:	6842      	ldr	r2, [r0, #4]
 80079fc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007a00:	d000      	beq.n	8007a04 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a02:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a08:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007a0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007a10:	b923      	cbnz	r3, 8007a1c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8007a12:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8007a14:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8007a18:	f7fe fd38 	bl	800648c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007a1c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8007a1e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007a20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8007a24:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a26:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8007a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a2e:	6863      	ldr	r3, [r4, #4]
 8007a30:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8007a34:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8007a38:	4303      	orrs	r3, r0
 8007a3a:	68e0      	ldr	r0, [r4, #12]
 8007a3c:	69a1      	ldr	r1, [r4, #24]
 8007a3e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8007a42:	4303      	orrs	r3, r0
 8007a44:	6920      	ldr	r0, [r4, #16]
 8007a46:	f000 0002 	and.w	r0, r0, #2
 8007a4a:	4303      	orrs	r3, r0
 8007a4c:	6960      	ldr	r0, [r4, #20]
 8007a4e:	f000 0001 	and.w	r0, r0, #1
 8007a52:	4303      	orrs	r3, r0
 8007a54:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8007a58:	4303      	orrs	r3, r0
 8007a5a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a5c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a5e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8007a62:	4303      	orrs	r3, r0
 8007a64:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a66:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a6a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007a72:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8007a76:	4303      	orrs	r3, r0
 8007a78:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a7a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a7c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a7e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a84:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8007a86:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a88:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8007a8e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a90:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a96:	e7b5      	b.n	8007a04 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e7f8      	b.n	8007a8e <HAL_SPI_Init+0xa2>

08007a9c <HAL_SPI_TransmitReceive>:
{
 8007a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007aa2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007aa6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007aa8:	2b01      	cmp	r3, #1
{
 8007aaa:	460d      	mov	r5, r1
 8007aac:	4691      	mov	r9, r2
 8007aae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8007ab2:	f000 80e0 	beq.w	8007c76 <HAL_SPI_TransmitReceive+0x1da>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007abc:	f7fe fe1c 	bl	80066f8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007ac0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8007ac4:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ac6:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8007ac8:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8007aca:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007acc:	d00a      	beq.n	8007ae4 <HAL_SPI_TransmitReceive+0x48>
 8007ace:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007ad2:	f040 80ce 	bne.w	8007c72 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f040 80ca 	bne.w	8007c72 <HAL_SPI_TransmitReceive+0x1d6>
 8007ade:	2904      	cmp	r1, #4
 8007ae0:	f040 80c7 	bne.w	8007c72 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ae4:	2d00      	cmp	r5, #0
 8007ae6:	d03f      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0xcc>
 8007ae8:	f1b9 0f00 	cmp.w	r9, #0
 8007aec:	d03c      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0xcc>
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d03a      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007af2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007af6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007afa:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007afc:	bf1c      	itt	ne
 8007afe:	2305      	movne	r3, #5
 8007b00:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b04:	2300      	movs	r3, #0
 8007b06:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8007b08:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8007b0e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8007b10:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b12:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8007b14:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b16:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8007b18:	bf58      	it	pl
 8007b1a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b1c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8007b1e:	bf58      	it	pl
 8007b20:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8007b24:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8007b26:	bf58      	it	pl
 8007b28:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b2a:	68e1      	ldr	r1, [r4, #12]
 8007b2c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007b30:	d151      	bne.n	8007bd6 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	b10a      	cbz	r2, 8007b38 <HAL_SPI_TransmitReceive+0x9c>
 8007b34:	2e01      	cmp	r6, #1
 8007b36:	d107      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b38:	f835 2b02 	ldrh.w	r2, [r5], #2
 8007b3c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8007b3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b40:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007b48:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	b96b      	cbnz	r3, 8007b6c <HAL_SPI_TransmitReceive+0xd0>
 8007b50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	b953      	cbnz	r3, 8007b6c <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b56:	463a      	mov	r2, r7
 8007b58:	4641      	mov	r1, r8
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ff38 	bl	80079d0 <SPI_EndRxTxTransaction>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d07b      	beq.n	8007c5c <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b64:	2320      	movs	r3, #32
 8007b66:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e02b      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b6c:	6821      	ldr	r1, [r4, #0]
 8007b6e:	688b      	ldr	r3, [r1, #8]
 8007b70:	079a      	lsls	r2, r3, #30
 8007b72:	d50d      	bpl.n	8007b90 <HAL_SPI_TransmitReceive+0xf4>
 8007b74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	b153      	cbz	r3, 8007b90 <HAL_SPI_TransmitReceive+0xf4>
 8007b7a:	b14d      	cbz	r5, 8007b90 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8007b7c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b80:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007b84:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b86:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007b88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b90:	688a      	ldr	r2, [r1, #8]
 8007b92:	f012 0201 	ands.w	r2, r2, #1
 8007b96:	d00c      	beq.n	8007bb2 <HAL_SPI_TransmitReceive+0x116>
 8007b98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	b14b      	cbz	r3, 8007bb2 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8007b9e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ba0:	68c9      	ldr	r1, [r1, #12]
 8007ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ba4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ba8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007baa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bb2:	f7fe fda1 	bl	80066f8 <HAL_GetTick>
 8007bb6:	1bc0      	subs	r0, r0, r7
 8007bb8:	4540      	cmp	r0, r8
 8007bba:	d3c6      	bcc.n	8007b4a <HAL_SPI_TransmitReceive+0xae>
 8007bbc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007bc0:	d0c3      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8007bc2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007bd0:	b003      	add	sp, #12
 8007bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bd6:	b10a      	cbz	r2, 8007bdc <HAL_SPI_TransmitReceive+0x140>
 8007bd8:	2e01      	cmp	r6, #1
 8007bda:	d108      	bne.n	8007bee <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bdc:	782a      	ldrb	r2, [r5, #0]
 8007bde:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007be2:	3301      	adds	r3, #1
 8007be4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007be6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007bee:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	b91b      	cbnz	r3, 8007bfe <HAL_SPI_TransmitReceive+0x162>
 8007bf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0ab      	beq.n	8007b56 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	6893      	ldr	r3, [r2, #8]
 8007c02:	079b      	lsls	r3, r3, #30
 8007c04:	d50e      	bpl.n	8007c24 <HAL_SPI_TransmitReceive+0x188>
 8007c06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b15b      	cbz	r3, 8007c24 <HAL_SPI_TransmitReceive+0x188>
 8007c0c:	b155      	cbz	r5, 8007c24 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8007c0e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8007c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c18:	3301      	adds	r3, #1
 8007c1a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007c1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	6891      	ldr	r1, [r2, #8]
 8007c28:	f011 0101 	ands.w	r1, r1, #1
 8007c2c:	d00d      	beq.n	8007c4a <HAL_SPI_TransmitReceive+0x1ae>
 8007c2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	b153      	cbz	r3, 8007c4a <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8007c34:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c36:	68d2      	ldr	r2, [r2, #12]
 8007c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c3e:	3301      	adds	r3, #1
 8007c40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007c42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c44:	3b01      	subs	r3, #1
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c4a:	f7fe fd55 	bl	80066f8 <HAL_GetTick>
 8007c4e:	1bc0      	subs	r0, r0, r7
 8007c50:	4540      	cmp	r0, r8
 8007c52:	d3cd      	bcc.n	8007bf0 <HAL_SPI_TransmitReceive+0x154>
 8007c54:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007c58:	d0ca      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x154>
 8007c5a:	e7b2      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1b0      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	9001      	str	r0, [sp, #4]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	9b01      	ldr	r3, [sp, #4]
 8007c70:	e7a8      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8007c72:	2002      	movs	r0, #2
 8007c74:	e7a6      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8007c76:	2002      	movs	r0, #2
 8007c78:	e7aa      	b.n	8007bd0 <HAL_SPI_TransmitReceive+0x134>

08007c7a <HAL_SPI_ErrorCallback>:
 8007c7a:	4770      	bx	lr

08007c7c <HAL_SPI_IRQHandler>:
{
 8007c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8007c7e:	6803      	ldr	r3, [r0, #0]
{
 8007c80:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8007c82:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8007c84:	689a      	ldr	r2, [r3, #8]
{
 8007c86:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c88:	0656      	lsls	r6, r2, #25
 8007c8a:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8007c8e:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8007c92:	d408      	bmi.n	8007ca6 <HAL_SPI_IRQHandler+0x2a>
 8007c94:	07d6      	lsls	r6, r2, #31
 8007c96:	d506      	bpl.n	8007ca6 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c98:	064e      	lsls	r6, r1, #25
 8007c9a:	d504      	bpl.n	8007ca6 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8007c9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8007c9e:	b005      	add	sp, #20
 8007ca0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8007ca4:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ca6:	0796      	lsls	r6, r2, #30
 8007ca8:	d504      	bpl.n	8007cb4 <HAL_SPI_IRQHandler+0x38>
 8007caa:	0608      	lsls	r0, r1, #24
 8007cac:	d502      	bpl.n	8007cb4 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8007cae:	4620      	mov	r0, r4
 8007cb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007cb2:	e7f4      	b.n	8007c9e <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8007cb4:	0956      	lsrs	r6, r2, #5
 8007cb6:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8007cba:	07d2      	lsls	r2, r2, #31
 8007cbc:	d54c      	bpl.n	8007d58 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007cbe:	068d      	lsls	r5, r1, #26
 8007cc0:	d54a      	bpl.n	8007d58 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cc2:	b177      	cbz	r7, 8007ce2 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cc4:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8007cc8:	2000      	movs	r0, #0
 8007cca:	2a03      	cmp	r2, #3
 8007ccc:	d03e      	beq.n	8007d4c <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007cd0:	f042 0204 	orr.w	r2, r2, #4
 8007cd4:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cd6:	9001      	str	r0, [sp, #4]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	9201      	str	r2, [sp, #4]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	9201      	str	r2, [sp, #4]
 8007ce0:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007ce2:	07f0      	lsls	r0, r6, #31
 8007ce4:	d50c      	bpl.n	8007d00 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ce6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	9203      	str	r2, [sp, #12]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	9203      	str	r2, [sp, #12]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007d02:	b34a      	cbz	r2, 8007d58 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d0a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d12:	078a      	lsls	r2, r1, #30
 8007d14:	d022      	beq.n	8007d5c <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d16:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8007d18:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d1a:	f022 0203 	bic.w	r2, r2, #3
 8007d1e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8007d20:	b140      	cbz	r0, 8007d34 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d22:	4b10      	ldr	r3, [pc, #64]	; (8007d64 <HAL_SPI_IRQHandler+0xe8>)
 8007d24:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d26:	f7fe fd67 	bl	80067f8 <HAL_DMA_Abort_IT>
 8007d2a:	b118      	cbz	r0, 8007d34 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007d34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007d36:	b178      	cbz	r0, 8007d58 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <HAL_SPI_IRQHandler+0xe8>)
 8007d3a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d3c:	f7fe fd5c 	bl	80067f8 <HAL_DMA_Abort_IT>
 8007d40:	b150      	cbz	r0, 8007d58 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d48:	6563      	str	r3, [r4, #84]	; 0x54
 8007d4a:	e005      	b.n	8007d58 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	9202      	str	r2, [sp, #8]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	9302      	str	r3, [sp, #8]
 8007d56:	9b02      	ldr	r3, [sp, #8]
}
 8007d58:	b005      	add	sp, #20
 8007d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f7ff ff8c 	bl	8007c7a <HAL_SPI_ErrorCallback>
 8007d62:	e7f9      	b.n	8007d58 <HAL_SPI_IRQHandler+0xdc>
 8007d64:	08007d69 	.word	0x08007d69

08007d68 <SPI_DMAAbortOnError>:
{
 8007d68:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8007d6a:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8007d6e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007d70:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8007d72:	f7ff ff82 	bl	8007c7a <HAL_SPI_ErrorCallback>
}
 8007d76:	bd08      	pop	{r3, pc}

08007d78 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d78:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007d7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d7c:	4290      	cmp	r0, r2
 8007d7e:	d00a      	beq.n	8007d96 <TIM_Base_SetConfig+0x1e>
 8007d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007d84:	d007      	beq.n	8007d96 <TIM_Base_SetConfig+0x1e>
 8007d86:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007d8a:	4290      	cmp	r0, r2
 8007d8c:	d003      	beq.n	8007d96 <TIM_Base_SetConfig+0x1e>
 8007d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d92:	4290      	cmp	r0, r2
 8007d94:	d115      	bne.n	8007dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007d96:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007d9c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <TIM_Base_SetConfig+0x6c>)
 8007da0:	4290      	cmp	r0, r2
 8007da2:	d00a      	beq.n	8007dba <TIM_Base_SetConfig+0x42>
 8007da4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007da8:	d007      	beq.n	8007dba <TIM_Base_SetConfig+0x42>
 8007daa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007dae:	4290      	cmp	r0, r2
 8007db0:	d003      	beq.n	8007dba <TIM_Base_SetConfig+0x42>
 8007db2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007db6:	4290      	cmp	r0, r2
 8007db8:	d103      	bne.n	8007dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dba:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc2:	694a      	ldr	r2, [r1, #20]
 8007dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007dca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dcc:	688b      	ldr	r3, [r1, #8]
 8007dce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd0:	680b      	ldr	r3, [r1, #0]
 8007dd2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <TIM_Base_SetConfig+0x6c>)
 8007dd6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dd8:	bf04      	itt	eq
 8007dda:	690b      	ldreq	r3, [r1, #16]
 8007ddc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dde:	2301      	movs	r3, #1
 8007de0:	6143      	str	r3, [r0, #20]
}
 8007de2:	4770      	bx	lr
 8007de4:	40012c00 	.word	0x40012c00

08007de8 <HAL_TIM_Base_Init>:
{
 8007de8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007dea:	4604      	mov	r4, r0
 8007dec:	b330      	cbz	r0, 8007e3c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007df6:	b91b      	cbnz	r3, 8007e00 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007dfc:	f7fe fb88 	bl	8006510 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e02:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e08:	1d21      	adds	r1, r4, #4
 8007e0a:	f7ff ffb5 	bl	8007d78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0e:	2301      	movs	r3, #1
  return HAL_OK;
 8007e10:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007e1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007e1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007e22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007e3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	e7fc      	b.n	8007e3a <HAL_TIM_Base_Init+0x52>

08007e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e40:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e42:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e44:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e46:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e4a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007e4e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e50:	6082      	str	r2, [r0, #8]
}
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <HAL_TIM_ConfigClockSource>:
{
 8007e54:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007e56:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007e5a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f04f 0002 	mov.w	r0, #2
 8007e62:	d027      	beq.n	8007eb4 <HAL_TIM_ConfigClockSource+0x60>
 8007e64:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007e66:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007e6a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007e6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007e70:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007e7a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007e7c:	680b      	ldr	r3, [r1, #0]
 8007e7e:	2b60      	cmp	r3, #96	; 0x60
 8007e80:	d04d      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0xca>
 8007e82:	d832      	bhi.n	8007eea <HAL_TIM_ConfigClockSource+0x96>
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d062      	beq.n	8007f4e <HAL_TIM_ConfigClockSource+0xfa>
 8007e88:	d815      	bhi.n	8007eb6 <HAL_TIM_ConfigClockSource+0x62>
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x42>
 8007e8e:	d809      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x50>
 8007e90:	f033 0210 	bics.w	r2, r3, #16
 8007e94:	d108      	bne.n	8007ea8 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8007e96:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	f043 0307 	orr.w	r3, r3, #7
 8007ea2:	e020      	b.n	8007ee6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8007ea4:	2b30      	cmp	r3, #48	; 0x30
 8007ea6:	d0f6      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007eaa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007eb0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007eb6:	2b50      	cmp	r3, #80	; 0x50
 8007eb8:	d1f6      	bne.n	8007ea8 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eba:	684a      	ldr	r2, [r1, #4]
 8007ebc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007ebe:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec6:	f025 0501 	bic.w	r5, r5, #1
 8007eca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ecc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007ece:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007ed8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007eda:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007edc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ee2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007ee6:	6083      	str	r3, [r0, #8]
}
 8007ee8:	e7de      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8007eea:	2b70      	cmp	r3, #112	; 0x70
 8007eec:	d00c      	beq.n	8007f08 <HAL_TIM_ConfigClockSource+0xb4>
 8007eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ef2:	d1d9      	bne.n	8007ea8 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8007ef4:	68cb      	ldr	r3, [r1, #12]
 8007ef6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007efa:	f7ff ffa1 	bl	8007e40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	6893      	ldr	r3, [r2, #8]
 8007f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f06:	e008      	b.n	8007f1a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8007f08:	68cb      	ldr	r3, [r1, #12]
 8007f0a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007f0e:	f7ff ff97 	bl	8007e40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f1a:	6093      	str	r3, [r2, #8]
      break;
 8007f1c:	e7c4      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f1e:	684d      	ldr	r5, [r1, #4]
 8007f20:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f22:	6a01      	ldr	r1, [r0, #32]
 8007f24:	f021 0110 	bic.w	r1, r1, #16
 8007f28:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007f2c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f36:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f3a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007f3e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f40:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007f42:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f48:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007f4c:	e7cb      	b.n	8007ee6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4e:	684a      	ldr	r2, [r1, #4]
 8007f50:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007f52:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f54:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f56:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5a:	f025 0501 	bic.w	r5, r5, #1
 8007f5e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f60:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007f62:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f68:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007f6c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007f6e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007f70:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f76:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007f7a:	e7b4      	b.n	8007ee6 <HAL_TIM_ConfigClockSource+0x92>

08007f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f7c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007f82:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	f04f 0002 	mov.w	r0, #2
 8007f8a:	d022      	beq.n	8007fd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f8c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007f8e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007f92:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f94:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f96:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f9a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007f9c:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f9e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa0:	4c0c      	ldr	r4, [pc, #48]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	d00a      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007faa:	d007      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007fac:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d003      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007fb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fbc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fbe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fc2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc4:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fc6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007fc8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007fca:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007fce:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8007fd2:	bd30      	pop	{r4, r5, pc}
 8007fd4:	40012c00 	.word	0x40012c00

08007fd8 <_ZdlPv>:
 8007fd8:	f000 b85c 	b.w	8008094 <free>

08007fdc <_ZdlPvj>:
 8007fdc:	f7ff bffc 	b.w	8007fd8 <_ZdlPv>

08007fe0 <_ZdaPv>:
 8007fe0:	f7ff bffa 	b.w	8007fd8 <_ZdlPv>

08007fe4 <_Znwj>:
 8007fe4:	2801      	cmp	r0, #1
 8007fe6:	bf38      	it	cc
 8007fe8:	2001      	movcc	r0, #1
 8007fea:	b510      	push	{r4, lr}
 8007fec:	4604      	mov	r4, r0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 f848 	bl	8008084 <malloc>
 8007ff4:	b930      	cbnz	r0, 8008004 <_Znwj+0x20>
 8007ff6:	f000 f80b 	bl	8008010 <_ZSt15get_new_handlerv>
 8007ffa:	b908      	cbnz	r0, 8008000 <_Znwj+0x1c>
 8007ffc:	f000 f810 	bl	8008020 <abort>
 8008000:	4780      	blx	r0
 8008002:	e7f4      	b.n	8007fee <_Znwj+0xa>
 8008004:	bd10      	pop	{r4, pc}

08008006 <_Znaj>:
 8008006:	f7ff bfed 	b.w	8007fe4 <_Znwj>

0800800a <_ZSt20__throw_length_errorPKc>:
 800800a:	b508      	push	{r3, lr}
 800800c:	f000 f808 	bl	8008020 <abort>

08008010 <_ZSt15get_new_handlerv>:
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <_ZSt15get_new_handlerv+0xc>)
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	f3bf 8f5b 	dmb	ish
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20002440 	.word	0x20002440

08008020 <abort>:
 8008020:	2006      	movs	r0, #6
 8008022:	b508      	push	{r3, lr}
 8008024:	f000 f932 	bl	800828c <raise>
 8008028:	2001      	movs	r0, #1
 800802a:	f7fe fad5 	bl	80065d8 <_exit>
	...

08008030 <__errno>:
 8008030:	4b01      	ldr	r3, [pc, #4]	; (8008038 <__errno+0x8>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000064 	.word	0x20000064

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	2600      	movs	r6, #0
 8008040:	4d0c      	ldr	r5, [pc, #48]	; (8008074 <__libc_init_array+0x38>)
 8008042:	4c0d      	ldr	r4, [pc, #52]	; (8008078 <__libc_init_array+0x3c>)
 8008044:	1b64      	subs	r4, r4, r5
 8008046:	10a4      	asrs	r4, r4, #2
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	f000 f948 	bl	80082e0 <_init>
 8008050:	2600      	movs	r6, #0
 8008052:	4d0a      	ldr	r5, [pc, #40]	; (800807c <__libc_init_array+0x40>)
 8008054:	4c0a      	ldr	r4, [pc, #40]	; (8008080 <__libc_init_array+0x44>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	080083dc 	.word	0x080083dc
 8008078:	080083dc 	.word	0x080083dc
 800807c:	080083dc 	.word	0x080083dc
 8008080:	080083f8 	.word	0x080083f8

08008084 <malloc>:
 8008084:	4b02      	ldr	r3, [pc, #8]	; (8008090 <malloc+0xc>)
 8008086:	4601      	mov	r1, r0
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	f000 b86d 	b.w	8008168 <_malloc_r>
 800808e:	bf00      	nop
 8008090:	20000064 	.word	0x20000064

08008094 <free>:
 8008094:	4b02      	ldr	r3, [pc, #8]	; (80080a0 <free+0xc>)
 8008096:	4601      	mov	r1, r0
 8008098:	6818      	ldr	r0, [r3, #0]
 800809a:	f000 b819 	b.w	80080d0 <_free_r>
 800809e:	bf00      	nop
 80080a0:	20000064 	.word	0x20000064

080080a4 <memcmp>:
 80080a4:	b530      	push	{r4, r5, lr}
 80080a6:	2400      	movs	r4, #0
 80080a8:	3901      	subs	r1, #1
 80080aa:	42a2      	cmp	r2, r4
 80080ac:	d101      	bne.n	80080b2 <memcmp+0xe>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e005      	b.n	80080be <memcmp+0x1a>
 80080b2:	5d03      	ldrb	r3, [r0, r4]
 80080b4:	3401      	adds	r4, #1
 80080b6:	5d0d      	ldrb	r5, [r1, r4]
 80080b8:	42ab      	cmp	r3, r5
 80080ba:	d0f6      	beq.n	80080aa <memcmp+0x6>
 80080bc:	1b58      	subs	r0, r3, r5
 80080be:	bd30      	pop	{r4, r5, pc}

080080c0 <memset>:
 80080c0:	4603      	mov	r3, r0
 80080c2:	4402      	add	r2, r0
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d100      	bne.n	80080ca <memset+0xa>
 80080c8:	4770      	bx	lr
 80080ca:	f803 1b01 	strb.w	r1, [r3], #1
 80080ce:	e7f9      	b.n	80080c4 <memset+0x4>

080080d0 <_free_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4605      	mov	r5, r0
 80080d4:	2900      	cmp	r1, #0
 80080d6:	d043      	beq.n	8008160 <_free_r+0x90>
 80080d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080dc:	1f0c      	subs	r4, r1, #4
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bfb8      	it	lt
 80080e2:	18e4      	addlt	r4, r4, r3
 80080e4:	f000 f8ee 	bl	80082c4 <__malloc_lock>
 80080e8:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <_free_r+0x94>)
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	4610      	mov	r0, r2
 80080ee:	b933      	cbnz	r3, 80080fe <_free_r+0x2e>
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	6014      	str	r4, [r2, #0]
 80080f4:	4628      	mov	r0, r5
 80080f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080fa:	f000 b8e9 	b.w	80082d0 <__malloc_unlock>
 80080fe:	42a3      	cmp	r3, r4
 8008100:	d90a      	bls.n	8008118 <_free_r+0x48>
 8008102:	6821      	ldr	r1, [r4, #0]
 8008104:	1862      	adds	r2, r4, r1
 8008106:	4293      	cmp	r3, r2
 8008108:	bf01      	itttt	eq
 800810a:	681a      	ldreq	r2, [r3, #0]
 800810c:	685b      	ldreq	r3, [r3, #4]
 800810e:	1852      	addeq	r2, r2, r1
 8008110:	6022      	streq	r2, [r4, #0]
 8008112:	6063      	str	r3, [r4, #4]
 8008114:	6004      	str	r4, [r0, #0]
 8008116:	e7ed      	b.n	80080f4 <_free_r+0x24>
 8008118:	461a      	mov	r2, r3
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	b10b      	cbz	r3, 8008122 <_free_r+0x52>
 800811e:	42a3      	cmp	r3, r4
 8008120:	d9fa      	bls.n	8008118 <_free_r+0x48>
 8008122:	6811      	ldr	r1, [r2, #0]
 8008124:	1850      	adds	r0, r2, r1
 8008126:	42a0      	cmp	r0, r4
 8008128:	d10b      	bne.n	8008142 <_free_r+0x72>
 800812a:	6820      	ldr	r0, [r4, #0]
 800812c:	4401      	add	r1, r0
 800812e:	1850      	adds	r0, r2, r1
 8008130:	4283      	cmp	r3, r0
 8008132:	6011      	str	r1, [r2, #0]
 8008134:	d1de      	bne.n	80080f4 <_free_r+0x24>
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	4401      	add	r1, r0
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	6053      	str	r3, [r2, #4]
 8008140:	e7d8      	b.n	80080f4 <_free_r+0x24>
 8008142:	d902      	bls.n	800814a <_free_r+0x7a>
 8008144:	230c      	movs	r3, #12
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	e7d4      	b.n	80080f4 <_free_r+0x24>
 800814a:	6820      	ldr	r0, [r4, #0]
 800814c:	1821      	adds	r1, r4, r0
 800814e:	428b      	cmp	r3, r1
 8008150:	bf01      	itttt	eq
 8008152:	6819      	ldreq	r1, [r3, #0]
 8008154:	685b      	ldreq	r3, [r3, #4]
 8008156:	1809      	addeq	r1, r1, r0
 8008158:	6021      	streq	r1, [r4, #0]
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	6054      	str	r4, [r2, #4]
 800815e:	e7c9      	b.n	80080f4 <_free_r+0x24>
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	20002444 	.word	0x20002444

08008168 <_malloc_r>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	1ccd      	adds	r5, r1, #3
 800816c:	f025 0503 	bic.w	r5, r5, #3
 8008170:	3508      	adds	r5, #8
 8008172:	2d0c      	cmp	r5, #12
 8008174:	bf38      	it	cc
 8008176:	250c      	movcc	r5, #12
 8008178:	2d00      	cmp	r5, #0
 800817a:	4606      	mov	r6, r0
 800817c:	db01      	blt.n	8008182 <_malloc_r+0x1a>
 800817e:	42a9      	cmp	r1, r5
 8008180:	d903      	bls.n	800818a <_malloc_r+0x22>
 8008182:	230c      	movs	r3, #12
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	2000      	movs	r0, #0
 8008188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800818a:	f000 f89b 	bl	80082c4 <__malloc_lock>
 800818e:	4921      	ldr	r1, [pc, #132]	; (8008214 <_malloc_r+0xac>)
 8008190:	680a      	ldr	r2, [r1, #0]
 8008192:	4614      	mov	r4, r2
 8008194:	b99c      	cbnz	r4, 80081be <_malloc_r+0x56>
 8008196:	4f20      	ldr	r7, [pc, #128]	; (8008218 <_malloc_r+0xb0>)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	b923      	cbnz	r3, 80081a6 <_malloc_r+0x3e>
 800819c:	4621      	mov	r1, r4
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 f83c 	bl	800821c <_sbrk_r>
 80081a4:	6038      	str	r0, [r7, #0]
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f000 f837 	bl	800821c <_sbrk_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d123      	bne.n	80081fa <_malloc_r+0x92>
 80081b2:	230c      	movs	r3, #12
 80081b4:	4630      	mov	r0, r6
 80081b6:	6033      	str	r3, [r6, #0]
 80081b8:	f000 f88a 	bl	80082d0 <__malloc_unlock>
 80081bc:	e7e3      	b.n	8008186 <_malloc_r+0x1e>
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	1b5b      	subs	r3, r3, r5
 80081c2:	d417      	bmi.n	80081f4 <_malloc_r+0x8c>
 80081c4:	2b0b      	cmp	r3, #11
 80081c6:	d903      	bls.n	80081d0 <_malloc_r+0x68>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	441c      	add	r4, r3
 80081cc:	6025      	str	r5, [r4, #0]
 80081ce:	e004      	b.n	80081da <_malloc_r+0x72>
 80081d0:	6863      	ldr	r3, [r4, #4]
 80081d2:	42a2      	cmp	r2, r4
 80081d4:	bf0c      	ite	eq
 80081d6:	600b      	streq	r3, [r1, #0]
 80081d8:	6053      	strne	r3, [r2, #4]
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f878 	bl	80082d0 <__malloc_unlock>
 80081e0:	f104 000b 	add.w	r0, r4, #11
 80081e4:	1d23      	adds	r3, r4, #4
 80081e6:	f020 0007 	bic.w	r0, r0, #7
 80081ea:	1ac2      	subs	r2, r0, r3
 80081ec:	d0cc      	beq.n	8008188 <_malloc_r+0x20>
 80081ee:	1a1b      	subs	r3, r3, r0
 80081f0:	50a3      	str	r3, [r4, r2]
 80081f2:	e7c9      	b.n	8008188 <_malloc_r+0x20>
 80081f4:	4622      	mov	r2, r4
 80081f6:	6864      	ldr	r4, [r4, #4]
 80081f8:	e7cc      	b.n	8008194 <_malloc_r+0x2c>
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d0e3      	beq.n	80081cc <_malloc_r+0x64>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4630      	mov	r0, r6
 8008208:	f000 f808 	bl	800821c <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d1dd      	bne.n	80081cc <_malloc_r+0x64>
 8008210:	e7cf      	b.n	80081b2 <_malloc_r+0x4a>
 8008212:	bf00      	nop
 8008214:	20002444 	.word	0x20002444
 8008218:	20002448 	.word	0x20002448

0800821c <_sbrk_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	2300      	movs	r3, #0
 8008220:	4d05      	ldr	r5, [pc, #20]	; (8008238 <_sbrk_r+0x1c>)
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7fe f9dc 	bl	80065e4 <_sbrk>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_sbrk_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_sbrk_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	20002568 	.word	0x20002568

0800823c <_raise_r>:
 800823c:	291f      	cmp	r1, #31
 800823e:	b538      	push	{r3, r4, r5, lr}
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	d904      	bls.n	8008250 <_raise_r+0x14>
 8008246:	2316      	movs	r3, #22
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008252:	b112      	cbz	r2, 800825a <_raise_r+0x1e>
 8008254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008258:	b94b      	cbnz	r3, 800826e <_raise_r+0x32>
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f830 	bl	80082c0 <_getpid_r>
 8008260:	462a      	mov	r2, r5
 8008262:	4601      	mov	r1, r0
 8008264:	4620      	mov	r0, r4
 8008266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800826a:	f000 b817 	b.w	800829c <_kill_r>
 800826e:	2b01      	cmp	r3, #1
 8008270:	d00a      	beq.n	8008288 <_raise_r+0x4c>
 8008272:	1c59      	adds	r1, r3, #1
 8008274:	d103      	bne.n	800827e <_raise_r+0x42>
 8008276:	2316      	movs	r3, #22
 8008278:	6003      	str	r3, [r0, #0]
 800827a:	2001      	movs	r0, #1
 800827c:	e7e7      	b.n	800824e <_raise_r+0x12>
 800827e:	2400      	movs	r4, #0
 8008280:	4628      	mov	r0, r5
 8008282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008286:	4798      	blx	r3
 8008288:	2000      	movs	r0, #0
 800828a:	e7e0      	b.n	800824e <_raise_r+0x12>

0800828c <raise>:
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <raise+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f7ff bfd3 	b.w	800823c <_raise_r>
 8008296:	bf00      	nop
 8008298:	20000064 	.word	0x20000064

0800829c <_kill_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	2300      	movs	r3, #0
 80082a0:	4d06      	ldr	r5, [pc, #24]	; (80082bc <_kill_r+0x20>)
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	f7fe f98d 	bl	80065c8 <_kill>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	d102      	bne.n	80082b8 <_kill_r+0x1c>
 80082b2:	682b      	ldr	r3, [r5, #0]
 80082b4:	b103      	cbz	r3, 80082b8 <_kill_r+0x1c>
 80082b6:	6023      	str	r3, [r4, #0]
 80082b8:	bd38      	pop	{r3, r4, r5, pc}
 80082ba:	bf00      	nop
 80082bc:	20002568 	.word	0x20002568

080082c0 <_getpid_r>:
 80082c0:	f7fe b980 	b.w	80065c4 <_getpid>

080082c4 <__malloc_lock>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__malloc_lock+0x8>)
 80082c6:	f000 b809 	b.w	80082dc <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	20002570 	.word	0x20002570

080082d0 <__malloc_unlock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__malloc_unlock+0x8>)
 80082d2:	f000 b804 	b.w	80082de <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	20002570 	.word	0x20002570

080082dc <__retarget_lock_acquire_recursive>:
 80082dc:	4770      	bx	lr

080082de <__retarget_lock_release_recursive>:
 80082de:	4770      	bx	lr

080082e0 <_init>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	bf00      	nop
 80082e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e6:	bc08      	pop	{r3}
 80082e8:	469e      	mov	lr, r3
 80082ea:	4770      	bx	lr

080082ec <_fini>:
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	bf00      	nop
 80082f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f2:	bc08      	pop	{r3}
 80082f4:	469e      	mov	lr, r3
 80082f6:	4770      	bx	lr
